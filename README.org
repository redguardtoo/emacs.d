* A fast and robust Emacs setup
- Fast. Only *one second* to start up
- Robust. Never crash after package upgrade. Packages could be installed without network
- Support Windows. You can find&grep files on Windows with minimum setup
- Tested with Emacs 25.3, 26.1, 27 on Linux/Windows/Cygwin/macOS/WSL(Windows Subsystem for Linux)
- Emacs vanilla key bindings and directory layout is respected
- Usable in [[https://packages.debian.org/emacs-nox][emacs-nox]] and works in [[http://www.putty.org/][PuTTY]]

[[file:demo.png]]

* Table of Content                                                              :noexport:TOC:
- [[#a-fast-and-robust-emacs-setup][A fast and robust Emacs setup]]
- [[#checklist][Checklist]]
- [[#installation][Installation]]
  - [[#install-in-normal-way][Install in normal way]]
  - [[#install-stable-version-optional][Install stable version (OPTIONAL)]]
  - [[#third-party-programs-optional][Third party programs (OPTIONAL)]]
- [[#tutorial-optional][Tutorial (OPTIONAL)]]
  - [[#basic-tutorial][Basic tutorial]]
  - [[#evil-mode-tutorial][Evil-mode tutorial]]
  - [[#methodology][Methodology]]
- [[#usage][Usage]]
  - [[#quick-start][Quick start]]
  - [[#key-bindings][Key bindings]]
- [[#faq][FAQ]]
  - [[#git-blame-current-line][git blame current line]]
  - [[#saveload-windows-layout][Save/Load windows layout]]
  - [[#use-this-configuration-as-merge-tool-for-git][Use this configuration as merge tool for Git]]
  - [[#default-terminal-shell][Default terminal shell]]
  - [[#override-default-setup][Override default setup]]
  - [[#code-navigation-and-auto-completion][Code navigation and auto-completion]]
  - [[#use-m-key-for-evil-matchit][Use "m" key for "evil-matchit"]]
  - [[#color-theme][Color theme]]
  - [[#grepreplace-text-in-project][Grep/Replace text in project]]
  - [[#hydraswipercounselivy][Hydra/Swiper/Counsel/Ivy]]
  - [[#react-and-jsx][React and JSX]]
  - [[#git-gutter][git-gutter]]
  - [[#start-a-shell-inside-emacs][Start a shell inside Emacs]]
  - [[#setup-fonts-in-gui-emacs][Setup fonts in GUI Emacs]]
  - [[#synchronize-setup-with-git][Synchronize setup with Git]]
  - [[#indentation][Indentation]]
  - [[#editing-lisp][Editing Lisp]]
  - [[#use-smart-mode-line-or-powerline][Use smart-mode-line or powerline?]]
  - [[#key-bindings-doesnt-work][Key bindings doesn't work?]]
  - [[#org-mode][Org-mode]]
  - [[#macos-user][macOS user?]]
  - [[#locked-packages][Locked packages]]
  - [[#customize-global-variables][Customize global variables]]
  - [[#opensave-files-with-counselivy][Open/Save files with Counsel/Ivy]]
  - [[#windows][Windows]]
  - [[#yasnippet][Yasnippet]]
  - [[#non-english-users][Non-English users]]
  - [[#behind-corporate-firewall][Behind corporate firewall]]
  - [[#network-is-blocked][Network is blocked]]
  - [[#email][Email]]
  - [[#cannot-download-packages][Cannot download packages?]]
  - [[#use-packages-on-gnu-elpa][use packages on GNU ELPA]]
  - [[#disable-vim-key-bindings][Disable Vim key bindings]]
  - [[#evil-setup][Evil setup]]
  - [[#c-auto-completion-doesnt-work][C++ auto-completion doesn't work?]]
  - [[#auto-completion-for-other-languages][Auto-completion for other languages]]
  - [[#chinese-input-method-editor][Chinese Input Method Editor]]
  - [[#install-multiple-versions-of-emacs][Install multiple versions of Emacs]]
  - [[#change-time-locale][Change Time Locale]]
  - [[#directory-structure][Directory structure]]
  - [[#true-colors-in-terminal-emacs][True colors in terminal Emacs]]
  - [[#run-the-unit-test-before-git-commit][Run the unit test before git commit]]
  - [[#python-environment][Python environment]]
- [[#support-legacy-emacs-versions][Support legacy Emacs versions]]
  - [[#emacs-23][Emacs 23]]
  - [[#emacs-243][Emacs 24.3]]
  - [[#emacs-244-and-245][Emacs 24.4 and 24.5]]
- [[#tips][Tips]]
- [[#report-bug][Report bug]]

* Checklist
- Emacs 26.1 is strongly recommended. It is faster and easier to set up
- Please read FAQ to disable [[http://www.vim.org][Vim]] key bindings
- Please read section "Key bindings" to learn key bindings
- If you use Windows Emacs, you have to [[https://emacs.stackexchange.com/questions/27202/how-do-i-install-gnutls-for-emacs-25-1-on-windows][install GnuTLS Dlls manually]] to install packages from remote repositories. Or else you got error message like =error: Package `async-' is unavailable= on Windows. Please note since =Emacs 26.1=, you can download full version which works out of box
- Most packages from [[http://melpa.org][MELPA]] are *invisible* but packages from [[https://stable.melpa.org][MELPA Stable]] are visible. You can modify variable =melpa-include-packages= in =~/.emacs.d/lisp/init-elpa.el= to install unstable packages. Please choose stable packages if possible. Even advanced user could under-estimate the risk of unstable packages
- Emacs 24 support will be dropped on 2019. Check "Support legacy Emacs versions" if you use old versions
- Other issues are covered in FAQ
* Installation
Most users should follow the section "Install in normal way".

You need the section "Install stable version" *if and only if*,
- You don't have network access
- You have never used any command line program
** Install in normal way
Please remove =~/.emacs.d/init.el= and =~/.emacs=. =~= means [[https://en.wikipedia.org/wiki/Home_directory][Home directory]].

There are two ways to install this setup (I recommend the first way):

First way is to download [[https://github.com/redguardtoo/emacs.d/archive/master.zip][latest setup]] and extract its content into =~/.emacs.d=, OR run command =cd ~; git clone https://github.com/redguardtoo/emacs.d.git .emacs.d= in shell.

Second way is to use [[https://github.com/redguardtoo/emacs.d/archive/stable.zip][stable setup]], OR run command =cd ~; git clone https://github.com/redguardtoo/emacs.d.git .emacs.d; cd .emacs.d; git reset --hard stable= in shell.

Ensure that =init.el= contained in this repo ends up at =~/.emacs.d/init.el=.

By default, packages are installed automatically during Emacs startup.

Someone reported that package repository [[http://melpa.org]] is not responsive in China.

No worries. You could answer "YES" to the question "Switch to faster package repositories in China temporarily?" when firing Emacs. Please note after startup you could change variable =package-archives= in =init-elpa.el= to permanently switch to Chinese repositories.
** Install stable version (OPTIONAL)
- Remove =~/.emacs=.
- Download [[https://github.com/redguardtoo/emacs.d/archive/stable.zip]]
- Extract its content into empty directory =~/.emacs.d=
- Download [[https://github.com/redguardtoo/myelpa/archive/stable.zip]]
- Extract the zip somewhere, say =~/projs/myelpa=
- Make sure a file named =archive-contents= exists in =~/projs/myelpa=
- Uncomment the line containing "myelpa" in =~/.emacs.d/lisp/init-elpa.el=. Path =~/projs/myelpa/= could be modified.
- Start Emacs now!

Now you are using local package repository =~/projs/melpa=.

You can switch to online repositories like http://elpa.gnu.org or http://melpa.org by modifying =~/.emacs.d/lisp/init-elpa.el=.
** Third party programs (OPTIONAL)
*** Install
Most command line programs can be installed through =default package manager=.

=Default package manager= could be:
- [[https://github.com/transcode-open/apt-cyg][apt-cyg]] at Cygwin
- [[https://github.com/mxcl/homebrew][homebrew]] at macOS
- any package manager at Linux (=apt= on Debian/Ubuntu, =yum= on Redhat, =pacman= on Arch, =emerge= on Gentoo ...)

Some package managers allow you to install the program for current user. For example, python package manager =pip= has the option "[[https://packaging.python.org/tutorials/installing-packages/][--user]]".
*** List of programs
These programs are *OPTIONAL*.

Please ignore error message related to command line programs. For example, if =aspell= and =hunspell= are not installed, you can ignore all the flyspell error messages.
**** fortune-zh or fortune
- Show ancient Chinese poem or quotes from random sources

Please note you can't install =fortune-zh= through [[https://brew.sh/][homebrew]] on macOS but there is a simple workaround:
- install fortune
- Download =fortune-zh= code from [[https://github.com/debiancn/fortune-zh]]
- Extract code and run =make= in its folder
- copy data files and the script named =fortune-zh= into corresponding folders which =fortune= is using. You may need edit the file =fortune-zh= before copying
**** w3m (web browser)
- Required by =emacs-w3m=

You can insert =(setq mm-text-html-renderer 'w3m)= in =~/.gnus.el= to force HTML mail be rendered by =w3m= instead of the default HTML rendering engine =shr=.

=shr= supports colored text while =w3m= not.

But my =w3m= based utilities can open video/audio/image with the help of =w3m=.
**** lua
- Required by =flymake-lua=
**** aspell or hunspell
- Required by =flyspell=
- =hunspell= is the alternative of =aspell=. You need only one of them.
- For =aspell=, you may need its dictionary =aspell-en=
- aspell dictionary is set "en_US" in =~/.emacs./lisp/init-spelling.el=. It can be changed.
- I recommend =aspell= for programmers. Non-programmers find =hunspell= is better on typo correction

If you use hunspell, check [[http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html][my article]]. Please note the hunspell executable understands either unix format path or windows format path but not both. You need figure out hunspell version you are using.

You can set =force-to-use-hunspell= in =init-spelling.el= if you prefer hunspell.

This setup use [[https://github.com/redguardtoo/wucuo][wucuo]] to spell check camel case words. It supports both aspell and hunspell.  Run =M-x wucuo-start= and =M-x flyspell-buffer= to check camel case words. 

Aspell's default personal English dictionary is =$HOME/.aspell.en.pws=. Its content is like:
#+begin_src conf
personal_ws-1.1 en 4
ABN
ACC
ACN
ACT
#+end_src

Hunspell's default personal English dictionary is =$HOME/.hunspell_en_US=. The file format is same as aspell.
**** tidy
- Required by =web-mode= for syntax check. It's also required by the command =my-tidy-html= for html formatting
**** identify from [[http://www.imagemagick.org/][ImageMagick]]
- Required by =org-mode= to export org file to odt contain images
**** zip and unzip
- Required by =org-mode= to export org file to odt file
**** jshint
- Install =node.js= through OS package manager, then =npm install -g jshint=
- Required by js-mode
- I use js2-mode which does NOT need jshint
**** xsel or xclip
- Required by my clipboard command =copy-to-x-clipboard= and =paste-from-x-clipboard= under Linux
**** [[http://www.cmake.org][CMake]]
- Required by =cpputils-cmake=
- Please use [[http://www.cmake.org/Wiki/CMake_FAQ][out-of-source build tree]] when using CMake
**** [[http://clang.llvm.org][Clang]]
- Required by =cpputils-cmake=, =company-clang= from [[https://github.com/company-mode/company-mode][company-mode]]
- If you use =cpputils-cmake= and =cmake=, =cpputils-cmake= will do all the setup for you. You need not read next item! But please spend *a few minutes to learn the basics of cmake*! There is a one minute step-by-step-guide in [[https://github.com/redguardtoo/cpputils-cmake][README of cpputils-cmake]] to teach you how to use cmake.
- If you use =company-clang=, add =(setq company-clang-arguments '("-I/example1/dir" "-I/example2/dir"))= into ~/.emacs.d/init.el
**** Pandoc
- Required by =markdown-preview= from =markdown-mode=
**** GCC/Make
- Required by =flymake=
**** [[https://ctags.io/][Universal Ctags (recommended)]] or [[http://ctags.sourceforge.net][Exuberant CTags]]
- It creates tags file for code navigation and code completion
- Required by many tags related packages (=xref=, =counsel-etags=, =company-ctags= from =company-mode=, etc)
- See [[http://blog.binchen.org/?p=1057][How to use ctags in Emacs effectively]]
**** [[http://www.gnu.org/software/global][GNU Global]]
- Required by [[https://github.com/syohex/emacs-counsel-gtags][counsel-gtags]] and =company-gtags= from =company-mode=
- It creates index files for code navigation and auto-completion
- Please read [[https://www.gnu.org/software/global/manual/global.html][GNU Global manual]] about environment variables =GTAGSLIBPATH= and =MAKEOBJDIRPREFIX=
**** LibreOffice
- Only its executable =soffice= is used for converting odt file into doc/pdf
- Conversion happens automatically when exporting org-mode to odt
- The conversion command is defined in variable =org-export-odt-convert-processes=
**** js-beautify
- Beautify javascript code
- Install [[http://pip.readthedocs.org/en/stable/installing/][pip]] through OS package manager, then =pip install jsbeautifier=
**** syntaxerl
- syntax check [[http://www.erlang.org/][Erlang]] through flymake
- Install from [[https://github.com/ten0s/syntaxerl]]
**** jedi & flake8
- Required by [[https://github.com/jorgenschaefer/elpy][elpy]] which is python IDE
- At least =pip install jedi flake8=. Check elpy website for more tips.
**** sdcv (console version of StarDict)
- Required by =sdcv.e=
- Run =curl http://pkgs.fedoraproject.org/repo/pkgs/stardict-dic/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2/f164dcb24b1084e1cfa2b1cb63d590e6/stardict-dictd_www.dict.org_wn-2.4.2.tar.bz2 | tar jx -C ~/.stardict/dic= to install dictionary
**** [[https://github.com/BurntSushi/ripgrep][ripgrep]]
- Optionally used by =M-x counsel-etags-grep= to search text in files
- Run =curl https://sh.rustup.rs -sSf | sh= in shell to install [[https://www.rust-lang.org/][Rust]] then =cargo install ripgrep=
- Tweak environment variable PATH so Emacs find ripgrep
**** [[http://www.sbcl.org/][sbcl]]
- Required by [[https://common-lisp.net/project/slime/][SLIME: The Superior Lisp Interaction Mode for Emacs]]
**** ffmpeg
- Some dired commands use ffmpeg to process video/audio
**** LanguageTool
It's Grammar, Style and Spell Checker
- Download from [[https://languagetool.org/download/LanguageTool-stable.zip]].
- Used by [[https://github.com/mhayashi1120/Emacs-langtool][Langtool]. Check its README for usage
**** [[https://github.com/stsquad/emacs_chrome][edit browser's text area with Emacs]]
Please install corresponding Chrome/Firefox addons.
* Tutorial (OPTIONAL)
Knowledge of Linux/Unix is required. At least you should know the meanings of "environment variable", "shell", "stdin", "stdout", "man", "info".
** Basic tutorial
Please read this tutorial at least for once.
*** Step 1, learn OS basic
At minimum you need know how Emacs interacts with other command line programs,
- What is [[https://en.wikipedia.org/wiki/Environment_variable][Environment Variable]] 
- What is [[https://en.wikipedia.org/wiki/Pipeline_(Unix)][Pipeline (Unix)]], [[https://en.wikipedia.org/wiki/Standard_streams][Standard Streams]]

*** Step 2, read official tutorial
Press =C-h t= in Emacs ("C" means Ctrl key, "M" means Alt key) to read bundled tutorial. 

At minimum, you need learn:
- How to move cursor
- =C-h v= to describe variable
- =C-h f= to describe function
- =C-h k= to describe command key binding
*** Step 3, know org-mode basics
[[http://orgmode.org/][Org-mode]] is for notes-keeping and planning.

Please watch [[https://www.youtube.com/watch?v=oJTwQvgfgMM][Carsten Dominik's talk]]. It's really simple. The only hot key to remember is =Tab=.
*** Step 4, start from a real world problem
You can visit [[http://www.emacswiki.org/emacs/][EmacsWiki]] for the solution. Newbies can ask for help at [[http://www.reddit.com/r/emacs/]].
** Evil-mode tutorial
Required for vim user,
- Finish [[http://superuser.com/questions/246487/how-to-use-vimtutor][vimtutor]].
- Read [[https://github.com/emacs-evil/evil/blob/master/doc/evil.pdf]]
** Methodology
See [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide][Master Emacs in One Year]].
* Usage
I *avoid overriding the original setup* of third party command line program.

** Quick start
On Windows, you need install Cygwin which provides command line programs to Emacs. Cygwin could be installed on any hard drive but it's highly recommended don't change it relative path to the root driver.

Install Ctags (Universal Ctags is better. Exuberant Ctags is fine). On Windows, you could install Ctags through Cygwin.

Run =M-x counsel-etags-find-ctags= from =counsel-etags= to navigate code. It uses tags files created by ctags. Tags file will be automatically created/update when you start using `counsel-etags`.

Run =M-x counsel-etags-grep= to search text (grep) in project. Project root is automatically detected.

Run =M-x find-file-in-project-by-selected= from =find-file-in-project= to find file in project. Project root is automatically detected. You can also add one line setup in =.emacs= like =(setq ffip-project-root "~/proj1/")=. 

Code auto-completion works out of box by using tags file created by Ctags. You need run =counsel-etags= at least once to fire up Ctags. =company-ctags= from =company-mode= provides the candidates for auto completion. No manual setup is required.

Please [[https://en.wikipedia.org/wiki/Grep][grep]] in the directory =~/.emacs.d/lisp= if you have any further questions on setup.
** Key bindings
Don't memorize any key binding. Try =M-x my-command= and key binding hint is displayed.

Most key bindings are defined in =~/.emacs.d/lisp/init-evil.el=, a few key in =~/.emacs.d/lisp/init-hydra.el= which uses [[https://github.com/abo-abo/hydra][Hydra]].

Press =C-c C-y= anywhere to bring up default hydra menu.

The tutorials I recommended have enough information about commands.

Besides, "[[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html][How to be extremely efficient in Emacs]]" lists my frequently used commands.

Press =kj= to escape from =evil-insert-state= and everything else in Emacs. It's much more efficient than =ESC= in Vim or =C-g= in Emacs. Search =evil-escape= in =init-evil.el= for details.
* FAQ
** git blame current line
Run =vc-msg-show=.

If you select a region inside current line, the *correct commit which submits the selected snippet* is displayed instead of the latest commit touch the whole line.
** Save/Load windows layout
=SPC s s= or =M-x wg-create-workgrou= to save windows layout.
=SPC l l= or =M-x my-wg-switch-workgroup= to load windows layout.
** Use this configuration as merge tool for Git
This configuration might be the most efficient and most powerful merge tool for VCS.
Insert below configuration into =~/.gitconfig=,
#+begin_src javascript
[mergetool.ediff]
# use git mergetool ediff to resolve conflicts
cmd = emacs -nw -Q --eval \"(setq startup-now t)\" -l \"~/.emacs.d/init.el\" --eval \"(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \\\"$BASE\\\") (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\") (ediff-merge-files \\\"$LOCAL\\\" \\\"$REMOTE\\\" nil \\\"$MERGED\\\")))\"
#+end_src

Then run =git mergetool -t ediff=  to resolve conflicts.

Here is [[https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0][my ~/.gitconfig]]. You can use [[https://github.com/redguardtoo/test-git-mergetool]] to practice.
** Default terminal shell
You can customize =my-term-program= whose default value is =/bin/bash=. It's used by =ansi-term= and =multi-term=.
** Override default setup
Place your setup in =~/.custom.el= which is loaded after other "*.el".

So you can use any functions defined in =~/.emacs.d=.

Here is a sample to override keybindings defined in =~/.emacs.d/lisp/init-evil.el=,
#+begin_src elisp
(eval-after-load "evil"
  '(progn
     (my-space-leader-def
       "ss" 'pwd
       "ll" 'pwd
       "pp" 'pwd)))
#+end_src
** Code navigation and auto-completion
It's usable out of box if Ctags is installed

To navigate, =M-x counsel-etags-find-tag-at-point=.

To enable code auto-completion, =M-x counsel-etags-scan-code= at least once.

Optionally, you can add =(add-hook 'after-save-hook 'counsel-etags-virtual-update-tags)= into your =.emacs= to automatically update tags file.

No further setup is required.
** Use "m" key for "evil-matchit"
The default keybinding of =evil-matchit= is =%=. Its evil text object name is also =%=.

You can use =m= instead of =%= as new keybinding and the text object name from =evil-matchit=.

It's just one liner in =~/.custom.el=,
#+begin_src javascript
;; evil-matchit 2.3.0 is required
(setq my-use-m-for-matchit t)
#+end_src

Use =,m= for =evil-set-marker= whose original keybinding is =m=.
** Color theme
*** Preview color theme
Check [[https://emacsthemes.com/]].

Write down the name of color theme (for example, molokai).

*** Setup color theme manually (recommended)
You can =M-x counsel-load-theme= to switch themes.

Or you can insert below code into end of =~/.custom.el= or =~/.emacs.d/init.el=,
#+begin_src elisp
;; Please note the color theme's name is "molokai"
(load-theme 'molokai t)
#+end_src

You can also run =M-x random-color-theme= to load random color theme.
*** Use color theme in terminal
Use 256 colors is just one CLI without any extra setup,
#+BEGIN_SRC sh
TERM=xterm-256color emacs -nw
#+END_SRC

True color requires a little setup.

You need install the terminal supporting true color. See [[https://gist.github.com/XVilka/8346728][this list]]. I recommend [[https://mintty.github.io/][Mintty]] on Cygwin, [[https://gnometerminator.blogspot.com/p/introduction.html][Terminator]] on Linux, [[https://www.iterm2.com/][iTerm2]] on macOS.

Only Emacs 26 supports true color.

Follow [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Colors-on-a-TTY.html][Emacs manual]] to set up and start Emacs.

** Grep/Replace text in project
Many third party plugins bundled in this setup have already provided enough features. For example, if you use =git=, =counsel-git-grep= from package [[https://github.com/abo-abo/swiper][counsel/ivy]] works out of the box.

A generic grep program =counsel-etags-grep= is also provided. Since =counsel-etags-grep= is based on =counsel/ivy=, it also supports a magic called "multi-editing via Ivy". You could read [[https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/][Nuclear weapon multi-editing via Ivy and Ag]] to get the idea.

Multi-edit workflow is optimized. After =M-x counsel-etags-grep= or pressing =,qq=, press =C-c C-o C-x C-q= to enable =wgrep-mode=. You can edit text (for example, delete lines) in =wgrep-mode= directly.

You can exclude multiple keywords using =!keyword1 keyword2= in =ivy=.
** Hydra/Swiper/Counsel/Ivy
I love all the packages from [[https://github.com/abo-abo][Oleh Krehel (AKA abo-abo)]]. Every article from his [[https://oremacs.com/][blog]] is worth reading ten times.

You can input =:pinyin1 pinyin2 !pinyin3 pinyin4= in ivy UI to search by Chinese Pinyin. The key point is to make sure the first character of input is ":".
** React and JSX
I use =rjsx-mode= with Emacs v25+. It's based on =js2-mode= so it has excellent imenu support.

But =web-mode= is also very popular to edit jsx files.

You can add =(add-auto-mode 'rjsx-mode "\\.jsx\\'")= into =~/.custome.el= to use =web-mode= for jsx files.
** git-gutter
I use modified version of =git-gutter= for now until my pull request is merged into official repository.

You can set =git-gutter:exp-to-create-diff= to make git gutter support other VCS (Perforce, for example),
#+begin_src elisp
(setq git-gutter:exp-to-create-diff
      (shell-command-to-string (format "p4 diff -du -db %s"
                                       (file-relative-name buffer-file-name))))
#+end_src
** Start a shell inside Emacs
Please =M-x multi-term=.

If you use Zsh instead of Bash, please modify =init-term-mode.el=.
** Setup fonts in GUI Emacs
Non-Chinese can use [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]].

Chinese can use c[[https://github.com/tumashu/chinese-fonts-setup][chinese-fonts-setup]].

They are not included in this setup. You need install them manually.
** Synchronize setup with Git
Synchronize from my stable setup:
#+begin_src bash
git pull https://redguardtoo@github.com/redguardtoo/emacs.d.git stable
#+end_src

Or latest setup:
#+begin_src bash
git pull https://redguardtoo@github.com/redguardtoo/emacs.d.git
#+end_src

You can revert commit:
#+begin_src bash
# always start from the latest related commit
git revert commit-2014-12-01
git revert commit-2014-11-01
#+end_src
** Indentation
Learn [[http://www.emacswiki.org/emacs/IndentationBasics][basics]]. Then use [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][my solution]].
** Editing Lisp
Please note [[http://emacswiki.org/emacs/ParEdit][paredit-mode]] is enabled when editing Lisp. Search "paredit cheat sheet" to learn its key bindings.
** Use [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] or [[https://github.com/milkypostman/powerline][powerline]]?
Comment out =(require 'init-modeline)= in init.el at first.
** Key bindings doesn't work?
Other desktop applications may intercept the key bindings. For example, [[https://github.com/redguardtoo/emacs.d/issues/320][it's reported QQ on windows 8 can intercept "M-x"]].
** Org-mode
Press =M-x org-version=, then read corresponding online manual to set up.

For example, =org-capture= requires [[http://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture][manual setup]].

Run =M-x org-open-at-point= to open link under cursor. Http link will be opened by the embedded =emacs-w3m= is used. `C-u M-x org-open-at-point= uses the external browser specified by =browse-url-generic-program= whose value could be =/usr/bin/firefox=.
** macOS user?
Please replace legacy Emacs 22 and ctags with the new versions.

The easiest way is change [[https://en.wikipedia.org/wiki/PATH_(variable)][Environment variable PATH]].
** Locked packages
Some packages are so important to my workflow that they are locked.

Those packages are placed at =~/.emacs.d/site-lisp=.

They will not be upgraded by ELPA.emacs.d/site-lisp= at first.
** Customize global variables
Some variables are hard coded so you cannot =M-x customize= to modify them.

Here are the steps to change their values:
- Find the variable description by =M-x customize=
- For text "Company Clang Insert Arguments", search =company-clang-insert-argument= in =~/.emacs.d/lisp/=
- You will find =~/.emacs.d/lisp/init-company.el= and modify =company-clang-insert-argument=

BTW, please *read my comments* above the code at first.
** Open/Save files with Counsel/Ivy
Keep pressing =C-M-j= to ignore candidates and open/save files using current input.

You can also press =M-o= to apply other action on selected file. See [[https://oremacs.com/2015/07/23/ivy-multiaction/]] for details.
** Windows
I strongly suggest [[http://www.cygwin.com/][Cygwin]] version of Emacs. Native Windows version is fine if it knows how to find the third party command line programs which could be installed through Cygwin. Please add =C:\Cygwin64\bin= to environment variable =PATH= so Emacs can detect the programs automatically.

By default, environment variable =HOME= points to the directory =C:\Users\<username>= on Windows 7+. You need copy the folder =.emacs.d= into that directory. Or you can change =HOME=.
** Yasnippet
- Instead of =M-x yas-expand= or pressing =TAB= key, you can press =M-j= instead.
- Yasnippet works out of box. But you can =M-x my-yas-reload-all= to force Yasnippet compile all the snippets. If you run =my-yas-reload-all= once, you always need run it when new snippets is added. The purpose of =my-yas-reload-all= is to optimize the Emacs startup only. IMO, it's not worth the effort.
- You can add your snippets into =~/.emacs.d/snippets/=.
- Run =grep -rns --exclude='.yas*' 'key:' *= in =~/.emacs.d/snippets= to see my own snippets
** Non-English users
Locale must be *UTF-8 compatible*. For example, as I type =locale= in shell, I got the output "zh_CN.UTF-8".
** Behind corporate firewall
Run below command in shell:
#+begin_src bash
http_proxy=http://yourname:passwd@proxy.company.com:8080 emacs -nw
#+end_src
** Network is blocked
Try [[https://github.com/XX-net/XX-Net]]. Run command =http_proxy=http://127.0.0.1:8087 emacs -nw= in shell after starting XX-Net.
** Email
If you use Gnus for email, check =init-gnus.el= and read [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][my Gnus tutorial]].
** Cannot download packages?
Some package cannot be downloaded automatically because of network problem.

Run =M-x package-refresh-content=, restart Emacs, reinstall package.
** use packages on [[https://elpa.gnu.org/][GNU ELPA]]
By default, packages from GNU ELPA are NOT available. Search the line "uncomment below line if you need use GNU ELPA" in =init-elpa.el= if you want to access GNU ELPA.

For example, [[https://github.com/flycheck/flycheck][flycheck]] requires packages from GNU ELPA.
** Disable Vim key bindings
By default EVIL (Vim emulation in Emacs) is used. Comment out line containing =(require 'init-evil)= in init.el to unload it.
** Evil setup
It's defined in =~/.emacs.d/lisp/init-evil.el=. Press =C-z= to switch between Emacs and Vim key bindings.

Please read [[https://github.com/emacs-evil/evil/raw/master/doc/evil.pdf][its PDF manual]] before using =evil-mode=.
** C++ auto-completion doesn't work?
I assume you are using [[https://github.com/company-mode/company-mode][company-mode]]. Other packages have similar setup.

There are many ways to scan the C++ source files. =company-clang= from =company-mode= and =Clang= is good at handling C++.

If you use clang to parse the C++ code:
- Make sure code is syntax correct
- assign reasonable value into company-clang-arguments

Here is sample setup:
#+begin_src elisp
(setq company-clang-arguments '("-I/home/myname/projs/test-cmake" "-I/home/myname/projs/test-cmake/inc"))
#+end_src

In "friendly" Visual C++, [[http://www.codeproject.com/Tips/588022/Using-Additional-Include-Directories][similar setup]] is required.

You can use other backends instead of =clang=. For example, you can use =company-gtags= and [[https://www.gnu.org/software/global/][GNU Global]] instead. See [[http://blog.binchen.org/posts/emacs-as-c-ide-easy-way.html][Emacs as C++ IDE, easy way]] for details.

** Auto-completion for other languages
It's similar to C++ setup. Since GNU Global supports many popular languages, you can use =company-gtags=.

For languages GNU Global doesn't support, you can fall back to =company-ctags= and [[https://en.wikipedia.org/wiki/Ctags][Ctags]]. Ctags configuration file is =~/.ctags=.

You can also complete line by =M-x eacl-complete-line= and complete multi-lines statement by =M-x eacl-complete-multiline=.
** Chinese Input Method Editor
Please note pyim is already built into this setup. You don't need install it through ELPA.

Run =M-x toggle-input-method= to toggle input method [[https://github.com/tumashu/pyim][pyim]].

Dictionaries with ".pyim" extension under the directory  =~/.eim/= are automatically loaded.

Please =curl -L http://tumashu.github.io/pyim-bigdict/pyim-bigdict.pyim.gz | zcat > ~/.eim/pyim-bigdict.pyim= to install dictionary for pyim. 
** Install multiple versions of Emacs
Run below commands in shell:
#+begin_src bash
mkdir -p ~/tmp;
curl http://ftp.gnu.org/gnu/emacs/emacs-24.4.tar.gz | tar xvz -C ~/tmp/emacs-24.4
cd ~/tmp/emacs-24.4;
mkdir -p ~/myemacs/24.4;
rm -rf ~/myemacs/24.4/*;
./configure --prefix=~/myemacs/24.4 --without-x --without-dbus --without-sound && make && make install
#+end_src

Feel free to replace 24.4 with other version number.
** Change Time Locale
Insert below code into =~/.emacs= or =~/.custom.el=,
#+begin_src elisp
;; Use en_US locale to format time.
;; if not set, the OS locale is used.
(setq system-time-locale "C")
#+end_src
** Directory structure
=~/.emacs.d/init.el= is the main file. It includes other =*.el= files.

=~/.emacs.d/lisp/init-elpa.el= defines what packages will be installed from [[http://melpa.org][MELPA]].

Packages are installed into =~/.emacs.d/elpa/=.

I also manually download and extract some packages into =~/.emacs.d/site-lisp/=. Packages in =~/.emacs.d/site-lisp/= are *not visible* to the package manager.

My own snippets is at =~/.emacs.d/snippets=.

The git hooks is placed in =~/.emacs.d/githooks= directory.

Other directories don't matter.
** True colors in terminal Emacs
- Install Emacs 26
- Install [[https://gist.github.com/XVilka/8346728][terminals supporting true color]]. I suggest [[https://mintty.github.io/][mintty]] on Windows, [[https://gnometerminator.blogspot.com/p/introduction.html][terminator]] on Linux, [[https://www.iterm2.com/][iTerm2]] on macOS
- [[https://www.gnu.org/software/emacs/draft/manual/html_mono/efaq.html#Colors-on-a-TTY][Setup and start Emacs]]
** Run the unit test before git commit
On macOS/Linux/Cygwin, run =make githooks= to install hooks into =~/.emacs.d/.git/hooks=.

Then unit test is run automatically before =git commit=.
** Python environment
This setup used [[https://github.com/jorgenschaefer/elpy][elpy (Emacs Python Development Environment)]]. The setup for python development is minimum, as you can see in =init-python.el=.

If elpy warns you that the python environment is corrupt, you have two solutions.

Solution 1, ignore the warning and turn off elpy by comment out =(elpy-enable)= in =init-python.el=. Then you won't have those python IDE things.

Solution 2, fix your python environment. For example, if elpy gives the the error message =ImportError: No module named pkg_resources= on Ubuntu, a quick search will lead to [[https://askubuntu.com/questions/1006201/importerror-no-module-named-pkg-resources][this link.]] So a simple shell command =sudo apt install --reinstall python-pkg-resources python-setuptools= solves the problem.

Solution 2 might be better because you couldn't do any serious coding anyway if the python environment is broken, .
* Support legacy Emacs versions
** Emacs 23
Version 1.2 of this setup is the last version to support Emacs v23.

Here are the steps to use that setup:
- Download [[https://github.com/redguardtoo/emacs.d/archive/1.2.zip]]
- Download [[https://github.com/redguardtoo/myelpa/archive/1.2.zip]]
- Follow the section =Install stable version in easiest way= but skip the download steps
** Emacs 24.3
Version 2.6 is the last version to support =Emacs 24.3=.

Download [[https://github.com/redguardtoo/emacs.d/archive/2.6.zip]] and [[https://github.com/redguardtoo/myelpa/archive/2.6.zip]] and you are good to go.
** Emacs 24.4 and 24.5
Version 2.9 is the last version to support =Emacs 24.4+=

Please use [[https://github.com/redguardtoo/emacs.d/archive/2.9.zip]] and [[https://github.com/redguardtoo/myelpa/archive/2.9.zip]].
* Tips
- Never turn off any bundled mode if it's on by default. Future version of Emacs may assume it's on. Tweak its flag in mode hook instead!
- Git skills are *extremely useful*. Please read the chapters "Git Basics", "Git Branching", "Git Tools" from [[https://git-scm.com/book/en/][Pro Git]]
- You can run =optimize-emacs-startup= to compile "*.el" under =~/.emacs.d/lisp/=
- Run =emacs --no-splash --eval "(setq startup-now t)" -l "$HOME/.emacs.d/init.el"= to start up Emacs as fast as possible. But it has less features
* Report bug
- Please check [[http://www.emacswiki.org/emacs/][EmacsWiki]] and my FAQ at first
- If you still can't resolve the issue, restart Emacs with option =---debug-init=, run =M-x toggle-debug-on-error= in Emacs. Try to reproduce the issue
- Send error messages to the original developer if it's third party package's problem
- If *you are sure* it's this setup's problem, file bug report at [[https://github.com/redguardtoo/emacs.d]]. Don't email me!

Bug report should include details (OS, Emacs version ...).
