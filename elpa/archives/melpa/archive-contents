
(1 (zzz-to-char . [(20150905 537) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Fancy version of `zap-to-char' command" single ((:url . "https://github.com/mrkkrp/zzz-to-char") (:keywords "convenience"))]) (zygospore . [(20140703 152) nil "reversible C-x 1 (delete-other-windows)" single ((:url . "https://github.com/louiskottmann/zygospore.el"))]) (ztree . [(20150702 1013) nil "Text mode directory tree" tar ((:keywords "files" "tools") (:url . "https://github.com/fourier/ztree"))]) (zotxt . [(20150719 2321) ((request-deferred (0 2 0))) "Tools to integrate emacs with Zotero via the zotxt plugin." tar nil]) (zotelo . [(20150808 355) nil "Manage Zotero collections from emacs" single ((:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager"))]) (zossima . [(20121123 1635) ((inf-ruby (2 2 3))) "Ruby from Emacs" tar ((:url . "https://github.com/technomancy/zossima") (:keywords "ruby" "convenience"))]) (zop-to-char . [(20150901 47) ((cl-lib (0 5))) "A replacement of zap-to-char." single ((:url . "https://github.com/thierryvolpiatto/zop-to-char"))]) (zoom-window . [(20141204 546) nil "Zoom window like tmux" single ((:url . "https://github.com/syohex/emacs-zoom-window"))]) (zoom-frm . [(20150110 1252) ((frame-fns (0)) (frame-cmds (0))) "Commands to zoom frame font size." single ((:url . "http://www.emacswiki.org/zoom-frm.el") (:keywords "frames" "extensions" "convenience"))]) (zonokai-theme . [(20150408 2002) nil "No description available." tar nil]) (zones . [(20150908 1238) nil "Zones of text - like multiple regions" single ((:url . "http://www.emacswiki.org/zones.el") (:keywords "narrow" "restriction" "widen" "region" "zone"))]) (zombie-trellys-mode . [(20150304 648) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) "A minor mode for interaction with Zombie Trellys" single ((:keywords "languages"))]) (zombie . [(20141222 816) nil "major mode for editing ZOMBIE programs" single ((:url . "http://hins11.yu-yake.com/"))]) (znc . [(20140722 1421) ((cl-lib (0 2)) (erc (5 3))) "ZNC + ERC" single ((:url . "https://github.com/sshirokov/ZNC.el"))]) (zlc . [(20151010 1857) nil "Provides zsh like completion system to Emacs" single ((:keywords "matching" "convenience"))]) (zerodark-theme . [(20151010 822) nil "A dark, medium contrast theme for Emacs" single ((:url . "https://github.com/NicolasPetton/zerodark-theme") (:keywords "themes"))]) (zencoding-mode . [(20140213 22) nil "Unfold CSS-selector-like expressions to markup" single ((:url . "https://github.com/rooney/zencoding") (:keywords "convenience"))]) (zenburn-theme . [(20151003 2346) nil "A low contrast color theme for Emacs." single ((:url . "http://github.com/bbatsov/zenburn-emacs"))]) (zen-and-art-theme . [(20120622 737) nil "zen and art color theme for GNU Emacs 24" single nil]) (zeitgeist . [(20131228 1009) nil "No description available." single nil]) (zeal-at-point . [(20151011 1914) nil "Search the word at point with Zeal" single ((:url . "https://github.com/jinzhu/zeal-at-point"))]) (youdao-dictionary . [(20150913 2344) ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) "Youdao Dictionary interface for Emacs" single ((:url . "https://github.com/xuchunyang/youdao-dictionary.el") (:keywords "convenience" "chinese" "dictionary"))]) (yesql-ghosts . [(20150220 437) ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) "Display ghostly yesql defqueries inline" single nil]) (ycmd . [(20151027 1626) ((emacs (24)) (f (0 17 1)) (dash (1 2 0)) (deferred (0 3 2)) (popup (0 5 0))) "emacs bindings to the ycmd completion server" tar ((:url . "https://github.com/abingham/emacs-ycmd"))]) (ycm . [(20150822 1136) nil "Emacs client for the YouCompleteMe auto-completion server." single ((:keywords "c" "abbrev"))]) (yaxception . [(20150105 652) nil "Provide framework about exception like Java for Elisp" single ((:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal"))]) (yatex . [(20151014 2028) nil "Yet Another tex-mode for emacs //野鳥//" tar nil]) (yatemplate . [(20150305 1526) ((yasnippet (0 8 1))) "File templates with yasnippet" single ((:url . "https://github.com/mineo/yatemplate") (:keywords "files" "convenience"))]) (yasnippet . [(20151021 1539) nil "Yet another snippet extension for Emacs." tar ((:url . "http://github.com/capitaomorte/yasnippet") (:keywords "convenience" "emulation"))]) (yascroll . [(20150315 605) ((cl-lib (0 3))) "Yet Another Scroll Bar Mode" single ((:keywords "convenience"))]) (yari . [(20150804 2247) nil "Yet Another RI interface for Emacs" single ((:keywords "tools"))]) (yard-mode . [(20140816 1044) nil "Minor mode for Ruby YARD comments" single ((:url . "https://github.com/pd/yard-mode.el"))]) (yaoddmuse . [(20150712 421) nil "Major mode for EmacsWiki and other Oddmuse wikis" single ((:url . "http://www.emacswiki.org/emacs/download/yaoddmuse.el") (:keywords "yaoddmuse" "oddmuse"))]) (yandex-weather . [(20150821 414) nil "No description available." tar nil]) (yaml-mode . [(20150816 2235) nil "Major mode for editing YAML files" single ((:keywords "data" "yaml"))]) (yalinum . [(20130217 243) nil "yet another display line numbers." single ((:keywords "convenience" "tools"))]) (yagist . [(20150425 551) ((cl-lib (0 3))) "Yet Another Emacs integration for gist.github.com" single ((:url . "https://github.com/mhayashi1120/yagist.el") (:keywords "tools"))]) (yafolding . [(20141202 2056) nil "Yet another folding extension for Emacs" single ((:keywords "folding"))]) (yabin . [(20140205 1951) nil "Yet Another Bignum package (A thin wrapper of calc.el)." single ((:keywords "data"))]) (xtest . [(20141214 906) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single ((:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert"))]) (xterm-title . [(20091203 1023) nil "Update xterm titles" single nil]) (xterm-keybinder . [(20150808 1358) ((emacs (24 3)) (cl-lib (0 5)) (let-alist (1 0 1))) "Let you extra keybinds in xterm" tar ((:keywords "convenient"))]) (xterm-frobs . [(20091211 1555) nil "manipulate xterm when running emacs in tty mode" single nil]) (xterm-color . [(20150823 646) nil "ANSI & XTERM 256 color support" single nil]) (xresources-theme . [(20141219 917) nil "Use your .Xresources as your emacs theme" single ((:keywords "xresources" "theme"))]) (xquery-mode . [(20140121 943) nil "A simple mode for editing xquery programs" tar nil]) (xmlunicode . [(20140121 623) nil "Unicode support for XML" tar ((:keywords "utf-8" "unicode" "xml" "characters"))]) (xmlgen . [(20130219 219) nil "A DSL for generating XML." single nil]) (xml-rpc . [(20150902 1827) nil "An elisp implementation of clientside XML-RPC" single ((:url . "http://github.com/hexmode/xml-rpc-el") (:keywords "xml" "rpc" "network"))]) (xkcd . [(20151016 2153) ((json (1 3))) "View xkcd from Emacs" single ((:url . "https://github.com/vibhavp/emacs-xkcd") (:keywords "xkcd" "webcomic"))]) (xcscope . [(20140510 1437) nil "cscope interface for (X)Emacs" single ((:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c"))]) (xbm-life . [(20151012 1241) nil "A XBM version of Conway's Game of Life" single ((:url . "https://github.com/wasamasa/xbm-life") (:keywords "games"))]) (xahk-mode . [(20150504 1611) nil "Major mode for editing AutoHotkey scripts." single ((:url . "http://xahlee.info/mswin/emacs_autohotkey_mode.html") (:keywords "languages"))]) (xah-replace-pairs . [(20150522 333) nil "Multi-pair find/replace in strings and region." single ((:url . "http://ergoemacs.org/emacs/elisp_replace_string_region.html") (:keywords "lisp" "tools" "find replace"))]) (xah-math-input . [(20150907 1700) nil "a minor mode for inputting math and Unicode symbols." single ((:url . "http://ergoemacs.org/emacs/xmsi-math-symbols-input.html") (:keywords "abbrev" "convenience" "unicode" "math" "latex"))]) (xah-lookup . [(20150602 1146) nil "look up word on internet" single ((:url . "http://ergoemacs.org/emacs/emacs_lookup_ref.html") (:keywords "help" "docs" "convenience"))]) (xah-get-thing . [(20150712 1430) nil "get thing or selection at point." single ((:url . "http://ergoemacs.org/emacs/elisp_get-selection-or-unit.html") (:keywords "extensions" "lisp" "tools"))]) (xah-fly-keys . [(20151027 42) nil "A efficient modal keybinding set minor mode based on ergonomics." single ((:url . "http://ergoemacs.org/misc/ergoemacs_vi_mode.html") (:keywords "convenience" "emulations" "vim" "ergoemacs"))]) (xah-find . [(20150726 1542) nil "find replace in pure emacs lisp. Purpose similar to unix grep/sed." single ((:url . "http://ergoemacs.org/emacs/elisp-xah-find-text.html") (:keywords "convenience" "extensions" "files" "tools" "unix"))]) (xah-elisp-mode . [(20150814 1431) nil "Major mode for editing emacs lisp." single ((:url . "http://ergoemacs.org/emacs/xah-elisp-mode.html") (:keywords "lisp" "languages"))]) (x-dict . [(20091203 1023) nil "emacs interface for several online dictionaries" single nil]) (wwtime . [(20120629 1350) nil "Insert a time of day with appropriate world-wide localization" single ((:keywords "time"))]) (wsd-mode . [(20150913 1030) nil "Emacs major-mode for www.websequencediagrams.com" tar ((:url . "https://github.com/josteink/wsd-mode") (:keywords "wsd" "diagrams" "design" "process" "modelling" "uml"))]) (ws-butler . [(20150126 759) nil "Unobtrusively remove trailing whitespace." single ((:url . "https://github.com/lewang/ws-butler"))]) (writeroom-mode . [(20151006 224) ((emacs (24 1)) (visual-fill-column (1 4))) "Minor mode for distraction-free writing" tar ((:keywords "text"))]) (writegood-mode . [(20150325 1115) nil "Polish up poor writing on the fly" single ((:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar"))]) (wrap-region . [(20140116 2320) ((dash (1 0 3))) "Wrap text with punctation or tag" single ((:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience"))]) (world-time-mode . [(20140627 107) nil "show whole days of world-time diffs" single ((:keywords "tools" "calendar"))]) (workgroups2 . [(20141102 1122) ((cl-lib (0 4)) (dash (2 8 0)) (anaphora (1 0 0)) (f (0 17))) "New workspaces for Emacs" single ((:url . "https://github.com/pashinin/workgroups2") (:keywords "session" "management" "window-configuration" "persistence"))]) (workgroups . [(20110726 941) nil "workgroups for windows (for Emacs)" single ((:keywords "session" "management" "window-configuration" "persistence"))]) (worf . [(20150823 2000) ((helm (1 5 3)) (ace-link (0 1 0)) (hydra (0 13 0))) "A warrior does not press so many keys! (in org-mode)" single ((:url . "https://github.com/abo-abo/worf") (:keywords "lisp"))]) (wordsmith-mode . [(20140203 427) nil "Syntax analysis and NLP text-processing in Emacs (OSX-only)" single nil]) (wordnut . [(20151002 1457) ((emacs (24 4))) "Major mode interface to WordNet" tar nil]) (wonderland . [(20130912 1819) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single ((:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland"))]) (wolfram-mode . [(20140118 757) ((emacs (24 3))) "Mathematica editing and inferior mode." single ((:url . "https://github.com/kawabata/wolfram-mode/") (:keywords "languages" "processes" "tools"))]) (wn-mode . [(20150121 1315) ((emacs (24))) "numeric window switching shortcuts" single ((:url . "https://github.com/luismbo/wn-mode") (:keywords "buffers" "windows" "switching-windows"))]) (with-namespace . [(20130407 1122) ((dash (1 1 0)) (loop (1 1))) "interoperable elisp namespaces" single ((:keywords "namespaces"))]) (with-editor . [(20151022 933) ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113))) "Use the Emacsclient as $EDITOR" tar ((:url . "https://github.com/magit/magit") (:keywords "tools"))]) (wispjs-mode . [(20140103 1432) ((clojure-mode (0))) "Major mode for Wisp code." single ((:url . "https://github.com/krisajenkins/wispjs-mode"))]) (wisp-mode . [(20150623 1034) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp"))]) (winpoint . [(20131023 1013) nil "Remember buffer positions per-window, not per buffer" single ((:url . "https://github.com/jorgenschaefer/winpoint") (:keywords "convenience"))]) (windsize . [(20110728 1336) nil "Simple, intuitive window resizing" single ((:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience"))]) (window-purpose . [(20150908 648) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar ((:url . "https://github.com/bmag/emacs-purpose") (:keywords "frames"))]) (window-numbering . [(20150228 1247) nil "Numbered window shortcuts" single ((:url . "http://nschum.de/src/emacs/window-numbering-mode/") (:keywords "faces" "matching"))]) (window-number . [(20140123 1902) nil "Select windows by numbers." single ((:url . "http://www.emacswiki.org/emacs/download/window-number.el"))]) (window-layout . [(20150716 2207) nil "window layout manager" single ((:keywords "window" "layout"))]) (window-jump . [(20150213 1236) nil "Move left/right/up/down through your windows." single ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience"))]) (window-end-visible . [(20140508 1341) nil "Find the last visible point in a window" single ((:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions"))]) (window+ . [(20150104 1711) nil "Extensions to `window.el'." single ((:url . "http://www.emacswiki.org/window%2b.el") (:keywords "internal" "window"))]) (windata . [(20080412 755) nil "convert window configuration to list" single ((:keywords "convenience" "frames"))]) (win-switch . [(20150208 1911) nil "fast, dynamic bindings for window-switching/resizing" single ((:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient"))]) (wimpy-del . [(20150104 1709) nil "Require confirmation for large region deletion." single ((:url . "http://www.emacswiki.org/wimpy-del.el") (:keywords "region" "cut" "kill" "copy"))]) (wiki-summary . [(20150408 1422) ((emacs (24))) "View Wikipedia summaries in Emacs easily." single ((:url . "https://github.com/jozefg/wiki-summary.el") (:keywords "wikipedia" "utility"))]) (wiki-nav . [(20150223 554) ((button-lock (1 0 2)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation"))]) (widget-mvc . [(20150101 2006) nil "MVC framework for the emacs widgets" single ((:keywords "lisp" "widget"))]) (wide-column . [(20120814 112) nil "Calls functions dependant on column position." single ((:keywords "minor mode" "cursor colour" "column width"))]) (wid-edit+ . [(20150104 1707) nil "Extensions to standard library `wid-edit.el'." single ((:url . "http://www.emacswiki.org/wid-edit%2b.el") (:keywords "widget" "color"))]) (whole-line-or-region . [(20110901 130) nil "operate on current line if region undefined" single ((:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines"))]) (whitespace-cleanup-mode . [(20150603 447) nil "Intelligently call whitespace-cleanup on save" single ((:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience"))]) (white-sand-theme . [(20150822 147) ((emacs (24))) "Emacs theme with a light background." single nil]) (whitaker . [(20150814 422) ((dash (2 10 0))) "Comint interface for Whitaker's Words" single ((:keywords "processes"))]) (which-key . [(20151022 659) ((emacs (24 3))) "Display available keybindings in popup" single ((:url . "https://github.com/justbur/emacs-which-key"))]) (what-the-commit . [(20150901 616) nil "Random commit message generator" single ((:url . "http://barbarito.me/") (:keywords "git" "commit" "message"))]) (wgrep-pt . [(20140510 1531) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-pt.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-helm . [(20140528 1427) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-ag . [(20141012 311) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-ack . [(20141012 311) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el") (:keywords "grep" "edit" "extensions"))]) (wgrep . [(20141016 1656) nil "Writable grep buffer and apply the changes to files" single ((:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el") (:keywords "grep" "edit" "extensions"))]) (weibo . [(20150307 1442) ((cl-lib (0 5))) "Weibo client for Emacs" tar ((:url . "https://github.com/austin-----/weibo.emacs") (:keywords "weibo"))]) (weechat . [(20150703 247) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar nil]) (wedge-ws . [(20140714 1449) nil "Wedge whitespace between columns in text" single ((:keywords "formatting" "indentation"))]) (websocket . [(20150719 1048) nil "Emacs WebSocket client and server" single ((:keywords "communication" "websocket" "server"))]) (weblogger . [(20110926 918) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single ((:url . "http://launchpad.net/weblogger-el") (:keywords "weblog" "blogger" "cms" "movable" "type" "openweblog" "blog"))]) (web-server . [(20140905 1706) ((emacs (24 3))) "Emacs Web Server" tar ((:url . "https://github.com/eschulte/emacs-web-server") (:keywords "http" "server" "network"))]) (web-mode . [(20151026 1437) nil "major mode for editing web templates" single ((:url . "http://web-mode.org") (:keywords "languages"))]) (web-completion-data . [(20150623 333) nil "Shared completion data for ac-html and company-web" tar ((:url . "https://github.com/osv/web-completion-data") (:keywords "html" "auto-complete" "company"))]) (web-beautify . [(20131118 226) nil "Format HTML, CSS and JavaScript/JSON by js-beautify" single ((:url . "https://github.com/yasuyk/web-beautify"))]) (web . [(20141231 1201) ((dash (2 9 0)) (s (1 5 0))) "useful HTTP client" single ((:url . "http://github.com/nicferrier/emacs-web") (:keywords "lisp" "http" "hypermedia"))]) (weather-metno . [(20150831 1807) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar nil]) (wcheck-mode . [(20151015 1342) nil "General interface for text checkers" tar nil]) (wc-mode . [(20150116 2102) nil "show wc-like information in status bar" single ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "length" "characters" "words" "lines" "mode line"))]) (wc-goal-mode . [(20140829 659) nil "Running word count with goals (minor mode)" single ((:url . "https://github.com/bnbeckwith/wc-goal-mode"))]) (wavefront-obj-mode . [(20150501 1116) nil "Major mode for Wavefront obj files" single ((:url . "http://github.com/abend/wavefront-obj-mode"))]) (watch-buffer . [(20120331 1344) nil "run a shell command when saving a buffer" single ((:url . "https://github.com/mjsteger/watch-buffer") (:keywords "automation" "convenience"))]) (warm-night-theme . [(20150607 741) ((emacs (24))) "Emacs 24 theme with a dark background." single nil]) (wanderlust . [(20151005 530) ((semi (1 14 7))) "Yet Another Message Interface on Emacsen" tar nil]) (wandbox . [(20150905 824) ((emacs (24)) (json (1 3)) (tabulated-list (1 0))) "Wandbox API Library for Emacs" single ((:url . "https://github.com/kosh04/emacs-wandbox") (:keywords "c" "programming" "tools"))]) (wand . [(20141104 1645) ((dash (2 5 0))) "Magic wand for Emacs - Selecting and executing" tar ((:url . "https://github.com/cmpitg/wand") (:keywords "extensions" "tools"))]) (wakatime-mode . [(20150609 2356) nil "Automatic time tracking extension for WakaTime" single ((:keywords "calendar" "comm"))]) (waher-theme . [(20141115 430) ((emacs (24 1))) "Emacs 24 theme based on waher for st2 by dduckster" single ((:url . "https://github.com/jasonm23/emacs-waher-theme"))]) (wacspace . [(20140826 2232) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar nil]) (w3m . [(20151013 327) nil "an Emacs interface to w3m" tar ((:keywords "w3m" "www" "hypermedia"))]) (w32browser-dlgopen . [(20150104 1706) nil "Use w32browser with standard Windows Open File box." single ((:url . "http://www.emacswiki.org/w32browser-dlgopen.el") (:keywords "files" "extensions" "convenience" "dialog"))]) (w32-browser . [(20150104 1705) nil "Run Windows application associated with a file." single ((:url . "http://www.emacswiki.org/w32-browser.el") (:keywords "mouse" "dired" "w32" "explorer"))]) (volume . [(20150718 1309) nil "tweak your sound card volume from Emacs" single ((:url . "http://www.brockman.se/software/volume-el/"))]) (volatile-highlights . [(20141004 2240) nil "Minor mode for visual feedback on some operations." single ((:url . "http://www.emacswiki.org/emacs/download/volatile-highlights.el") (:keywords "emulations" "convenience" "wp"))]) (voca-builder . [(20150625 1133) nil "No description available." single nil]) (vline . [(20120108 445) nil "show vertical line (column highlighting) mode." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/vline.el") (:keywords "faces" "editing" "emulating"))]) (vlf . [(20150101 718) nil "View Large Files" tar ((:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities"))]) (vkill . [(20091203 1022) nil "view and kill Unix processes from within Emacs" single nil]) (visual-regexp-steroids . [(20150411 416) ((visual-regexp (0 8))) "Extends visual-regexp to support other regexp engines" tar ((:url . "https://github.com/benma/visual-regexp-steroids.el/") (:keywords "external" "foreign" "regexp" "replace" "python" "visual" "feedback"))]) (visual-regexp . [(20150329 954) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single ((:url . "https://github.com/benma/visual-regexp.el/") (:keywords "regexp" "replace" "visual" "feedback"))]) (visual-fill-column . [(20151006 227) ((emacs (24 3))) "fill-column for visual-line-mode" single nil]) (visual-ascii-mode . [(20150129 246) nil "Visualize ascii code (small integer) on buffer." single ((:url . "https://github.com/Dewdrops/visual-ascii-mode") (:keywords "presentation"))]) (visible-mark . [(20150623 2150) nil "Make marks visible." single ((:url . "https://gitlab.com/iankelling/visible-mark") (:keywords "marking" "color" "faces"))]) (virtualenvwrapper . [(20151005 806) ((dash (1 5 0)) (s (1 6 1))) "a featureful virtualenv tool for Emacs" single ((:url . "http://github.com/porterjamesj/virtualenvwrapper.el") (:keywords "python" "virtualenv" "virtualenvwrapper"))]) (virtualenv . [(20140220 1501) nil "Virtualenv for Python" single ((:keywords "python" "virtualenv"))]) (vimrc-mode . [(20150607 913) nil "Major mode for vimrc files" single ((:url . "https://github.com/mcandre/vimrc-mode") (:keywords "languages" "vim"))]) (vimish-fold . [(20151014 619) ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) "Fold text like in Vim" single ((:url . "https://github.com/mrkkrp/vimish-fold") (:keywords "convenience"))]) (vimgolf . [(20140814 1448) nil "VimGolf interface for the One True Editor" single ((:keywords "games" "vimgolf" "vim"))]) (vim-region . [(20140329 924) ((expand-region (20140127))) "Select region as vim" single ((:url . "https://github.com/ongaeshi/emacs-vim-region"))]) (vim-empty-lines-mode . [(20150110 2026) ((emacs (23))) "Vim-like empty line indicator at end of files." single ((:url . "https://github.com/jmickelin/vim-empty-lines-mode") (:keywords "emulations"))]) (viewer . [(20141021 1138) nil "View-mode extension" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/viewer.el") (:keywords "view" "extensions"))]) (vi-tilde-fringe . [(20141027 1942) ((emacs (24))) "Displays tildes in the fringe on empty lines a la Vi." single ((:url . "https://github.com/syl20bnr/vi-tilde-fringe") (:keywords "emulation"))]) (vertigo . [(20150924 2036) ((dash (2 11 0))) "Jump across lines using the home row." single ((:url . "https://github.com/noctuid/vertigo.el") (:keywords "vim" "vertigo"))]) (vertica . [(20131217 711) ((sql (3 0))) "Vertica SQL mode extension" single ((:keywords "sql" "vertica"))]) (vector-utils . [(20140508 1341) nil "Vector-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions"))]) (vcomp . [(20140906 1508) nil "compare version strings" single ((:url . "https://github.com/tarsius/vcomp") (:keywords "versions"))]) (vcl-mode . [(20121129 1314) nil "Syntax highlighting for Varnish Command Language" single nil]) (vc-osc . [(20120910 211) nil "non-resident support for osc version-control" single nil]) (vc-fossil . [(20141031 22) nil "VC backend for the fossil sofware configuraiton management system" tar nil]) (vc-darcs . [(20141122 1326) nil "a VC backend for darcs" single ((:keywords "vc"))]) (vc-check-status . [(20150330 101) nil "Warn you when quitting emacs and leaving repo dirty." tar ((:url . "https://github.com/thisirs/vc-check-status") (:keywords "vc" "convenience"))]) (vc-auto-commit . [(20150330 103) nil "Auto-committing feature for your repository" tar ((:url . "http://github.com/thisirs/vc-auto-commit.git") (:keywords "vc" "convenience"))]) (vbasense . [(20140221 1553) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar ((:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion"))]) (vala-snippets . [(20150428 2052) ((yasnippet (0 8 0))) "Yasnippets for Vala" tar ((:url . "https://github.com/gopar/vala-snippets"))]) (vala-mode . [(20150324 1525) nil "Vala mode derived mode" single ((:keywords "vala" "languages" "oop"))]) (vagrant-tramp . [(20151018 1523) ((dash (2 12 0))) "Vagrant method for TRAMP" tar ((:url . "https://github.com/dougm/vagrant-tramp") (:keywords "vagrant"))]) (vagrant . [(20141125 1959) nil "Manage a vagrant box from emacs" single ((:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef"))]) (uzumaki . [(20150119 1706) ((cl-lib (0 5))) "A simple buffer cycler" single ((:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience"))]) (uuidgen . [(20140918 1601) nil "Provides various UUID generating functions" single ((:keywords "extensions" "lisp" "tools"))]) (uuid . [(20120910 151) nil "UUID's for EmacsLisp" single ((:keywords "lisp"))]) (utop . [(20150806 258) ((emacs (24))) "Universal toplevel for OCaml" single ((:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages"))]) (use-package-chords . [(20151001 1328) ((use-package (2 0)) (bind-key (1 0)) (bind-chord (0 1))) "key-chord keyword for use-package" single ((:url . "https://github.com/waymondo/use-package-chords") (:keywords "convenience" "tools" "extensions"))]) (use-package . [(20150926 846) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single ((:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package"))]) (usage-memo . [(20110722 851) nil "integration of Emacs help system and memo" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/usage-memo.el") (:keywords "convenience" "languages" "lisp" "help" "tools" "docs"))]) (urlenc . [(20140116 656) nil "URL encoding/decoding utility for Emacs." single ((:url . "https://github.com/buzztaiki/urlenc-el") (:keywords "url"))]) (url-shortener . [(20150805 2313) nil "shorten long url and expand tinyurl" single ((:url . "https://github.com/yuyang0/url-shortener"))]) (unkillable-scratch . [(20150327 2318) nil "Disallow buffers from being killed by regexp -- default is *scratch* buffer" single ((:keywords "scratch"))]) (unison-mode . [(20150104 414) nil "Syntax highlighting for unison file synchronization program" single ((:url . "https://github.com/impaktor/unison-mode") (:keywords "symchronization" "unison"))]) (unipoint . [(20140113 1424) nil "a simple way to insert unicode characters by TeX name" single ((:url . "https://github.com/apgwoz/unipoint"))]) (unify-opening . [(20150221 414) ((emacs (24 4))) "Make everything use the same mechanism to open files" single ((:url . "https://github.com/DamienCassou/unify-opening") (:keywords "dired" "org" "mu4e" "open" "runner" "extension" "file"))]) (unidecode . [(20140317 2118) ((cl-lib (0 4))) "Convert Unicode text into safe ASCII strings" tar nil]) (unicode-whitespace . [(20140508 1341) ((ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single ((:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface"))]) (unicode-troll-stopper . [(20151023 1831) nil "Minor mode for Highlighting Unicode homoglyphs" single ((:url . "https://github.com/camsaul/emacs-unicode-troll-stopper") (:keywords "unicode"))]) (unicode-progress-reporter . [(20140508 1341) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single ((:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface"))]) (unicode-input . [(20141218 2320) nil "Support for unicode character input" single ((:keywords "unicode" "input"))]) (unicode-fonts . [(20150826 1532) ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) "Configure Unicode fonts" single ((:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface"))]) (unicode-enbox . [(20140508 1341) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single ((:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface"))]) (unicode-emoticons . [(20150204 308) nil "Shortcuts for common unicode emoticons" single ((:url . "https://github.com/hagleitn/unicode-emoticons") (:keywords "games" "entertainment" "comms"))]) (unfill . [(20131103 213) nil "The inverse of fill-paragraph and fill-region" single ((:keywords "utilities"))]) (undohist . [(20150315 542) ((cl-lib (1 0))) "Persistent undo history for GNU Emacs" single ((:keywords "convenience"))]) (undo-tree . [(20140509 522) nil "Treat undo history as a tree" single ((:url . "http://www.dr-qubit.org/emacs.php") (:keywords "convenience" "files" "undo" "redo" "history" "tree"))]) (underwater-theme . [(20131117 1602) nil "A gentle, deep blue color theme" single ((:keywords "faces"))]) (undercover . [(20150817 1010) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs" single ((:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools"))]) (uncrustify-mode . [(20130707 659) nil "Minor mode to automatically uncrustify." single ((:keywords "uncrustify"))]) (unbound . [(20140307 128) nil "Find convenient unbound keystrokes" single ((:keywords "keyboard"))]) (ukrainian-holidays . [(20130720 649) nil "Ukrainian holidays for Emacs calendar." single ((:url . "https://github.com/abo-abo/ukrainian-holidays"))]) (ujelly-theme . [(20150807 2136) nil "Ujelly theme for GNU Emacs 24 (deftheme)" single ((:url . "http://github.com/marktran/color-theme-ujelly"))]) (uimage . [(20151012 604) nil "Url image minor mode." single ((:keywords "lisp" "url" "image"))]) (ucs-utils . [(20150826 714) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar ((:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions"))]) (ucs-cmds . [(20150508 1545) nil "Macro to create commands that insert Unicode chars." single ((:url . "http://www.emacswiki.org/ucs-cmds.el") (:keywords "unicode" "characters" "encoding" "commands" "ucs-names"))]) (ubuntu-theme . [(20150805 806) nil "A theme inspired by the default terminal colors in Ubuntu" single ((:url . "http://github.com/rocher/ubuntu-theme"))]) (typo . [(20150910 643) nil "Minor mode for typographic editing" single ((:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp"))]) (typing . [(20121026 1418) nil "The Typing Of Emacs" single ((:url . "http://www.emacswiki.org/emacs/TypingOfEmacs") (:keywords "games"))]) (typescript-mode . [(20150830 1828) nil "Major mode for editing typescript" single ((:url . "http://github.com/ananthakumaran/typescript.el") (:keywords "typescript" "languages"))]) (typed-clojure-mode . [(20151003 1122) ((clojure-mode (2 1 1)) (cider (0 10 0 -3))) "Typed Clojure minor mode for Emacs" tar ((:url . "https://github.com/typedclojure/typed-clojure-mode"))]) (twittering-mode . [(20150906 1003) nil "Major mode for Twitter" single ((:url . "http://twmode.sf.net/") (:keywords "twitter" "web"))]) (twilight-theme . [(20120412 603) nil "Twilight theme for GNU Emacs 24 (deftheme)" single nil]) (twilight-bright-theme . [(20130605 143) nil "A Emacs 24 faces port of the TextMate theme" single ((:url . "https://github.com/jimeh/twilight-bright-theme.el") (:keywords "themes"))]) (twilight-anti-bright-theme . [(20140810 34) nil "A soothing Emacs 24 light-on-dark theme" single ((:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes"))]) (twig-mode . [(20130220 1050) nil "A major mode for twig" single nil]) (turnip . [(20150308 2329) ((dash (2 6 0)) (s (1 9 0))) "Interacting with tmux from Emacs" single ((:keywords "terminals" "tools"))]) (tup-mode . [(20140410 914) nil "Major mode for editing files for Tup" single ((:url . "https://github.com/ejmr/tup-mode"))]) (tumblesocks . [(20140215 1247) ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) "An Emacs tumblr client." tar nil]) (tumble . [(20130327 1007) ((http-post-simple (0))) "an Tumblr mode for Emacs" single ((:keywords "tumblr"))]) (tuareg . [(20151002 1312) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar ((:url . "https://github.com/ocaml/tuareg") (:keywords "ocaml" "languages"))]) (ttrss . [(20130409 1049) ((emacs (23 1))) "Tiny Tiny RSS elisp bindings" single ((:url . "https://github.com/pedros/ttrss.el") (:keywords "news" "local"))]) (tt-mode . [(20130804 410) nil "Emacs major mode for editing Template Toolkit files." single nil]) (tss . [(20150913 708) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar ((:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion"))]) (try . [(20150608 211) ((emacs (24))) "Try out Emacs packages." single ((:url . "http://github.com/larstvei/try") (:keywords "packages"))]) (truthy . [(20140508 1341) ((list-utils (0 4 2))) "Test the content of a value" single ((:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions"))]) (tronesque-theme . [(20150125 241) nil "Color Theme based on Tron universe." single ((:url . "https://github.com/aurelienbottazini/tronesque"))]) (trident-mode . [(20130726 1207) ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) "Live Parenscript interaction" single ((:url . "https://github.com/johnmastro/trident-mode.el") (:keywords "languages" "lisp" "processes" "tools"))]) (tree-mode . [(20150226 1816) nil "A mode to manage tree widgets" single ((:keywords "help" "convenience" "widget"))]) (travis . [(20150825 438) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar ((:url . "https://github.com/nlamirault/emacs-travis") (:keywords "travis"))]) (transpose-mark . [(20150405 16) nil "Transpose data using the Emacs mark" single ((:keywords "transpose" "convenience"))]) (transpose-frame . [(20131221 742) nil "Transpose windows arrangement in a frame" single ((:keywords "window"))]) (transmission . [(20151027 857) ((emacs (24 4)) (let-alist (1 0 3))) "Interface to a Transmission session" single ((:keywords "comm" "tools"))]) (tramp-term . [(20141104 1345) nil "Automatic setup of directory tracking in ssh sessions." single ((:url . "https://github.com/randymorris/tramp-term.el") (:keywords "tramp" "ssh"))]) (tramp-hdfs . [(20150512 2110) nil "Tramp extension to access hadoop/hdfs file system in Emacs" single ((:keywords "tramp" "emacs" "hdfs" "hadoop" "webhdfs" "rest"))]) (tracwiki-mode . [(20150119 821) ((xml-rpc (1 6 8))) "Emacs Major mode for working with Trac" single ((:keywords "trac" "wiki" "tickets"))]) (tracking . [(20150724 1403) nil "Buffer modification tracking" tar ((:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking"))]) (traad-autocomplete . [(20140817 411) ((traad (0 1)) (auto-complete (1 4 0))) "auto-complete sources for traad" single ((:url . "https://github.com/abingham/traad"))]) (traad . [(20150106 615) ((deferred (0 3 2)) (popup (0 5 0)) (request (0 2 0)) (request-deferred (0 2 0)) (python-environment (0 0 2))) "emacs interface to the traad refactoring server." tar ((:url . "https://github.com/abingham/traad"))]) (toxi-theme . [(20130418 1239) ((emacs (24))) "A dark color theme by toxi" single ((:url . "http://hg.postspectacular.com/toxi-theme/"))]) (tox . [(20141004 1403) nil "Launch current python test with tox" single ((:url . "https://github.com/chmouel/tox.el") (:keywords "convenience" "tox" "python" "tests"))]) (totd . [(20150519 740) ((s (1 9 0)) (cl-lib (0 5))) "Display a random daily emacs command." single ((:keywords "help"))]) (tornado-template-mode . [(20141128 208) nil "A major mode for editing tornado templates" single nil]) (top-mode . [(20130605 1039) nil "run \"top\" from emacs" single ((:keywords "extensions" "processes"))]) (tool-bar+ . [(20150104 1702) nil "Extensions to standard library tool-bar.el" single ((:url . "http://www.emacswiki.org/tool-bar%2b.el") (:keywords "tool-bar" "convenience" "mouse" "button" "frame"))]) (tommyh-theme . [(20131004 1630) nil "A bright, bold-colored theme for emacs" single nil]) (toml-mode . [(20150818 120) nil "Mojor mode for editing TOML files" single ((:url . "https://github.com/dryman/toml-mode.el") (:keywords "data" "toml"))]) (toml . [(20130903 555) nil "TOML (Tom's Obvious, Minimal Language) parser" single ((:url . "https://github.com/gongo/emacs-toml") (:keywords "toml" "parser"))]) (tomatinho . [(20140120 1540) nil "Tomatinho" tar ((:keywords "time" "productivity" "pomodoro technique"))]) (toggle-window . [(20141207 748) nil "toggle current window size between half and full" single ((:url . "https://github.com/deadghost/toggle-window") (:keywords "hide" "window"))]) (toggle-test . [(20140722 2237) nil "Toggle between source and test files in various programming languages" single ((:url . "https://github.com/rags/toggle-test") (:keywords "tdd" "test" "toggle" "productivity"))]) (toggle-quotes . [(20140710 226) nil "Toggle between single and double quoted string" single ((:url . "https://github.com/toctan/toggle-quotes.el") (:keywords "convenience" "quotes"))]) (toggle . [(20140815 245) nil "quickly open corresponding file (eg test vs impl)." single ((:keywords "files" "extensions" "convenience"))]) (togetherly . [(20150820 138) ((cl-lib (0 3))) "allow multiple clients to edit a single buffer online" single ((:url . "http://hins11.yu-yake.com/"))]) (todotxt-mode . [(20150424 704) nil "Major mode for editing todo.txt files" single ((:keywords "wp" "files"))]) (todotxt . [(20150513 1929) nil "A major mode for editing todo.txt files" single ((:url . "https://github.com/rpdillon/todotxt.el") (:keywords "todo.txt" "todotxt" "todotxt.el"))]) (todochiku . [(20150112 1254) nil "A mode for interfacing with Growl, Snarl, and the like." single nil]) (toc-org . [(20150921 705) nil "add table of contents to org-mode files (formerly, org-toc)" single ((:url . "https://github.com/snosov1/toc-org") (:keywords "org-mode" "org-toc" "toc-org" "org" "toc" "table" "of" "contents"))]) (tmmofl . [(20121025 401) nil "Calls functions dependant on font lock highlighting at point" single ((:keywords "minor mode" "font lock" "toggling."))]) (tj-mode . [(20150826 851) ((emacs (24)) (tern (0 0 1)) (js2-mode (20150514))) "Highlight JavaScript with Tern" single ((:url . "https://github.com/katspaugh/tj-mode") (:keywords "languages" "javascript"))]) (tinysegmenter . [(20141124 213) ((cl-lib (0 5))) "Super compact Japanese tokenizer in Javascript ported to emacs lisp" single ((:url . "https://github.com/myuhe/tinysegmenter.el") (:keywords "convenience"))]) (tiny . [(20150324 1058) nil "Quickly generate linear ranges in Emacs" single ((:url . "https://github.com/abo-abo/tiny") (:keywords "convenience"))]) (tinkerer . [(20150219 2249) ((s (1 2 0))) "Elisp wrapper for Tinkerer Blogging Engine." single ((:url . "https://github.com/yyr/tinkerer.el") (:keywords "tinkerer" "blog" "wrapper"))]) (timesheet . [(20150831 733) ((s (1)) (org (7)) (auctex (11))) "Timesheet management add-on for org-mode" tar ((:url . "https://github.com/tmarble/timesheet.el") (:keywords "org" "timesheet"))]) (timer-revert . [(20150122 1232) nil "minor mode to revert buffer for a given time interval." tar nil]) (time-ext . [(20130130 1351) nil "more function for time/date" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/time-ext.el") (:keywords "lisp"))]) (tidy . [(20111222 956) nil "Interface to the HTML Tidy program" single ((:url . "http://www.emacswiki.org/elisp/tidy.el") (:keywords "languages"))]) (tide . [(20151015 1820) ((typescript-mode (0 1)) (emacs (24 1)) (flycheck (0 23)) (dash (2 10 0))) "Typescript Interactive Development Environment" tar nil]) (thumb-through . [(20120118 2134) nil "Plain text reader of HTML documents" single ((:keywords "html"))]) (thumb-frm . [(20150913 1146) ((frame-fns (0)) (frame-cmds (0))) "Commands for thumbnail frames." single ((:url . "http://www.emacswiki.org/thumb-frm.el") (:keywords "frame" "icon"))]) (thrift . [(20140312 1348) nil "Major mode for Apache Thrift files" single ((:keywords "files"))]) (thread-dump . [(20130323 1025) nil "Java thread dump viewer" single ((:url . "http://github.com/nd/thread-dump.el"))]) (thingopt . [(20150315 523) nil "Thing at Point optional utilities" single ((:keywords "convenience"))]) (thingatpt+ . [(20150823 1711) nil "Extensions to `thingatpt.el'." single ((:url . "http://www.emacswiki.org/thingatpt%2b.el") (:keywords "extensions" "matching" "mouse"))]) (thing-cmds . [(20150630 1432) ((hide-comnt (0))) "Commands that use things, as defined by `thingatpt.el'." single ((:url . "http://www.emacswiki.org/thing-cmds.el") (:keywords "thingatpt" "thing" "region" "selection"))]) (thesaurus . [(20121125 1137) nil "replace a word with a synonym looked up in a web service." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/thesaurus.el") (:keywords "thesaurus" "synonym"))]) (theme-looper . [(20150723 1104) ((cl-lib (0 5))) "Loop thru the available color-themes" single ((:url . "http://ismail.teamfluxion.com") (:keywords "convenience" "color-themes"))]) (theme-changer . [(20130725 1919) nil "Sunrise/Sunset Theme Changer for Emacs" single ((:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset"))]) (tfs . [(20120508 1120) nil "MS Team Foundation Server commands for Emacs." single ((:url . "http://cheeso.members.winisp.net/srcview.aspx?dir=emacs&file=tfs.el"))]) (textmate-to-yas . [(20150914 546) nil "Import Textmate macros into yasnippet syntax" tar ((:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate"))]) (textmate . [(20110816 1446) nil "TextMate minor mode for Emacs" single ((:keywords "textmate" "osx" "mac"))]) (textile-mode . [(20120721 1258) nil "Textile markup editing major mode" single nil]) (tex-smart-umlauts . [(20131210 2346) nil "Smart umlaut conversion for TeX." single ((:url . "http://hub.darcs.net/lyro/tex-smart-umlauts") (:keywords "tex" "wp"))]) (test-simple . [(20151025 1200) nil "Simple Unit Test Framework for Emacs Lisp" single ((:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test"))]) (test-case-mode . [(20130525 734) ((fringe-helper (0 1 1))) "unit test front-end" single ((:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools"))]) (terraform-mode . [(20151006 745) ((hcl-mode (0 1)) (cl-lib (0 5))) "Major mode for terraform configuration file" single ((:url . "https://github.com/syohex/emacs-terraform-mode"))]) (tern-django . [(20150121 1127) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar ((:url . "https://github.com/proofit404/tern-django"))]) (tern-auto-complete . [(20150611 639) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single nil]) (tern . [(20150830 1256) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single ((:url . "http://ternjs.net/"))]) (term-run . [(20150601 6) nil "Run arbitrary command in terminal buffer" single ((:url . "https://github.com/10sr/term-run-el") (:keywords "utility" "shell" "command" "term-mode"))]) (term-cmd . [(20141114 1314) nil "Send commands to Emacs from programs running under term.el" single ((:url . "https://github.com/CallumCameron/term-cmd") (:keywords "processes"))]) (term-alert . [(20141121 1205) ((term-cmd (1 0)) (alert (1 1))) "Get notifications when commands complete in the Emacs terminal emulator" single ((:url . "https://github.com/CallumCameron/term-alert") (:keywords "notifications" "processes"))]) (term+mux . [(20140210 2349) ((term+ (0 1)) (tab-group (0 1))) "term+ terminal multiplexer and session management" single ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation"))]) (term+key-intercept . [(20140210 2350) ((term+ (0 1)) (key-intercept (0 1))) "term+ intercept key mapping" single ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation"))]) (term+ . [(20130612 652) nil "term-mode enhancement" tar ((:url . "http://github.com/tarao/term+-el") (:keywords "terminal" "emulation"))]) (telephone-line . [(20150910 1004) ((emacs (24 3)) (cl-lib (0 5)) (memoize (1 0 1)) (s (1 9 0)) (seq (1 8))) "Rewrite of Powerline" tar ((:url . "https://github.com/dbordak/telephone-line") (:keywords "mode-line"))]) (telepathy . [(20131209 458) nil "Access Telepathy from Emacs" single ((:keywords "telepathy" "tools"))]) (tea-time . [(20120331 120) nil "Simple timer package, useful to make perfect tea." single ((:keywords "timer" "tea-time"))]) (tdd-status-mode-line . [(20131123 916) nil "TDD status on the mode-line" single ((:url . "https://github.com/algernon/tdd-status-mode-line") (:keywords "faces" "tdd"))]) (tco . [(20140412 612) ((dash (1 2 0)) (emacs (24))) "tail-call optimisation for Emacs lisp" single nil]) (tc . [(20150113 1926) nil "a Japanese input method with T-Code on Emacs" tar nil]) (tbx2org . [(20140224 759) ((dash (2 5 0)) (s (1 8 0)) (cl-lib (0 4))) "Tinderbox to org-mode conversion" single ((:url . "https://github.com/istib/tbx2org") (:keywords "org-mode"))]) (tao-theme . [(20151013 1043) nil "Tao, light & dark themes for Emacs with greyscale palettes generated from the golden mean." tar nil]) (tangotango-theme . [(20150702 104) nil "Tango Palette color theme for Emacs 24." single ((:url . "https://github.com/juba/color-theme-tangotango") (:keywords "tango" "palette" "color" "theme" "emacs"))]) (tango-plus-theme . [(20140425 1511) nil "A color theme based on the tango palette" single ((:url . "https://github.com/tmalsburg/tango-plus-theme"))]) (tango-2-theme . [(20120312 1325) nil "Tango 2 color theme for GNU Emacs 24" single nil]) (take-off . [(20140531 217) ((emacs (24 3)) (web-server (0 1 0))) "Emacs remote web access" tar ((:url . "https://github.com/tburette/take-off"))]) (tagedit . [(20150727 224) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single ((:keywords "convenience"))]) (tabulated-list . [(20120406 1351) nil "generic major mode for tabulated lists." single ((:keywords "extensions" "lisp"))]) (tabula-rasa . [(20141215 2147) ((emacs (24 4))) "Distraction free writing mode" single ((:url . "https://github.com/idomagal/Tabula-Rasa/blob/master/tabula-rasa.el") (:keywords "distraction free" "writing"))]) (tablist . [(20150618 2218) ((emacs (24 3))) "Extended tabulated-list-mode" tar ((:keywords "extensions" "lisp"))]) (table . [(20140721 2215) nil "create and edit WYSIWYG text based embedded tables" single ((:url . "http://table.sourceforge.net/") (:keywords "wp" "convenience"))]) (tabbar-ruler . [(20150914 1751) ((tabbar (2 0 1))) "Pretty tabbar, autohide, use both tabbar/ruler" tar ((:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar."))]) (tabbar . [(20141109 143) nil "Display a tab bar in the header line" tar ((:keywords "convenience"))]) (tab-jump-out . [(20151005 1830) ((dash (2 10)) (emacs (24 4))) "Use tab to jump out of delimiter pairs." single ((:keywords "tab" "editing"))]) (tab-group . [(20140306 650) nil "Grouped tabs and their tabbar" single ((:url . "http://github.com/tarao/tab-group-el") (:keywords "convenience" "tabs"))]) (ta . [(20150604 1024) ((emacs (24 3)) (cl-lib (0 5))) "A tool to deal with Chinese homophonic characters" single ((:url . "http://github.com/kuanyui/ta.el") (:keywords "tools"))]) (systemtap-mode . [(20121209 1510) nil "A mode for SystemTap" single ((:url . "https://github.com/ruediger/systemtap-mode") (:keywords "tools" "languages"))]) (systemd . [(20150928 609) ((emacs (24 4))) "Major mode for editing systemd units" tar ((:keywords "tools" "unix"))]) (system-specific-settings . [(20140818 757) nil "Apply settings only on certain systems" single ((:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration"))]) (syslog-mode . [(20140217 1618) ((hide-lines (20130623))) "Major-mode for viewing log files" single ((:url . "https://github.com/vapniks/syslog-mode") (:keywords "unix"))]) (syntax-subword . [(20150415 1226) nil "make operations on words more fine-grained" single nil]) (syntactic-sugar . [(20140508 1341) nil "Effect-free forms such as if/then/else" single ((:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions"))]) (synosaurus . [(20150203 239) ((cl-lib (0 5))) "An extensible thesaurus supporting lookup and substitution." tar ((:url . "https://github.com/rootzlevel/synosaurus"))]) (synonyms . [(20150919 2238) nil "Look up synonyms for a word or phrase in a thesaurus." single ((:url . "http://www.emacswiki.org/synonyms.el") (:keywords "text" "dictionary" "thesaurus" "spelling" "apropos" "help"))]) (synonymous . [(20150909 834) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "A thesaurus at your fingertips" single ((:url . "http://github.com/toroidal-code/synonymous.el") (:keywords "utility"))]) (sync-recentf . [(20151005 326) nil "Synchronize the recent files list between Emacs instances" single ((:url . "https://github.com/ffevotte/sync-recentf") (:keywords "recentf"))]) (symon-lingr . [(20150719 642) ((symon (1 1 2)) (cl-lib (0 5))) "A notification-based Lingr client powered by symon.el" single ((:url . "http://hins11.yu-yake.com/"))]) (symon . [(20150427 2302) nil "tiny graphical system monitor" single ((:url . "http://hins11.yu-yake.com/"))]) (sx . [(20151021 1614) ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" tar ((:url . "https://github.com/vermiculus/sx.el/") (:keywords "help" "hypermedia" "tools"))]) (sws-mode . [(20150317 1245) nil "(S)ignificant (W)hite(S)pace mode" single ((:url . "https://github.com/brianc/jade-mode"))]) (swoop . [(20140605 1410) ((ht (2 0)) (pcre2el (1 5)) (async (1 1)) (emacs (24))) "Peculiar buffer navigation for Emacs" tar ((:url . "https://github.com/ShingoFukuyama/swoop") (:keywords "swoop" "inner" "buffer" "search" "navigation"))]) (switch-window . [(20150114 215) nil "A *visual* way to choose a window to switch to" single ((:url . "http://tapoueh.org/emacs/switch-window.html") (:keywords "window" "navigation"))]) (swiper-helm . [(20150915 525) ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) "Helm version of Swiper." single ((:url . "https://github.com/abo-abo/swiper-helm") (:keywords "matching"))]) (swiper . [(20151023 512) ((emacs (24 1))) "Isearch with an overview. Oh, man!" tar ((:url . "https://github.com/abo-abo/swiper") (:keywords "matching"))]) (swift-mode . [(20151017 2320) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." single ((:keywords "languages" "swift"))]) (swbuff-x . [(20130607 314) ((swbuff (19991231 1800))) "Modifications to David Ponce's swbuff" single ((:url . "http://www.emacswiki.org/elisp/swbuff-x.el") (:keywords "files" "convenience"))]) (swbuff . [(20041012 718) nil "Quick switch between Emacs buffers." single ((:keywords "extensions" "convenience"))]) (swap-buffers . [(20150506 1439) nil "The quickest way to swap buffers between windows. Based on switch-window package." single ((:url . "https://github.com/ekazakov/swap-buffers") (:keywords "window" "swap" "buffer" "exchange"))]) (svg-mode-line-themes . [(20150425 1306) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar ((:url . "https://github.com/sabof/svg-mode-line-themes"))]) (supergenpass . [(20130328 2248) nil "SuperGenPass for Emacs" single ((:keywords "supergenpass"))]) (suomalainen-kalenteri . [(20140614 2350) nil "Finnish national and Christian holidays for calendar" tar nil]) (sunshine . [(20151013 614) ((cl-lib (0 5))) "Provide weather and forecast information." single ((:url . "https://github.com/aaronbieber/sunshine.el") (:keywords "tools" "weather"))]) (sunny-day-theme . [(20140413 1425) nil "Emacs24 theme with a light background." single ((:url . "http://github.com/mswift42/sunny-day-theme"))]) (summarye . [(20130328 327) nil "list up matched strings from a buffer, and display them in summary buffer" single nil]) (sudo-ext . [(20130130 1351) nil "sudo support" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sudo-ext.el") (:keywords "unix"))]) (sudden-death . [(20140829 538) nil "Totsuzen-no-Shi" single ((:url . "https://github.com/yewton/sudden-death.el"))]) (subshell-proc . [(20130122 1322) nil "Functions for working with comints" single ((:url . "https://github.com/andrewmains12/subshell-proc"))]) (subr+ . [(20150104 1655) nil "Extensions to standard library `subr.el'." single ((:url . "http://www.emacswiki.org/simple%2b.el") (:keywords "strings" "text"))]) (sublimity . [(20150918 1217) nil "smooth-scrolling, minimap and distraction-free mode" tar ((:url . "http://hins11.yu-yake.com/"))]) (sublime-themes . [(20150915 3) nil "A collection of themes based on Sublime Text" tar ((:keywords "faces"))]) (subemacs . [(20150830 854) nil "Evaluating expressions in a fresh Emacs subprocess" single ((:url . "https://github.com/kbauer/subemacs") (:keywords "extensions" "lisp" "multiprocessing"))]) (subatomic256-theme . [(20130620 1910) nil "Fork of subatomic-theme for terminals." single ((:url . "https://github.com/cryon/subatomic256"))]) (subatomic-theme . [(20150704 809) nil "Low contrast bluish color theme" single ((:url . "https://github.com/cryon/subatomic") (:keywords "color-theme" "blue" "low contrast"))]) (stylus-mode . [(20150313 812) ((sws-mode (0))) "Major mode for editing .jade files" single ((:url . "https://github.com/brianc/jade-mode"))]) (stupid-indent-mode . [(20130816 1354) nil "Plain stupid indentation minor mode" single nil]) (stumpwm-mode . [(20140130 1816) nil "special lisp mode for evaluating code into running stumpwm" single ((:keywords "comm" "lisp" "tools"))]) (stripe-buffer . [(20141208 708) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ((:url . "https://github.com/sabof/stripe-buffer"))]) (strings . [(20150805 1552) nil "Miscellaneous string functions." single ((:url . "http://www.emacswiki.org/strings.el") (:keywords "internal" "strings" "text"))]) (string-utils . [(20140508 1341) ((list-utils (0 4 2))) "String-manipulation utilities" single ((:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions"))]) (string-inflection . [(20150805 256) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single ((:keywords "elisp"))]) (string-edit . [(20150809 438) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single nil]) (strie . [(20140109 612) nil "A simple trie data structure implementation" single nil]) (stock-ticker . [(20150204 252) ((s (1 9 0)) (request (0 2 0))) "Show stock prices in mode line" single ((:url . "https://github.com/hagleitn/stock-ticker") (:keywords "comms"))]) (stickyfunc-enhance . [(20150429 1114) ((emacs (24 3))) "An enhancement to stock `semantic-stickyfunc-mode'" single ((:url . "https://github.com/tuhdo/semantic-stickyfunc-enhance") (:keywords "c" "languages" "tools"))]) (sticky . [(20101129 1852) nil "Sticky key for capital letters" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sticky.el") (:keywords "convenience"))]) (stgit . [(20140213 348) nil "major mode for StGit interaction" single ((:url . "http://www.procode.org/stgit"))]) (stem . [(20131102 409) nil "Routines for stemming" single ((:url . "https://github.com/yuutayamada/stem") (:keywords "stemming"))]) (stekene-theme . [(20141108 1211) ((emacs (24))) "Low-contrast (except for strings) theme, in light and dark versions." tar nil]) (state . [(20151025 1200) ((emacs (24))) "Quick navigation between workspaces" single ((:url . "https://github.com/thisirs/state.git") (:keywords "convenience" "workspaces"))]) (stash . [(20150201 1221) nil "lightweight persistent caching" single ((:url . "https://www.github.com/vermiculus/stash.el/") (:keywords "extensions" "data" "internal" "lisp"))]) (starter-kit-ruby . [(20120202 1132) ((inf-ruby (2 2 3)) (starter-kit (2 0 1))) "Saner defaults and goodies for Ruby" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-perl . [(20120202 1132) nil "Some helpful Perl code" single nil]) (starter-kit-lisp . [(20120504 1225) ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) "Saner defaults and goodies for lisp languages" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-js . [(20111009 2054) ((starter-kit (2 0 1))) "Saner defaults and goodies for Javascript" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-eshell . [(20121001 1714) nil "Saner defaults and goodies: eshell tweaks" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit-bindings . [(20120101 1955) ((starter-kit (2 0 2))) "Saner defaults and goodies: bindings" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/StarterKit") (:keywords "convenience"))]) (starter-kit . [(20130904 1547) ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 2)) (ido-ubiquitous (0 3)) (magit (0 8 1))) "Saner defaults and goodies." tar nil]) (standoff-mode . [(20150628 1642) nil "Create stand-off markup, also called external markup." tar nil]) (stan-snippets . [(20150728 2054) ((stan-mode (6 0 0)) (yasnippet (0 8 0))) "Yasnippets for Stan" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "snippets"))]) (stan-mode . [(20150829 2015) nil "Major mode for editing Stan files" tar ((:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges"))]) (stack-mode . [(20150923 823) ((haskell-mode (13 14)) (cl-lib (0 5)) (flycheck (0 23))) "A minor mode enabling various features based on stack-ide." tar ((:url . "https://github.com/commercialhaskell/stack-ide") (:keywords "haskell" "stack"))]) (ssh-tunnels . [(20141219 318) ((cl-lib (0 5)) (emacs (24))) "Manage SSH tunnels" single ((:url . "http://github.com/death/ssh-tunnels") (:keywords "tools" "convenience"))]) (ssh-config-mode . [(20141219 846) nil "Mode for fontification of ~/.ssh/config" single ((:url . "http://www.mahalito.net/~harley/elisp/ssh-config-mode.el") (:keywords "ssh" "config" "emacs"))]) (ssh-agency . [(20150929 747) ((emacs (24 4)) (dash (2 10 0))) "use ssh-agent on win32 from Emacs" single ((:url . "https://github.com/magit/ssh-agency"))]) (ssh . [(20120904 1342) nil "Support for remote logins using ssh." single ((:keywords "unix" "comm"))]) (srefactor . [(20150804 2254) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar ((:url . "https://github.com/tuhdo/semantic-refactor") (:keywords "c" "languages" "tools"))]) (sr-speedbar . [(20150804 951) nil "Same frame speedbar" single ((:url . "http://www.emacswiki.org/emacs/download/sr-speedbar.el") (:keywords "speedbar" "sr-speedbar.el"))]) (sqlup-mode . [(20151004 906) nil "Upcase SQL words for you" single ((:url . "https://github.com/trevoke/sqlup-mode.el") (:keywords "sql" "tools"))]) (sqlplus . [(20141009 739) nil "User friendly interface to SQL*Plus and support for PL/SQL compilation" single ((:keywords "sql" "sqlplus" "oracle" "plsql"))]) (sqlite . [(20150416 2215) nil "use sqlite via elisp" single nil]) (sql-indent . [(20150424 1716) nil "indentation of SQL statements" single ((:url . "https://github.com/bsvingen/sql-indent") (:keywords "languages"))]) (sprintly-mode . [(20121005 2234) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single ((:url . "https://github.com/sprintly/sprintly-mode"))]) (springboard . [(20150505 1011) ((helm (1 6 9))) "Temporarily change default-directory for one command" single ((:url . "https://github.com/jwiegley/springboard") (:keywords "helm"))]) (spray . [(20150625 2345) nil "a speed reading mode" single ((:url . "https://github.com/ian-kelling/spray") (:keywords "convenience"))]) (spotlight . [(20150929 55) ((emacs (24 1)) (swiper (0 6 0)) (counsel (0 6 0))) "search files with Mac OS X spotlight" single ((:url . "http://www.pragmaticemacs.com") (:keywords "search" "external"))]) (spotify . [(20150108 803) nil "Control the spotify application from emacs" single ((:url . "https://github.com/remvee/spotify-el") (:keywords "convenience"))]) (splitter . [(20130705 50) nil "Manage window splits" single ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience"))]) (splitjoin . [(20150505 732) ((cl-lib (0 5))) "Transition between multiline and single-line code" single ((:url . "https://github.com/syohex/emacs-splitjoin"))]) (sphinx-frontend . [(20131223 329) nil "Launch build process for rst documents via sphinx." single ((:url . "https://github.com/kostafey/sphinx-frontend") (:keywords "compile" "sphinx" "restructuredtext"))]) (sphinx-doc . [(20150616 1150) ((s (1 9 0)) (cl-lib (0 5)) (dash (2 10 0))) "Sphinx friendly docstrings for Python functions" single ((:url . "https://github.com/naiquevin/sphinx-doc.el") (:keywords "sphinx" "python"))]) (speed-type . [(20150120 2034) ((cl-lib (0 3))) "Practice touch and speed typing" single ((:url . "https://github.com/hagleitn/speed-type") (:keywords "games"))]) (speechd-el . [(20141025 912) nil "Client to speech synthesizers and Braille displays." tar nil]) (speech-tagger . [(20150902 2202) ((cl-lib (0 5))) "tag parts of speech using coreNLP" tar ((:url . "https://github.com/cosmicexplorer/speech-tagger") (:keywords "speech" "tag" "nlp" "language" "corenlp" "parsing" "natural"))]) (speck . [(20140901 1135) nil "minor mode for spell checking" single ((:keywords "spell" "checking"))]) (sparql-mode . [(20150825 329) ((cl-lib (0 5))) "Edit and interactively evaluate SPARQL queries." tar ((:url . "https://github.com/ljos/sparql-mode"))]) (sparkline . [(20150101 519) ((cl-lib (0 3))) "Make sparkline images from a list of numbers" single ((:keywords "extensions"))]) (spaces . [(20130610 49) nil "Create and switch between named window configurations." single ((:url . "https://github.com/chumpage/chumpy-windows") (:keywords "frames" "convenience"))]) (spacemacs-theme . [(20151017 409) nil "Color theme with a dark and light versions" tar ((:keywords "color" "theme") (:url . "https://github.com/nashamri/spacemacs-theme"))]) (spaceline . [(20151027 253) ((emacs (24)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar ((:url . "https://github.com/TheBB/spaceline") (:keywords "mode-line" "powerline" "spacemacs"))]) (spacegray-theme . [(20150719 1231) ((emacs (24 1))) "A Hyperminimal UI Theme" single ((:url . "http://github.com/bruce/emacs-spacegray-theme") (:keywords "themes"))]) (sourcetalk . [(20140823 739) ((request (0 2 0))) "SourceTalk (http://sourcetalk.net) plugin for Emacs" single ((:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion"))]) (sourcemap . [(20150418 700) ((cl-lib (0 5)) (emacs (24))) "Sourcemap parser" single ((:url . "https://github.com/syohex/emacs-sourcemap"))]) (sourcegraph . [(20150403 1927) ((emacs (24 3))) "Minor mode for srclib" single ((:url . "https://github.com/sourcegraph/emacs-sourcegraph-mode") (:keywords "sourcegraph"))]) (soundklaus . [(20150102 1321) ((dash (1 5 0)) (emacs (24)) (emms (3 0)) (deferred (0 3 2)) (s (1 6 0)) (pkg-info (0 4)) (cl-lib (0 5))) "Play SoundCloud music in Emacs via EMMS" single ((:url . "https://github.com/r0man/soundklaus.el") (:keywords "soundcloud" "music" "emms"))]) (soundcloud . [(20150501 2026) ((emms (20131016)) (json (1 2)) (deferred (0 3 1)) (string-utils (0 3 2)) (request (20140316 417)) (request-deferred (20130526 1015))) "a SoundCloud client for Emacs" single ((:keywords "soundcloud" "music" "audio"))]) (sound-wav . [(20140303 457) ((deferred (0 3 1)) (cl-lib (0 5))) "Play wav file" single ((:url . "https://github.com/syohex/emacs-sound-wav"))]) (sotlisp . [(20151014 508) ((emacs (24 1))) "Write lisp at the speed of thought." single ((:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp"))]) (sotclojure . [(20150914 1656) ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) "Write clojure at the speed of thought." single ((:url . "https://github.com/Malabarba/speed-of-thought-clojure") (:keywords "convenience" "clojure"))]) (sos . [(20141214 2003) ((org (7))) "StackOverflow Search" single ((:url . "https://github.com/omouse/emacs-sos") (:keywords "tools" "search" "questions"))]) (soothe-theme . [(20141027 741) ((emacs (24 1))) "a dark colorful theme for Emacs24." single ((:url . "https://github.com/jasonm23/emacs-soothe-theme"))]) (sonic-pi . [(20150919 330) ((cl-lib (0 5)) (osc (0 1)) (dash (2 2 0)) (emacs (24))) "A Emacs client for SonicPi" tar ((:url . "http://www.github.com/repl-electric/sonic-pi.el") (:keywords "sonicpi" "ruby"))]) (solidity-mode . [(20150423 714) nil "Major mode for ethereum's solidity language" single ((:keywords "languages"))]) (solarized-theme . [(20150916 504) ((cl-lib (0 5)) (dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar nil]) (soft-stone-theme . [(20140614 135) ((emacs (24))) "Emacs 24 theme with a light background." single ((:url . "http://github.com/mswift42/soft-stone-theme"))]) (soft-morning-theme . [(20150918 1341) nil "Emacs24 theme with a light background." single ((:url . "http://github.com/mswift42/soft-morning-theme"))]) (soft-charcoal-theme . [(20140420 943) nil "Dark charcoal theme with soft colors" single ((:url . "http://github.com/mswift42/soft-charcoal-theme"))]) (snippet . [(20130210 1515) nil "Insert snippets of text into a buffer" single nil]) (snapshot-timemachine . [(20150501 1100) ((emacs (24 4)) (cl-lib (0 5))) "Step through (Btrfs, ZFS, ...) snapshots of files" single ((:url . "https://github.com/mrBliss/snapshot-timemachine"))]) (snakemake-mode . [(20150610 1808) ((emacs (24))) "Major mode for editing Snakemake files" tar ((:url . "https://github.com/kyleam/snakemake-mode") (:keywords "tools"))]) (smyx-theme . [(20141127 28) nil "smyx Color Theme" single ((:keywords "color" "theme" "smyx"))]) (smtpmail-multi . [(20130921 2042) nil "Use different smtp servers for sending mail" single ((:url . "https://github.com/vapniks/smtpmail-multi") (:keywords "comm"))]) (smotitah . [(20150218 230) nil "Modular emacs configuration framework" tar nil]) (smooth-scrolling . [(20131219 2039) nil "Make emacs scroll smoothly" single ((:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience"))]) (smooth-scroll . [(20130321 2114) nil "Minor mode for smooth scrolling and in-place scrolling." single ((:url . "http://www.emacswiki.org/emacs/download/smooth-scroll.el") (:keywords "convenience" "emulations" "frames"))]) (sml-modeline . [(20120110 1240) nil "Show position in a scrollbar like way in mode-line" single ((:url . "http://bazaar.launchpad.net/~nxhtml/nxhtml/main/annotate/head%3A/util/sml-modeline.el"))]) (smex . [(20150822 1146) ((emacs (24))) "M-x interface with Ido-style fuzzy matching." single ((:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability"))]) (smeargle . [(20151013 2242) ((cl-lib (0 5)) (emacs (24))) "Highlighting region by last updated time" single ((:url . "https://github.com/syohex/emacs-smeargle"))]) (smarty-mode . [(20100703 458) nil "major mode for editing smarty templates" single ((:url . "none yet") (:keywords "smarty" "php" "languages" "templates"))]) (smartscan . [(20131230 739) nil "Jumps between other symbols found at point" single ((:keywords "extensions"))]) (smartrep . [(20150508 1930) nil "Support sequential operation which omitted prefix keys." single ((:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience"))]) (smartparens . [(20151025 833) ((cl-lib (0 3)) (dash (2 10 0))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar nil]) (smart-window . [(20130214 1142) nil "vim-like window controlling plugin" single ((:url . "https://github.com/dryman/smart-window.el") (:keywords "window"))]) (smart-tabs-mode . [(20140331 1629) nil "Intelligently indent with tabs, align with spaces!" single ((:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages"))]) (smart-tab . [(20150703 917) nil "Intelligent tab completion and indentation." single ((:url . "http://github.com/genehack/smart-tab/tree/master") (:keywords "extensions"))]) (smart-shift . [(20150202 2325) nil "Smart shift text left/right." single ((:url . "https://github.com/hbin/smart-shift") (:keywords "convenience" "tools"))]) (smart-region . [(20150903 703) ((emacs (24 4)) (expand-region (0 10 0)) (multiple-cursors (1 3 0)) (cl-lib (0 5))) "Smartly select region, rectangle, multi cursors" single ((:url . "https://github.com/uk-ar/smart-region") (:keywords "marking" "region"))]) (smart-operator . [(20051013 1056) nil "Beautify the operators in codes" single nil]) (smart-newline . [(20131207 1940) nil "Provide smart newline for one keybind." single nil]) (smart-mode-line-powerline-theme . [(20150426 910) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." single ((:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "themes"))]) (smart-mode-line . [(20150803 338) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar ((:url . "http://github.com/Malabarba/smart-mode-line") (:keywords "mode-line" "faces" "themes"))]) (smart-mark . [(20150911 1910) nil "Restore point after C-g when mark" single ((:keywords "mark" "restore"))]) (smart-indent-rigidly . [(20141205 1615) nil "Smart rigid indenting" single ((:url . "https://github.com/re5et/smart-indent-rigidly") (:keywords "indenting" "coffee-mode" "haml-mode" "sass-mode"))]) (smart-forward . [(20140430 13) ((expand-region (0 8 0))) "Semantic navigation" single ((:keywords "navigation"))]) (smart-cursor-color . [(20141124 919) nil "Change cursor color dynamically" single ((:url . "https://github.com/7696122/smart-cursor-color/") (:keywords "cursor" "color" "face"))]) (smart-compile . [(20150519 947) nil "an interface to `compile'" single ((:keywords "tools" "unix"))]) (sly-named-readtables . [(20150817 816) ((sly (1 0 0 -2 2))) "Support named readtables in Common Lisp files" tar ((:url . "https://github.com/capitaomorte/sly-named-readtables") (:keywords "languages" "lisp" "sly"))]) (sly-company . [(20141116 1417) ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) "sly completion backend for company mode" single ((:keywords "convenience" "lisp" "abbrev"))]) (sly . [(20150917 800) ((emacs (24 3))) "Sylvester the Cat's Common Lisp IDE" tar ((:url . "https://github.com/capitaomorte/sly") (:keywords "languages" "lisp" "sly"))]) (slovak-holidays . [(20150418 155) nil "Adds a list of slovak holidays to Emacs calendar" single ((:keywords "calendar"))]) (slime-volleyball . [(20140717 2141) nil "An SVG Slime Volleyball Game" tar ((:keywords "games"))]) (slime-theme . [(20141115 2302) ((emacs (24 0))) "an Emacs 24 theme based on Slime (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (slime-ritz . [(20130218 1537) nil "slime extensions for ritz" single ((:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime"))]) (slime-company . [(20150703 718) ((slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single ((:keywords "convenience" "lisp" "abbrev"))]) (slime-annot . [(20131230 1908) ((slime (0))) "cl-annot support for SLIME" single ((:url . "https://github.com/arielnetworks/cl-annot"))]) (slime . [(20151021 1304) ((cl-lib (0 5))) "Superior Lisp Interaction Mode for Emacs" tar ((:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime"))]) (slim-mode . [(20140611 950) nil "Major mode for editing Slim files" single ((:url . "http://github.com/slim-template/emacs-slim") (:keywords "markup" "language"))]) (slideview . [(20150324 1540) ((cl-lib (0 3))) "File slideshow" single ((:url . "https://github.com/mhayashi1120/Emacs-slideview") (:keywords "files"))]) (slamhound . [(20140506 1618) nil "Rip Clojure namespaces apart and rebuild them." single ((:url . "https://github.com/technomancy/slamhound") (:keywords "tools" "lisp"))]) (skype . [(20131001 2118) nil "skype UI for emacs users.." tar ((:keywords "skype" "chat"))]) (skewer-reload-stylesheets . [(20150111 423) ((skewer-mode (1 5 3))) "live-edit CSS stylesheets." tar nil]) (skewer-mode . [(20150914 1304) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar nil]) (skewer-less . [(20131015 622) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single ((:keywords "languages" "tools"))]) (skeletor . [(20150228 1557) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar nil]) (simplezen . [(20130421 300) ((s (1 4 0)) (dash (1 1 0))) "A simple subset of zencoding-mode for Emacs." single nil]) (simplenote2 . [(20150630 716) ((request-deferred (0 2 0))) "Interact with simple-note.appspot.com" single ((:keywords "simplenote"))]) (simplenote . [(20141118 640) nil "Interact with simple-note.appspot.com" single ((:keywords "simplenote"))]) (simpleclip . [(20150804 1010) nil "Simplified access to the system clipboard" single ((:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience"))]) (simple-screen . [(20141023 758) nil "Simple screen configuration manager" single ((:url . "https://github.com/wachikun/simple-screen") (:keywords "tools"))]) (simple-rtm . [(20140926 439) nil "Interactive Emacs mode for Remember The Milk" tar ((:keywords "remember" "the" "milk" "productivity" "todo"))]) (simple-mpc . [(20150802 206) nil "provides a simple interface to mpc" tar ((:keywords "multimedia" "mpd" "mpc"))]) (simple-httpd . [(20150430 1755) ((cl-lib (0 3))) "pure elisp HTTP server" single ((:url . "https://github.com/skeeto/emacs-http-server"))]) (simple-call-tree . [(20150806 1133) nil "analyze source code based on font-lock text-properties" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?CallTree") (:keywords "programming"))]) (simple-call-tree+ . [(20131009 712) nil "Extensions to simple-call-tree" single ((:url . "http://www.emacswiki.org/emacs/download/simple-call-tree+.el") (:keywords "programming"))]) (simple+ . [(20150616 1322) ((strings (0))) "Extensions to standard library `simple.el'." single ((:url . "http://www.emacswiki.org/simple%2b.el") (:keywords "internal" "lisp" "extensions" "abbrev"))]) (simp . [(20150427 932) nil "Simple project definition, chiefly for file finding, and grepping" tar ((:url . "https://github.com/re5et/simp") (:keywords "project" "grep" "find"))]) (signature . [(20140730 1249) nil "Signature Survey" tar nil]) (sicp . [(20121014 1314) nil "No description available." tar nil]) (shut-up . [(20150423 522) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single ((:url . "http://github.com/rejeep/shut-up.el"))]) (shrink-whitespace . [(20150916 1215) nil "Whitespace removal DWIM key" single ((:url . "https://github.com/jcpetkovich/shrink-whitespace.el") (:keywords "editing"))]) (shpec-mode . [(20150530 222) nil "Minor mode for shpec specification" single ((:url . "http://github.com/shpec/shpec-mode") (:keywords "languages" "tools"))]) (showtip . [(20080329 1959) nil "Show tip at cursor" single ((:keywords "help"))]) (showkey . [(20150527 848) nil "Show keys as you use them." single ((:url . "http://www.emacswiki.org/showkey.el") (:keywords "help" "keys" "mouse"))]) (show-marks . [(20130805 749) ((fm (1 0))) "Navigate and visualize the mark-ring" single ((:url . "https://github.com/vapniks/mark") (:keywords "convenience"))]) (show-css . [(20140816 1008) ((dom (1 0 1))) "Show the css of the html attribute the cursor is on" tar ((:url . "https://github.com/smmcg/showcss-mode") (:keywords "hypermedia"))]) (shoulda . [(20140616 1133) ((cl-lib (0 5))) "Shoulda test support for ruby" single ((:keywords "ruby" "tests" "shoulda"))]) (shm . [(20150526 124) nil "Structured Haskell Mode" tar ((:keywords "development" "haskell" "structured"))]) (shimbun . [(20120718 2038) nil "interfacing with web newspapers" tar ((:keywords "news"))]) (shift-text . [(20130831 955) ((cl-lib (1 0)) (es-lib (0 3))) "Move the region in 4 directions, in a way similar to Eclipse's" single ((:url . "https://github.com/sabof/shift-text"))]) (shelltest-mode . [(20141227 248) nil "Major mode for shelltestrunner" single ((:url . "https://github.com/rtrn/shelltest-mode") (:keywords "languages"))]) (shelldoc . [(20141230 534) ((cl-lib (0 3)) (s (1 9 0))) "shell command editing support with man page." single ((:url . "http://github.com/mhayashi1120/Emacs-shelldoc/raw/master/shelldoc.el") (:keywords "applications"))]) (shell-toggle . [(20150226 611) nil "Toggle to and from the shell buffer" single ((:url . "https://github.com/knu/shell-toggle.el") (:keywords "processes"))]) (shell-switcher . [(20151011 615) nil "Provide fast switching between shell buffers." tar nil]) (shell-split-string . [(20150202 2036) nil "Split strings using shell-like syntax" single ((:url . "https://github.com/10sr/shell-split-string-el") (:keywords "utility" "library" "shell" "string"))]) (shell-pop . [(20151013 626) ((emacs (24))) "helps you to use shell easily on Emacs. Only one key action to work." single ((:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools"))]) (shell-history . [(20100504 150) nil "integration with shell history" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/shell-history.el") (:keywords "processes" "convenience"))]) (shell-here . [(20150728 1004) nil "Open a shell relative to the working directory" single ((:keywords "unix" "tools" "processes"))]) (shell-current-directory . [(20140101 1554) nil "create new shell based on buffer directory" single ((:keywords "shell" "comint"))]) (shell-command . [(20090621 632) nil "enables tab-completion for `shell-command'" single ((:keywords "shell"))]) (shampoo . [(20131230 219) nil "A remote Smalltalk development mode" tar nil]) (shakespeare-mode . [(20150708 712) nil "A major mode for editing Shakespearean templates." single ((:url . "http://github.com/CodyReichert/shakespeare-mode") (:keywords "shakespeare" "hamlet" "lucius" "julius" "mode"))]) (shadow . [(20110507 24) nil "That's not the file. That's shadow." single ((:keywords "shadow.vim" "files" "processes"))]) (shader-mode . [(20150924 645) ((emacs (24))) "Major mode for shader" single ((:url . "https://github.com/midnightSuyama/shader-mode"))]) (shadchen . [(20141102 1039) nil "pattern matching for elisp" single nil]) (shackle . [(20150902 2333) ((cl-lib (0 5))) "Enforce rules for popups" single ((:url . "https://github.com/wasamasa/shackle") (:keywords "convenience"))]) (sexp-move . [(20150915 1030) nil "Improved S-Expression Movement" single ((:url . "https://gitlab.com/elzair/sexp-move") (:keywords "sexp"))]) (seti-theme . [(20150314 122) nil "A dark colored theme, inspired by Seti Atom Theme" single ((:url . "https://github.com/caisah/seti-theme") (:keywords "themes"))]) (session . [(20120510 1700) nil "use variables, registers and buffer places across sessions" single ((:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools"))]) (serverspec . [(20150623 455) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar ((:url . "http://101000lab.org"))]) (servant . [(20140216 419) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar ((:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server"))]) (sequential-command . [(20150407 1747) nil "Many commands into one command" tar ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/sequential-command.el") (:keywords "convenience" "lisp"))]) (sequences . [(20130908 1122) ((emacs (24))) "Ports of some Clojure sequence functions." single ((:keywords "convenience"))]) (seq . [(20151019 1553) nil "Sequence manipulation functions" single ((:keywords "sequences"))]) (seoul256-theme . [(20150714 1535) nil "No description available." single nil]) (sentence-navigation . [(20150914 2146) ((ample-regexps (0 1)) (emacs (24 4))) "Commands to navigate one-spaced sentences." single ((:url . "https://github.com/noctuid/emacs-sentence-navigation") (:keywords "sentence" "evil"))]) (sentence-highlight . [(20121026 750) nil "highlight the current sentence" single ((:keywords "plain text" "writing" "highlight" "editing" "focus"))]) (sensitive . [(20131015 635) ((emacs (24)) (sequences (0 1 0))) "A dead simple way to load sensitive information" single ((:keywords "convenience"))]) (semi . [(20150525 419) ((flim (1 14 9))) "A library to provide MIME features." tar nil]) (sekka . [(20150708 459) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) "A client for Sekka IME server" single ((:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese"))]) (seethru . [(20150218 1029) ((shadchen (1 4))) "Easily change Emacs' transparency" single ((:url . "http://github.com/benaiah/seethru") (:keywords "lisp" "tools" "alpha" "transparency"))]) (seeing-is-believing . [(20151010 1029) nil "minor mode for running the seeing-is-believing ruby gem" single nil]) (second-sel . [(20150104 1646) nil "Secondary selection commands" single ((:url . "http://www.emacswiki.org/second-sel.el") (:keywords "region" "selection" "yank" "paste" "edit"))]) (seclusion-mode . [(20121118 1553) nil "Edit in seclusion. A Dark Room mode." single ((:url . "http://github.com/dleslie/seclusion-mode"))]) (searchq . [(20150829 511) ((emacs (24 3))) "Framework of queued search tasks using GREP, ACK, AG and more." tar nil]) (search-web . [(20150312 403) nil "Post web search queries using `browse-url'." single nil]) (scss-mode . [(20150107 1400) nil "Major mode for editing SCSS files" single ((:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode"))]) (screenshot . [(20120509 405) nil "Take a screenshot in Emacs" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/screenshot.el") (:keywords "images" "hypermedia"))]) (scratches . [(20151005 2116) ((dash (2 11 0)) (f (0 17 0))) "Multiple scratches in any language" single ((:keywords "scratch"))]) (scratch-pop . [(20150820 139) ((popwin (0 7 0 -3))) "Generate, popup (& optionally backup) scratch buffer(s)." single ((:url . "http://hins11.yu-yake.com/"))]) (scratch-palette . [(20150225 42) ((popwin (0 7 0 -3))) "make scratch buffer for each files" single ((:url . "http://hins11.yu-yake.com/"))]) (scratch-log . [(20141114 2343) nil "Utility for *scratch* buffer." single nil]) (scratch-ext . [(20140103 2116) nil "Extensions for *scratch*" single ((:url . "https://github.com/kyanagi/scratch-ext-el"))]) (scratch . [(20120830 1028) nil "Mode-specific scratch buffers" tar ((:keywords "editing"))]) (scpaste . [(20110617 1156) ((htmlfontify (0 21))) "Paste to the web via scp." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/SCPaste") (:keywords "convenience" "hypermedia"))]) (sclang-snippets . [(20130513 51) ((yasnippet (0 8 0))) "Snippets for the SuperCollider Emacs mode" tar ((:keywords "snippets"))]) (sclang-extensions . [(20131117 1439) ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) "Extensions for the SuperCollider Emacs mode." tar ((:keywords "sclang" "supercollider" "languages" "tools"))]) (scion . [(20130315 555) nil "Haskell Minor Mode for Interacting with the Scion Library" single ((:url . "https://code.google.com/p/scion-lib/"))]) (scheme-here . [(20141028 18) nil "cmuscheme extension for multiple inferior processes" single ((:url . "https://github.com/kaihaosw/scheme-here") (:keywords "scheme"))]) (scheme-complete . [(20130220 403) nil "Smart tab completion for Scheme in Emacs" single nil]) (scf-mode . [(20111202 707) nil "shorten file-names in compilation type buffers" single ((:url . "https://github.com/lewang/scf-mode") (:keywords "compilation"))]) (scala-outline-popup . [(20150702 937) ((dash (2 9 0)) (popup (0 5 3)) (scala-mode2 (0 22)) (flx-ido (0 5))) "scala file summary popup" single ((:url . "https://github.com/ancane/scala-outline-popup.el") (:keywords "scala" "structure" "summary"))]) (scala-mode2 . [(20150617 2350) nil "Major mode for editing Scala >= 2.9" tar nil]) (scala-mode . [(20141205 1251) nil "Major mode for editing Scala code." tar ((:keywords "scala" "languages" "oop"))]) (scad-preview . [(20150818 624) ((scad-mode (91 0))) "Preview SCAD models in real-time within Emacs" single ((:url . "http://hins11.yu-yake.com/"))]) (scad-mode . [(20150330 2029) nil "A major mode for editing OpenSCAD code" single ((:url . "https://raw.github.com/openscad/openscad/master/contrib/scad-mode.el") (:keywords "languages"))]) (sbt-mode . [(20151014 42) ((scala-mode2 (0 22))) "Major mode for sbt >= 0.12 with scala >= 2.9" tar nil]) (savekill . [(20140417 1934) nil "Save kill ring to disk" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/savekill.el") (:keywords "tools"))]) (save-visited-files . [(20151021 1043) nil "save opened files across sessions" single ((:url . "http://github.com/nflath/save-visited-files"))]) (save-sexp . [(20150731 846) nil "save variables in files using setter forms like `setq'" tar ((:url . "https://github.com/tarsius/save-sexp") (:keywords "convenience"))]) (save-load-path . [(20131228 1152) nil "save load-path and reuse it to test" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/save-load-path.el") (:keywords "lisp"))]) (sauron . [(20150614 46) nil "Track (erc/org/dbus/...) events and react to them." tar nil]) (sass-mode . [(20150508 2012) ((haml-mode (3 0 15)) (cl-lib (0 5))) "Major mode for editing Sass files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css"))]) (sane-term . [(20150917 1602) ((emacs (24 1))) "Multi Term is crazy. This is not." single ((:url . "http://github.com/adamrt/sane-term"))]) (salt-mode . [(20150904 1113) ((yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 0 1))) "Major mode for Salt States" single ((:url . "https://github.com/beardedprojamz/salt-mode") (:keywords "languages"))]) (sage-shell-mode . [(20151020 609) ((cl-lib (0 5)) (deferred (0 3 1))) "A front-end for Sage Math" tar ((:url . "https://github.com/stakemori/sage-shell-mode") (:keywords "sage" "math"))]) (sackspace . [(20130719 256) nil "A better backspace" single ((:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience"))]) (s-buffer . [(20130605 1424) ((s (1 6 0)) (noflet (0 0 3))) "s operations for buffers" single ((:url . "http://github.com/nicferrier/emacs-s-buffer") (:keywords "lisp"))]) (s . [(20150924 406) nil "The long lost Emacs string manipulation library." single ((:keywords "strings"))]) (rvm . [(20150402 742) nil "Emacs integration for rvm" single ((:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm"))]) (rustfmt . [(20150831 1025) ((emacs (24))) "Format rust code using rustfmt" single ((:url . "https://github.com/fbergroth/emacs-rustfmt") (:keywords "convenience"))]) (rust-mode . [(20151023 826) nil "A major emacs mode for editing Rust source code" single ((:url . "https://github.com/rust-lang/rust-mode") (:keywords "languages"))]) (runtests . [(20150807 131) nil "Run unit tests from Emacs" single ((:url . "https://github.com/sunesimonsen/emacs-runtests") (:keywords "test"))]) (runner . [(20140106 758) nil "Improved \"open with\" suggestions for dired" single ((:url . "https://github.com/thamer/runner") (:keywords "shell command" "dired" "file extension" "open with"))]) (ruby-tools . [(20140113 45) nil "Collection of handy functions for ruby-mode." tar nil]) (ruby-test-mode . [(20140727 204) ((ruby-mode (1 0))) "Minor mode for Behaviour and Test Driven" single ((:keywords "ruby" "unit" "test" "rspec"))]) (ruby-refactor . [(20151026 1347) ((ruby-mode (1 2))) "A minor mode which presents various Ruby refactoring helpers." single ((:url . "https://github.com/ajvargo/ruby-refactor") (:keywords "refactor" "ruby"))]) (ruby-interpolation . [(20131112 852) nil "Ruby string interpolation helpers" single ((:url . "http://github.com/leoc/ruby-interpolation.el"))]) (ruby-hash-syntax . [(20141010 839) nil "Toggle ruby hash syntax between classic and 1.9 styles" single ((:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages"))]) (ruby-guard . [(20141218 1914) nil "Launching guard directly inside emacs." single ((:url . "https://github.com/cheunghy/ruby-guard") (:keywords "ruby" "guard" "rails"))]) (ruby-factory . [(20151011 823) ((inflections (1 1))) "Minor mode for Ruby test object generation libraries" tar ((:url . "http://github.com/sshaw/ruby-factory-mode") (:keywords "ruby" "rails" "convenience"))]) (ruby-end . [(20141215 423) nil "Automatic insertion of end blocks for Ruby" single ((:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby"))]) (ruby-electric . [(20150424 752) nil "Minor mode for electrically editing ruby code" single ((:url . "https://github.com/knu/ruby-electric.el") (:keywords "languages" "ruby"))]) (ruby-dev . [(20130811 151) nil "Interactive developement environment for Ruby." tar nil]) (ruby-compilation . [(20150708 2340) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single ((:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience"))]) (ruby-block . [(20131210 1931) nil "highlight matching block" single ((:keywords "languages" "faces" "ruby"))]) (ruby-additional . [(20150306 1759) ((emacs (24 3)) (ruby-mode (1 2))) "ruby-mode extensions yet to be merged into Emacs" tar ((:url . "http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/") (:keywords "ruby" "languages"))]) (rubocop . [(20150630 1003) ((dash (1 0 0)) (emacs (24))) "An Emacs interface for RuboCop" single ((:url . "https://github.com/bbatsov/rubocop-emacs") (:keywords "project" "convenience"))]) (rtags . [(20151027 1459) nil "A front-end for rtags" tar ((:url . "http://rtags.net"))]) (rspec-mode . [(20151003 315) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar ((:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby"))]) (rsense . [(20100510 2105) nil "RSense client for Emacs" single ((:keywords "convenience"))]) (rpn-calc . [(20150302 534) ((popup (0 4))) "quick RPN calculator for hackers" single ((:url . "http://hins11.yu-yake.com/"))]) (rpm-spec-mode . [(20150411 855) nil "RPM spec file editing commands for Emacs/XEmacs" single ((:keywords "unix" "languages"))]) (roy-mode . [(20121208 358) nil "Roy major mode" single ((:url . "https://github.com/folone/roy-mode") (:keywords "extensions"))]) (rotate . [(20140123 116) nil "Rotate the layout of emacs" single ((:url . "https://github.com/daic-h/emacs-rotate") (:keywords "window" "layout"))]) (rope-read-mode . [(20151021 52) nil "Rearrange lines to read text smoothly" single ((:url . "https://github.com/marcowahl/rope-read-mode") (:keywords "reading" "convenience" "chill"))]) (roguel-ike . [(20140227 729) ((popup (0 5 0))) "A coffee-break roguelike" tar nil]) (robe . [(20150927 2217) ((inf-ruby (2 3 0))) "Code navigation, documentation lookup and completion for Ruby" tar ((:url . "https://github.com/dgutov/robe") (:keywords "ruby" "convenience" "rails"))]) (rnc-mode . [(20121227 1502) nil "A major mode for editing RELAX NG Compact syntax." single nil]) (rings . [(20140102 1536) nil "Buffer rings. Like tabs, but better." single ((:url . "http://github.com/konr/rings") (:keywords "utilities" "productivity"))]) (rinari . [(20150708 2340) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single ((:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web"))]) (rigid-tabs . [(20150807 856) ((emacs (24 3))) "Rigidify and adjust the visual alignment of TABs" single ((:url . "https://github.com/wavexx/rigid-tabs.el") (:keywords "diff" "whitespace" "version control" "magit"))]) (rich-minority . [(20151014 438) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single ((:url . "https://github.com/Malabarba/rich-minority") (:keywords "mode-line" "faces"))]) (rhtml-mode . [(20130422 611) nil "major mode for editing RHTML files" tar nil]) (rfringe . [(20110405 820) nil "display the relative location of the region, in the fringe." single ((:url . "http://www.emacswiki.org/emacs/rfringe.el") (:keywords "fringe" "bitmap"))]) (revive . [(20150417 1555) nil "Resume Emacs" single nil]) (review-mode . [(20150110 612) nil "major mode for ReVIEW" single ((:url . "https://github.com/kmuto/review-el"))]) (reverse-theme . [(20141204 1745) nil "Reverse theme for Emacs" single ((:url . "https://github.com/syohex/emacs-reverse-theme"))]) (reveal-next . [(20150104 1643) nil "Progressively reveal text after the cursor." single ((:url . "http://www.emacswiki.org/reveal-next.el") (:keywords "hide" "show" "invisible" "learning"))]) (reveal-in-osx-finder . [(20150802 957) nil "Reveal file associated with buffer in OS X Finder" single ((:url . "https://github.com/kaz-yos/reveal-in-osx-finder") (:keywords "os x" "finder"))]) (restclient . [(20151023 754) nil "An interactive HTTP client for Emacs" single ((:keywords "http"))]) (restart-emacs . [(20151014 1122) nil "Restart emacs from within emacs" single ((:url . "https://github.com/iqbalansari/restart-emacs") (:keywords "convenience"))]) (requirejs-mode . [(20130215 1304) nil "Improved AMD module management" single ((:keywords "javascript" "amd" "requirejs"))]) (requirejs . [(20151020 951) ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) "Requirejs import manipulation and source traversal." single ((:url . "https://github.com/joeheyming/requirejs-emacs") (:keywords "javascript" "requirejs"))]) (request-deferred . [(20130526 1015) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single nil]) (request . [(20140316 417) nil "Compatible layer for URL request in Emacs" single nil]) (req-package . [(20151008 520) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) "A use-package wrapper for package runtime dependencies management" tar ((:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package"))]) (replace-from-region . [(20150406 1730) nil "Replace commands whose query is from region" single ((:url . "http://www.emacswiki.org/emacs/download/replace-from-region.el") (:keywords "replace" "search" "region"))]) (replace+ . [(20150723 633) nil "Extensions to `replace.el'." single ((:url . "http://www.emacswiki.org/replace%2b.el") (:keywords "matching" "help" "internal" "tools" "local"))]) (repl-toggle . [(20140501 531) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single ((:keywords "repl" "buffers" "toggle"))]) (repeatable-motion . [(20150629 1112) ((emacs (24))) "Make repeatable versions of motions" tar ((:url . "https://github.com/willghatch/emacs-repeatable-motion") (:keywords "motion" "repeatable"))]) (remark-mode . [(20151004 955) ((markdown-mode (2 0))) "Major mode for the remark slideshow tool" tar ((:keywords "remark" "slideshow" "markdown"))]) (relax . [(20131029 1434) ((json (1 2))) "For browsing and interacting with CouchDB" single ((:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http"))]) (relative-line-numbers . [(20151006 1446) ((emacs (24))) "Display relative line numbers on the margin" single ((:url . "https://github.com/Fanael/relative-line-numbers"))]) (relative-buffers . [(20150115 1101) ((cl-lib (0 5)) (dash (2 6 0)) (s (1 9 0)) (f (0 16 2))) "Emacs buffers naming convention" single ((:url . "https://github.com/proofit404/relative-buffers"))]) (register-channel . [(20150513 2059) nil "Jump around fast using registers" single ((:keywords "convenience"))]) (region-bindings-mode . [(20140407 1514) nil "Enable custom bindings when mark is active." single ((:url . "https://github.com/fgallina/region-bindings-mode") (:keywords "convenience"))]) (regex-tool . [(20131104 1434) nil "A regular expression evaluation tool for programmers" single ((:url . "http://www.newartisans.com/") (:keywords "regex" "languages" "programming" "development"))]) (regex-dsl . [(20100124 228) nil "lisp syntax for regexps" single nil]) (refheap . [(20140902 1402) ((json (1 2))) "A library for pasting to https://refheap.com" single ((:url . "https://github.com/Raynes/refheap.el"))]) (redshank . [(20120510 1230) nil "No description available." tar nil]) (redpen-paragraph . [(20150626 2225) ((emacs (24)) (cl-lib (0 5))) "RedPen interface." single ((:url . "https://github.com/karronoli/redpen-paragraph.el") (:keywords "document" "proofreading" "help"))]) (redo+ . [(20131117 351) nil "Redo/undo system for Emacs" single ((:keywords "lisp" "extensions"))]) (redis . [(20150531 1248) ((emacs (24)) (cl-lib (0 5))) "Redis integration" single ((:url . "https://github.com/emacs-pe/redis.el") (:keywords "convenience"))]) (recursive-narrow . [(20140902 1027) nil "narrow-to-region that operates recursively" single ((:url . "http://github.com/nflath/recursive-narrow"))]) (rectangle-utils . [(20150528 1228) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single ((:url . "https://github.com/thierryvolpiatto/rectangle-utils"))]) (rect+ . [(20150620 1744) nil "Extensions to rect.el" single ((:url . "https://github.com/mhayashi1120/Emacs-rectplus") (:keywords "extensions" "data" "tools"))]) (recover-buffers . [(20150812 5) nil "revisit all buffers from an auto-save file" tar nil]) (recompile-on-save . [(20140317 1333) ((dash (1 1 0))) "Trigger recompilation on file save." single ((:url . "https://github.com/maio/recompile-on-save.el") (:keywords "convenience" "files" "processes" "tools"))]) (recentf-ext . [(20130130 1350) nil "Recentf extensions" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/recentf-ext.el") (:keywords "convenience" "files"))]) (rebox2 . [(20121113 500) nil "Handling of comment boxes in various styles." single ((:url . "https://github.com/lewang/rebox2"))]) (realgud . [(20151025 1507) ((load-relative (1 0)) (list-utils (0 4 2)) (loc-changes (1 1)) (test-simple (1 0))) "A modular front-end for interacting with external debuggers" tar ((:url . "http://github.com/rocky/emacs-dbgr"))]) (real-auto-save . [(20150701 815) nil "Automatically save your all your buffers/files at regular intervals." single nil]) (readline-complete . [(20150708 737) nil "offers completions in shell mode" single nil]) (readability . [(20140715 1727) ((oauth (1 4)) (ov (1 0)) (emacs (24 3))) "Read articles from Readability in Emacs" single ((:url . "https://github.com/ShingoFukuyama/emacs-readability") (:keywords "readability" "oauth"))]) (react-snippets . [(20150213 1539) ((yasnippet (0 7 0))) "Yasnippets for React" tar nil]) (rdp . [(20120928 1854) nil "Recursive Descent Parser library" single ((:url . "https://github.com/skeeto/rdp"))]) (rdf-prefix . [(20151015 1115) nil "Prefix lookup for RDF" single ((:keywords "convenience" "abbrev"))]) (rcirc-styles . [(20150720 1831) ((cl-lib (0 5))) "support mIRC-style color and attribute codes" single nil]) (rcirc-notify . [(20150219 1404) nil "libnotify popups" single ((:keywords "lisp" "rcirc" "irc" "notify" "growl"))]) (rcirc-groups . [(20140622 214) nil "an emacs buffer in rcirc-groups major mode" single ((:url . "http://tapoueh.org/emacs/rcirc-groups.html") (:keywords "comm" "convenience"))]) (rcirc-controls . [(20141019 136) nil "control sequences" single nil]) (rcirc-color . [(20140131 656) nil "color nicks" single ((:keywords "comm"))]) (rcirc-alertify . [(20140406 1819) ((alert (20140406 1353))) "Cross platform notifications for rcirc" single ((:keywords "comm" "convenience"))]) (rcirc-alert . [(20141127 247) nil "Configurable alert messages on top of RCIRC" tar ((:keywords "lisp" "rcirc" "irc" "alert" "awesome"))]) (rbenv . [(20141119 2349) nil "Emacs integration for rbenv" single ((:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv"))]) (rase . [(20120928 1345) nil "Run At Sun Event daemon" single ((:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight"))]) (ranger . [(20151027 1230) ((emacs (24 4)) (cl-lib (0 5))) "Make dired more like ranger" single ((:url . "https://github.com/ralesi/ranger") (:keywords "files" "convenience"))]) (random-splash-image . [(20151002 1830) nil "Randomly sets splash image to *GNU Emacs* buffer on startup." single ((:url . "https://github.com/kakakaya/random-splash-image") (:keywords "games"))]) (rake . [(20150831 158) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) "Run rake commands" single ((:url . "https://github.com/asok/rake.el") (:keywords "rake" "ruby"))]) (rainbow-identifiers . [(20141102 726) ((emacs (24))) "Highlight identifiers according to their names" single ((:url . "https://github.com/Fanael/rainbow-identifiers"))]) (rainbow-delimiters . [(20150320 17) nil "Highlight brackets according to their depth" single ((:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools"))]) (rainbow-blocks . [(20140306 1033) nil "Block syntax highlighting for lisp code" single ((:url . "https://github.com/istib/rainbow-blocks"))]) (railscasts-theme . [(20150219 725) nil "Railscasts color theme for GNU Emacs." single ((:url . "https://github.com/mikenichols/railscasts-theme") (:keywords "railscasts" "color" "theme"))]) (rails-new . [(20141221 49) nil "Handy emacs command for generating rails application." single ((:url . "https://github.com/cheunghy/rails-new") (:keywords "rails" "ruby"))]) (rails-log-mode . [(20140407 2125) nil "Major mode for viewing Rails log files" single ((:keywords "rails" "log"))]) (railgun . [(20121016 2257) nil "No description available." single nil]) (racket-mode . [(20151027 2143) ((emacs (24 3)) (faceup (0 0 2)) (s (1 9 0))) "Major mode for Racket language." tar ((:url . "https://github.com/greghendershott/racket-mode"))]) (racer . [(20151016 1716) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0))) "Rust completion and code navigation via racer" single ((:url . "https://github.com/racer-rust/emacs-racer") (:keywords "abbrev" "convenience" "matching" "rust" "tools"))]) (r-autoyas . [(20140101 710) ((ess (0)) (yasnippet (0 8 0))) "Provides automatically created yasnippets for R function argument lists." tar ((:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet"))]) (quickrun . [(20151007 816) ((emacs (24)) (cl-lib (0 5))) "Run commands quickly" single ((:url . "https://github.com/syohex/emacs-quickrun"))]) (quickref . [(20130113 1500) ((dash (1 0 3)) (s (1 0 0))) "Display relevant notes-to-self in the echo area" single ((:url . "https://github.com/pd/quickref.el"))]) (quick-preview . [(20150828 2139) nil "quick preview using GNOME sushi, gloobus or quick look" single ((:url . "https://github.com/myuhe/quick-preview.el") (:keywords "files" "hypermedia"))]) (quick-buffer-switch . [(20151007 1508) nil "Quick switch to file or dir buffers." single ((:keywords "emacs" "configuration"))]) (quelpa-use-package . [(20150805 328) ((emacs (24 3)) (quelpa (0)) (use-package (2))) "quelpa handler for use-package" single ((:url . "https://github.com/quelpa/quelpa-use-package") (:keywords "package" "management" "elpa" "use-package"))]) (quelpa . [(20151004 1054) ((package-build (0)) (emacs (24 3))) "Emacs Lisp packages built directly from source" tar ((:url . "https://github.com/quelpa/quelpa") (:keywords "package" "management" "build" "source" "elpa"))]) (quasi-monochrome-theme . [(20150801 1325) nil "High contrast quasi monochrome color theme" single ((:url . "https://github.com/lbolla/emacs-quasi-monochrome") (:keywords "color-theme" "monochrome" "high contrast"))]) (quack . [(20130126 1623) nil "No description available." single nil]) (qml-mode . [(20130427 808) nil "Major mode for editing QT Declarative (QML) code." single ((:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative"))]) (qiita . [(20140118 44) ((helm (1 5 9)) (markdown-mode (2 0))) "Qiita API Library for emacs" single ((:url . "https://github.com/gongo/qiita-el") (:keywords "qiita"))]) (pyvenv . [(20150830 457) nil "Python virtual environment interface" single ((:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools"))]) (pythonic . [(20150730 216) ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single ((:url . "https://github.com/proofit404/pythonic"))]) (python3-info . [(20150903 225) nil "No description available." tar nil]) (python-x . [(20150828 352) ((python (0 24)) (folding (0))) "python.el extras for interactive evaluation" single ((:url . "https://github.com/wavexx/python-x.el") (:keywords "python" "eval" "folding"))]) (python-mode . [(20150909 2301) nil "Python major mode" tar nil]) (python-info . [(20141106 1351) nil "Python info manual for Emacs" tar nil]) (python-environment . [(20150310 153) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar ((:keywords "applications" "tools"))]) (python-docstring . [(20150907 1304) nil "Smart Python docstring formatting" tar nil]) (python-django . [(20150821 2104) nil "A Jazzy package for managing Django projects" single ((:url . "https://github.com/fgallina/python-django.el") (:keywords "languages"))]) (python-cell . [(20131029 1616) nil "Support for MATLAB-like cells in python mode" single ((:keywords "python" "matlab" "cell"))]) (pytest . [(20151027 1945) ((s (1 9 0))) "Easy Python test running in Emacs" single ((:url . "https://github.com/ionrock/pytest-el") (:keywords "pytest" "python" "testing"))]) (pylint . [(20150123 1600) nil "minor mode for running `pylint'" single ((:keywords "languages" "python"))]) (pyimpsort . [(20150927 1117) ((emacs (24 3))) "Sort python imports." tar ((:url . "https://github.com/emacs-pe/pyimpsort.el") (:keywords "convenience"))]) (pyfmt . [(20150521 1356) nil "Emacs interface to pyfmt" single ((:url . "https://github.com/aheaume/pyfmt.el") (:keywords "tools"))]) (pyenv-mode . [(20150929 1352) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single ((:url . "https://github.com/proofit404/pyenv-mode"))]) (pydoc-info . [(20110301 34) nil "Better Python support for info-lookup-symbol." tar nil]) (pydoc . [(20150525 1845) nil "functional, syntax highlighted pydoc navigation" single ((:url . "https://github.com/statmobile/pydoc") (:keywords "pydoc" "python"))]) (pycarddavel . [(20150831 516) ((helm (1 7 0)) (emacs (24 0))) "Integrate pycarddav" single ((:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts"))]) (py-yapf . [(20150422 753) nil "Use yapf to beautify a Python buffer" single ((:url . "https://github.com/paetzke/py-yapf.el"))]) (py-test . [(20141218 243) ((dash (2 9 0)) (f (0 17)) (emacs (24))) "A test runner for Python code." single ((:url . "https://github.com/Bogdanp/py-test.el") (:keywords "python" "testing" "py.test"))]) (py-smart-operator . [(20150824 1910) ((s (1 9 0))) "smart-operator for python-mode" single ((:keywords "python" "convenience" "smart-operator"))]) (py-isort . [(20150422 839) nil "Use isort to sort the imports in a Python buffer" single ((:url . "http://paetzke.me/project/py-isort.el"))]) (py-import-check . [(20130802 411) nil "Finds the unused python imports using importchecker" single ((:url . "https://github.com/psibi/emacs-py-import-check") (:keywords "python" "import" "check"))]) (py-gnitset . [(20140224 2010) nil "Run your Python tests any way you'd like" single ((:url . "https://www.github.com/quodlibetor/py-gnitset"))]) (py-autopep8 . [(20150420 421) nil "Use autopep8 to beautify a Python buffer" single ((:url . "http://paetzke.me/project/py-autopep8.el"))]) (px . [(20141006 548) nil "preview inline latex in any mode" single ((:url . "http://github.com/aaptel/preview-latex"))]) (pushbullet . [(20140809 532) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single ((:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience"))]) (purty-mode . [(20131004 1559) nil "Safely pretty-print greek letters, mathematical symbols, or anything else." single nil]) (purple-haze-theme . [(20141014 1929) ((emacs (24 0))) "an overtly purple color theme for Emacs24." single ((:url . "https://github.com/jasonm23/emacs-purple-haze-theme"))]) (purescript-mode . [(20150316 1828) nil "A PureScript editing mode" tar nil]) (puppetfile-mode . [(20131017 833) nil "Syntax highlighting for Puppetfiles" single nil]) (puppet-mode . [(20150730 1208) ((emacs (24 1)) (pkg-info (0 4))) "Major mode for Puppet manifests" single ((:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages"))]) (pungi . [(20150222 446) ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) "Integrates jedi with virtualenv and buildout python environments" single ((:keywords "convenience"))]) (punctuality-logger . [(20141120 1231) nil "Punctuality logger for Emacs" single ((:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar"))]) (puml-mode . [(20150926 530) nil "Major mode for PlantUML" single ((:keywords "uml" "plantuml" "ascii"))]) (pt . [(20151024 851) nil "A front-end for pt, The Platinum Searcher." single ((:url . "https://github.com/bling/pt.el") (:keywords "pt" "ack" "ag" "grep" "search"))]) (psvn . [(20150805 509) nil "Subversion interface for emacs" single nil]) (psession . [(20150618 2159) ((emacs (24)) (cl-lib (0 5))) "Persistent save of elisp objects." single ((:url . "https://github.com/thierryvolpiatto/psession"))]) (psci . [(20150328 1201) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) "Major mode for purescript repl psci" tar ((:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode"))]) (psc-ide . [(20151025 754) ((dash (2 11 0)) (company (0 8 7)) (cl-lib (0 5))) "Minor mode for PureScript's psc-ide tool." tar ((:url . "https://github.com/epost/psc-ide-emacs") (:keywords "languages"))]) (protobuf-mode . [(20150521 2011) nil "major mode for editing protocol buffers." single ((:keywords "google" "protobuf" "languages"))]) (prosjekt . [(20140822 453) ((dash (2 8 0))) "a software project tool for emacs" tar ((:url . "https://github.com/abingham/prosjekt"))]) (propfont-mixed . [(20150113 1411) ((emacs (24)) (cl-lib (0 5))) "Use proportional fonts with space-based indentation." single ((:url . "https://github.com/ikirill/propfont-mixed") (:keywords "faces"))]) (prop-menu . [(20150728 418) ((emacs (24 3)) (cl-lib (0 5))) "Create and display a context menu based on text and overlay properties" single ((:url . "https://github.com/david-christiansen/prop-menu-el") (:keywords "convenience"))]) (projmake-mode . [(20150619 1420) ((dash (20150611 922)) (indicators (20130217 1405))) "Project oriented automatic builder and error highlighter, flymake for projects" tar nil]) (projekt . [(20150324 148) ((emacs (24))) "some kind of staging for CVS" single nil]) (projector . [(20150921 838) ((alert (1 1)) (projectile (0 11 0))) "Lightweight library for managing project/repository-aware shell and command buffers" single ((:url . "https://github.com/waymondo/projector"))]) (projectile-speedbar . [(20150629 1153) ((projectile (0 11 0))) "projectile integration for speedbar" single ((:url . "https://github.com/anshulverma/projectile-speedbar") (:keywords "project" "convenience" "speedbar" "projectile"))]) (projectile-rails . [(20150914 341) ((projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single ((:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile"))]) (projectile-codesearch . [(20150418 2245) ((codesearch (20141019 625)) (projectile (20150405 126))) "Integration of codesearch into projectile" single ((:url . "https://github.com/abingham/codesearch.el") (:keywords "tools" "development" "search"))]) (projectile . [(20151024 943) ((dash (2 11 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience"))]) (project-root . [(20110206 1230) nil "Define a project root and take actions based upon it." single nil]) (project-persist-drawer . [(20150528 1354) ((project-persist (0 3))) "Use a project drawer with project-persist." tar nil]) (project-persist . [(20150519 1324) nil "A minor mode to allow loading and saving of project settings." tar nil]) (project-local-variables . [(20080502 952) nil "Set project-local variables from a file." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ProjectLocalVariables") (:keywords "project" "convenience"))]) (project-explorer . [(20150503 1714) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single ((:url . "https://github.com/sabof/project-explorer"))]) (programmer-dvorak . [(20150426 1837) nil "Input method for Programmer Dvorak." single ((:url . "https://github.com/yangchenyun/programmer-dvorak") (:keywords "dvorak" "programmer-dvorak" "input-method"))]) (prognth . [(20130920 1059) nil "Extend prog1 to arbitrary index" single ((:keywords "lisp"))]) (professional-theme . [(20150315 400) nil "Emacs port of Vim's professional theme" single ((:url . "https://github.com/juanjux/emacs-professional-theme") (:keywords "theme" "light" "professional"))]) (prodigy . [(20141109 252) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single ((:url . "http://github.com/rejeep/prodigy.el"))]) (processing-snippets . [(20140426 728) ((yasnippet (0 8 0))) "Snippets for processing-mode" tar nil]) (processing-mode . [(20150217 432) nil "Major mode for Processing 2.0" single ((:url . "https://github.com/ptrv/processing2-emacs") (:keywords "languages" "snippets"))]) (proc-net . [(20130321 1712) nil "network process tools" single ((:url . "http://github.com/nicferrier/emacs-procnet") (:keywords "processes"))]) (private . [(20150121 1757) ((aes (0 6))) "take care of your private configuration files." single ((:url . "https://github.com/cheunghy/private") (:keywords "private" "configuration" "backup" "recover"))]) (pretty-symbols . [(20140814 259) nil "Draw tokens as Unicode glyphs." single ((:url . "http://github.com/drothlis/pretty-symbols") (:keywords "faces"))]) (pretty-sha-path . [(20141105 1026) nil "Prettify Guix/Nix store paths" single ((:url . "https://gitorious.org/alezost-emacs/pretty-sha-path") (:keywords "faces" "convenience"))]) (pretty-mode . [(20141207 1152) nil "Redisplay parts of the buffer as pretty symbols." single ((:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols"))]) (pretty-lambdada . [(20150104 1641) nil "Show the word `lambda' as the Greek letter." single ((:url . "http://www.emacswiki.org/pretty-lambdada.el") (:keywords "convenience" "display"))]) (preseed-generic-mode . [(20150119 1241) nil "Debian preseed file major mode" single ((:url . "https://github.com/suntong001/preseed-generic-mode"))]) (preproc-font-lock . [(20141027 1332) nil "Highlight C-style preprocessor directives." single ((:url . "https://github.com/Lindydancer/preproc-font-lock") (:keywords "c" "languages" "faces"))]) (ppd-sr-speedbar . [(20150528 1358) ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 3))) "Sr Speedbar adaptor for project-persist-drawer." tar nil]) (pp-c-l . [(20150104 1639) nil "Display Control-l characters in a pretty way" single ((:url . "http://www.emacswiki.org/pp-c-l.el") (:keywords "display" "convenience" "faces"))]) (pp+ . [(20150418 828) nil "Extensions to `pp.el'." single ((:url . "http://www.emacswiki.org/pp%2b.el") (:keywords "lisp"))]) (powershell . [(20150428 1421) nil "No description available." single nil]) (powerline-evil . [(20140517 1) ((evil (1 0 8)) (powerline (2 3))) "Utilities for better Evil support for Powerline" tar ((:url . "http://github.com/raugturi/powerline-evil/") (:keywords "evil" "mode-line" "powerline"))]) (powerline . [(20151008 1449) ((cl-lib (0 2))) "Rewrite of Powerline" tar ((:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line"))]) (pow . [(20140420 106) ((emacs (24)) (cl-lib (0 5))) "pow (http://pow.cx/) manager for emacs" tar ((:url . "http://github.com/yukihr/emacs-pow") (:keywords "develop" "web" "pow"))]) (pos-tip . [(20150318 813) nil "Show tooltip at point" single ((:keywords "tooltip"))]) (portage-navi . [(20141208 555) ((concurrent (0 3 1)) (ctable (0 1 2))) "portage viewer" single ((:url . "https://github.com/kiwanami/emacs-portage-navi") (:keywords "tools" "gentoo"))]) (popwin . [(20150315 600) nil "Popup Window Manager." single ((:keywords "convenience"))]) (popup-switcher . [(20150331 708) ((cl-lib (0 3)) (popup (0 5 2))) "switch to other buffers and files via popup." single ((:url . "https://github.com/kostafey/popup-switcher") (:keywords "popup" "switch" "buffers" "functions"))]) (popup-kill-ring . [(20131020 1154) ((popup (0 4)) (pos-tip (0 4))) "interactively insert item from kill-ring" single ((:url . "https://github.com/waymondo/popup-kill-ring") (:keywords "popup" "kill-ring" "pos-tip"))]) (popup-complete . [(20141108 1908) ((popup (0 5 0))) "completion with popup" single ((:url . "https://github.com/syohex/emacs-popup-complete"))]) (popup . [(20150626 711) ((cl-lib (0 3))) "Visual Popup User Interface" single ((:keywords "lisp"))]) (poporg . [(20150603 1847) nil "Pop a comment or string to an empty buffer for text editing" single ((:url . "https://github.com/QBobWatson/poporg") (:keywords "outlines" "tools"))]) (pophint . [(20150930 1034) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar ((:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup"))]) (ponylang-mode . [(20150905 1346) ((dash (2 10 0))) "Language mode for Pony" single ((:url . "https://github.com/abingham/ponylang-mode.el") (:keywords "programming"))]) (pony-mode . [(20151028 302) nil "Minor mode for working with Django Projects" tar nil]) (pomodoro . [(20150716 1046) nil "A timer for the Pomodoro Technique" single nil]) (polymode . [(20151013 814) ((emacs (24))) "Versatile multiple modes with extensive literate programming support" tar ((:url . "https://github.com/vitoshka/polymode"))]) (pointback . [(20100210 752) nil "Restore window points when returning to buffers" single ((:keywords "convenience"))]) (point-undo . [(20100504 129) nil "undo/redo position" single nil]) (point-stack . [(20140102 1223) nil "A forward/back stack for point" single nil]) (pmdm . [(20150817 1202) nil "poor man's desktop-mode alternative." single ((:url . "https://bitbucket.com/inigoserna/pmdm.el"))]) (plsql . [(20121115 243) nil "Programming support for PL/SQL code" single ((:url . "http://www.emacswiki.org/elisp/plsql.el") (:keywords "languages"))]) (plsense-direx . [(20140520 1308) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single ((:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience"))]) (plsense . [(20151002 6) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single ((:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion"))]) (plim-mode . [(20140812 1713) nil "Major mode for editing Plim files" single ((:url . "http://github.com/dongweiming/plim-mode") (:keywords "markup" "language"))]) (plenv . [(20130706 2316) nil "A plenv wrapper for Emacs" single ((:keywords "emacs" "perl"))]) (plantuml-mode . [(20131031 1632) ((auto-complete (1 4))) "Major mode for plantuml" single ((:url . "https://github.com/wildsoul/plantuml-mode") (:keywords "uml" "ascii"))]) (planet-theme . [(20150627 751) ((emacs (24))) "A dark theme inspired by Gmail's 'Planets' theme of yore" single ((:url . "https://github.com/cmack/emacs-planet-theme") (:keywords "themes"))]) (plan9-theme . [(20150914 2127) nil "A color theme for Emacs based on Plan9" single ((:url . "https://github.com/john2x/plan9-theme.el"))]) (pkgbuild-mode . [(20151010 736) nil "Interface to the ArchLinux package manager" single nil]) (pkg-info . [(20150517 443) ((epl (0 8))) "Information about packages" single ((:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience"))]) (pixiv-novel-mode . [(20150109 2254) nil "Major mode for pixiv novel" single ((:keywords "novel" "pixiv"))]) (pixie-mode . [(20150121 2124) ((clojure-mode (3 0 1)) (inf-clojure (1 0 0))) "Major mode for Pixie-lang" single ((:url . "https://github.com/johnwalker/pixie-mode"))]) (pivotal-tracker . [(20150901 1221) nil "Interact with Pivotal Tracker through its API" single ((:url . "http://github.com/jxa/pivotal-tracker"))]) (pip-requirements . [(20150423 1358) ((dash (2 8 0))) "A major mode for editing pip requirements files." single nil]) (pinyin-search . [(20150719 1755) nil "Search Chinese by Pinyin" single ((:url . "https://github.com/xuchunyang/pinyin-search.el") (:keywords "chinese" "search"))]) (pinot . [(20140211 1226) nil "Emacs interface to pinot-search" tar nil]) (pinboard-api . [(20140324 448) nil "Rudimentary http://pinboard.in integration" single ((:url . "https://github.com/danieroux/pinboard-api-el") (:keywords "pinboard" "www"))]) (pillar . [(20141112 1011) ((makey (0 3))) "Major mode for editing Pillar files" tar ((:url . "http://github.com/DamienCassou/pillar-mode") (:keywords "markup" "major-mode"))]) (pig-snippets . [(20130912 2324) ((yasnippet (0 8 0))) "Snippets for pig-mode" tar nil]) (pig-mode . [(20140617 1058) nil "Major mode for Pig files" single nil]) (picolisp-mode . [(20150516 155) nil "Major mode for PicoLisp programming." single ((:url . "https://github.com/flexibeast/picolisp-mode") (:keywords "picolisp" "lisp" "programming"))]) (pianobar . [(20120128 1301) nil "thin wrapper for Pianobar, a Pandora Radio client" single ((:url . "http://github.com/agrif/pianobar.el"))]) (phpunit . [(20151009 254) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Launch PHP unit tests using phpunit" single ((:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit"))]) (phpcbf . [(20150302 528) ((s (1 9 0))) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" single ((:url . "https://github.com/nishimaki10/emacs-phpcbf") (:keywords "tools" "php"))]) (php-refactor-mode . [(20140920 1411) nil "Minor mode to quickly and safely perform common refactorings" single ((:url . "https://github.com/keelerm84/php-refactor-mode.el") (:keywords "php" "refactor"))]) (php-mode . [(20151002 2030) nil "Major mode for editing PHP code" tar ((:url . "https://github.com/ejmr/php-mode"))]) (php-eldoc . [(20140202 1141) nil "eldoc backend for php" tar ((:url . "https://github.com/sabof/php-eldoc"))]) (php-boris-minor-mode . [(20140209 1035) ((php-boris (0 0 1)) (highlight (0))) "a minor mode to evaluate PHP code in the Boris repl" single ((:url . "https://github.com/steckerhalter/php-boris-minor-mode") (:keywords "php" "repl" "eval"))]) (php-boris . [(20130527 121) nil "Run boris php REPL" single ((:keywords "php" "commint" "repl" "boris"))]) (php-auto-yasnippets . [(20141128 1411) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar ((:url . "https://github.com/ejmr/php-auto-yasnippets"))]) (php+-mode . [(20121129 1252) nil "A better PHP mode with Zend Framework 1 support." tar nil]) (phoenix-dark-pink-theme . [(20150406 2002) nil "Port of the Sublime Text 2 theme of the same name" single ((:url . "http://github.com/j0ni/phoenix-dark-pink"))]) (phoenix-dark-mono-theme . [(20130306 1215) nil "Monochromatic version of the Phoenix theme" single ((:url . "http://github.com/j0ni/phoenix-dark-mono"))]) (phi-search-migemo . [(20150116 506) ((phi-search (2 2 0)) (migemo (1 9 1))) "migemo extension for phi-search" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-search-mc . [(20150217 2255) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single ((:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors"))]) (phi-search-dired . [(20150405 14) ((phi-search (2 2 0))) "interactive filtering for dired powered by phi-search" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-search . [(20150807 112) nil "another incremental search & replace, compatible with \"multiple-cursors\"" tar ((:url . "http://hins11.yu-yake.com/"))]) (phi-rectangle . [(20141120 717) nil "another rectangle-mark command (rewrite of rect-mark)" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-grep . [(20150212 724) ((cl-lib (0 1))) "Interactively-editable recursive grep implementation in elisp" single ((:url . "http://hins11.yu-yake.com/"))]) (phi-autopair . [(20150527 223) ((paredit (20))) "another simple-minded autopair implementation" single ((:url . "http://hins11.yu-yake.com/"))]) (ph . [(20130312 1137) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar nil]) (pgdevenv . [(20150105 1436) nil "Manage your PostgreSQL development envs" tar ((:keywords "emacs" "postgresql" "development" "environment" "shell" "debug" "gdb"))]) (pg . [(20130731 1442) nil "Emacs Lisp interface to the PostgreSQL RDBMS" single ((:keywords "data" "comm" "database" "postgresql"))]) (perspective . [(20151016 1423) ((cl-lib (0 5))) "switch between named \"perspectives\" of the editor" single ((:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames"))]) (persp-projectile . [(20150405 127) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single ((:keywords "project" "convenience"))]) (persp-mode . [(20151017 618) nil "\"perspectives\" shared among frames + save/load - bugs." single ((:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience"))]) (persistent-soft . [(20150223 1053) ((pcache (0 3 1)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single ((:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions"))]) (persistent-scratch . [(20150202 943) ((emacs (24))) "Preserve the scratch buffer across Emacs sessions" single ((:url . "https://github.com/Fanael/persistent-scratch"))]) (perlbrew . [(20130127 324) nil "A perlbrew wrapper for Emacs" single ((:keywords "emacs" "perl"))]) (perl6-mode . [(20151014 1518) ((emacs (24 4)) (pkg-info (0 1))) "Major mode for editing Perl 6 code" tar ((:url . "https://github.com/hinrik/perl6-mode") (:keywords "languages"))]) (perl-completion . [(20090527 2336) nil "No description available." single nil]) (per-buffer-theme . [(20151013 1012) ((cl-lib (0 5))) "Change theme according to buffer name or major mode." single ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes"))]) (peg . [(20150707 2341) nil "Parsing Expression Grammars in Emacs Lisp" single nil]) (peep-dired . [(20150518 700) nil "Peep at files in another window from dired buffers" single ((:keywords "files" "convenience"))]) (peek-mode . [(20130620 1246) ((elnode (0 9 8 1))) "Serve buffers live over HTTP with elnode backend" tar ((:url . "https://github.com/erikriverson/peek-mode"))]) (peacock-theme . [(20141115 2302) ((emacs (24 0))) "an Emacs 24 theme based on Peacock (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (pdf-tools . [(20150716 643) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar ((:keywords "files" "multimedia"))]) (pdb-mode . [(20150128 951) nil "Major mode for editing Protein Data Bank files" single ((:url . "http://bondxray.org/software/pdb-mode/") (:keywords "data" "pdb"))]) (pcsv . [(20150220 331) nil "Parser of csv" single ((:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data"))]) (pcre2el . [(20151006 2216) ((cl-lib (0 3))) "parse, convert, and font-lock PCRE, Emacs and rx regexps" single ((:url . "https://github.com/joddie/pcre2el"))]) (pcomplete-extension . [(20140604 947) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single ((:url . "https://github.com/thierryvolpiatto/pcomplete-extension"))]) (pcmpl-pip . [(20141024 148) nil "pcomplete for pip" single ((:keywords "pcomplete" "pip" "python" "tools"))]) (pcmpl-homebrew . [(20150506 1852) nil "pcomplete for homebrew" single ((:keywords "pcomplete" "homebrew" "tools"))]) (pcmpl-git . [(20140218 1804) nil "pcomplete for git" tar ((:keywords "tools"))]) (pcmpl-args . [(20120911 2224) nil "Enhanced shell command completion" single ((:url . "https://github.com/JonWaltman/pcmpl-args.el") (:keywords "abbrev" "completion" "convenience" "processes" "terminals" "unix"))]) (pcache . [(20150125 1653) ((eieio (1 3))) "persistent caching for Emacs" single nil]) (pc-bufsw . [(20150923 13) nil "PC style quick buffer switcher" single ((:url . "https://github.com/ibukanov/pc-bufsw") (:keywords "buffer"))]) (pbcopy . [(20150224 2059) nil "Emacs Interface to pbcopy" single ((:url . "https://github.com/jkp/pbcopy.el") (:keywords "mac" "osx" "pbcopy"))]) (paxedit . [(20150405 1608) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single ((:url . "https://github.com/promethial/paxedit") (:keywords "lisp" "refactoring" "context"))]) (path-headerline-mode . [(20140423 632) nil "Displaying file path on headerline." single ((:url . "https://github.com/7696122/path-headerline-mode") (:keywords "headerline"))]) (pastels-on-dark-theme . [(20120304 1022) nil "Pastels on Dark theme for Emacs 24" single ((:url . "http://gist.github.com/1906662") (:keywords "theme" "color"))]) (pastehub . [(20140614 2320) nil "A client for the PasteHub cloud service" single ((:url . "https://github.com/kiyoka/pastehub"))]) (pastebin . [(20101125 1155) nil "A simple interface to the www.pastebin.com webservice" single nil]) (password-vault . [(20131105 1703) ((cl-lib (0 2)) (emacs (24))) "A Password manager for Emacs." single ((:url . "http://github.com/PuercoPop/password-vault.el") (:keywords "password" "productivity"))]) (password-store . [(20151027 1449) ((f (0 11 0)) (s (1 9 0))) "Password store (pass) support" single ((:keywords "pass"))]) (password-generator . [(20150222 1240) nil "Password generator for humans. Good, Bad, Phonetic passwords included." single ((:url . "http://github.com/zargener/emacs-password-genarator"))]) (passthword . [(20141201 123) ((cl-lib (0 5))) "Simple password manager" single nil]) (pass . [(20150902 2347) ((emacs (24)) (password-store (0 1)) (f (0 17))) "Major mode for password-store.el" single ((:keywords "password-store" "password" "keychain"))]) (parsebib . [(20151006 232) ((emacs (24 3))) "A library for parsing bib files" single ((:keywords "text" "bibtex"))]) (parse-csv . [(20140203 116) nil "Parse strings with CSV fields into s-expressions" single ((:url . "https://github.com/mrc/el-csv") (:keywords "csv"))]) (parent-mode . [(20150824 1600) nil "get major mode's parent modes" single ((:url . "https://github.com/Fanael/parent-mode"))]) (parenface . [(20141125 828) nil "Provide a face for parens in lispy modes." tar nil]) (paren-face . [(20150815 836) nil "a face for parentheses in lisp modes" single ((:url . "http://github.com/tarsius/paren-face"))]) (paren-completer . [(20150711 1523) ((emacs (24 3))) "Automatically, language agnostically, fill in delimiters." single ((:url . "https://github.com/MatthewBregg/paren-completer") (:keywords "convenience"))]) (paredit-menu . [(20130923 1254) nil "Adds a menu to paredit.el as memory aid" single ((:keywords "paredit"))]) (paredit-everywhere . [(20150821 2144) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single ((:keywords "languages" "convenience"))]) (paredit . [(20150217 713) nil "minor mode for editing parentheses" single ((:keywords "lisp"))]) (paradox . [(20151017 1457) ((emacs (24 4)) (seq (1 7)) (cl-lib (0 5)) (json (1 3)) (let-alist (1 0 3)) (spinner (1 4)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar ((:url . "https://github.com/Malabarba/paradox") (:keywords "package" "packages"))]) (paper-theme . [(20151025 800) ((emacs (24)) (hexrgb (0))) "A minimal Emacs colour theme." single ((:url . "http://gkayaalp.com/emacs.html#paper") (:keywords "theme" "paper"))]) (pangu-spacing . [(20150927 24) nil "Minor-mode to add space between Chinese and English characters." single ((:url . "http://github.com/coldnew/pangu-spacing"))]) (pandoc-mode . [(20151002 1051) ((hydra (0 10 0)) (dash (2 10 0))) "Minor mode for interacting with Pandoc" tar ((:keywords "text" "pandoc"))]) (pallet . [(20150512 2) ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar nil]) (palimpsest . [(20130731 821) nil "Various deletion strategies when editing" single nil]) (palette . [(20150509 1407) ((hexrgb (0))) "Color palette useful with RGB, HSV, and color names" single ((:url . "http://www.emacswiki.org/palette.el") (:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame"))]) (pager-default-keybindings . [(20130719 1357) ((pager (1 0))) "Add the default keybindings suggested for pager.el" single ((:url . "http://github.com/nflath/pager-default-keybindings"))]) (pager . [(20100330 1131) nil "windows-scroll commands" single nil]) (page-break-lines . [(20150226 817) nil "Display ugly ^L page breaks as tidy horizontal lines" single ((:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces"))]) (pacmacs . [(20151026 1135) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5)) (f (0 18 0))) "Pacman for Emacs" tar ((:url . "http://github.com/rexim/pacmacs.el"))]) (packed . [(20150723 438) ((emacs (24 3)) (dash (2 10 0))) "package manager agnostic Emacs Lisp package utilities" single ((:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library"))]) (package-utils . [(20150126 406) ((epl (0 7 -3))) "Extensions for package.el" single ((:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience"))]) (package-safe-delete . [(20150116 807) ((emacs (24)) (epl (0 7 -3))) "Safely delete package.el packages" single ((:url . "https://github.com/Fanael/package-safe-delete"))]) (package-filter . [(20140105 1426) nil "special handling for package.el" single ((:url . "https://github.com/milkypostman/package-filter"))]) (package-build . [(20151010 2251) ((cl-lib (0 5))) "Tools for assembling a package archive" single ((:keywords "tools"))]) (package+ . [(20150319 1455) nil "Extensions for the package library." single ((:url . "TBA") (:keywords "extensions" "tools"))]) (pabbrev . [(20150806 445) nil "Predictive abbreviation expansion" single nil]) (p4 . [(20150721 1237) nil "Simple Perforce-Emacs Integration" single ((:url . "https://github.com/gareth-rees/p4.el"))]) (ox-twiki . [(20140120 2239) ((org (8))) "org Twiki and Foswiki export" single ((:url . "https://github.com/dfeich/org8-wikiexporters") (:keywords "org"))]) (ox-twbs . [(20151025 1048) nil "Bootstrap compatible HTML Back-End for Org" single ((:url . "https://github.com/marsmining/ox-twbs") (:keywords "org" "html" "publish" "twitter" "bootstrap"))]) (ox-trac . [(20151027 740) nil "Org Export Backend to Trac WikiFormat" single ((:url . "https://github.com/JalapenoGremlin/ox-trac") (:keywords "org-mode" "trac"))]) (ox-tiddly . [(20131124 804) ((org (8))) "org TiddlyWiki exporter" single ((:url . "https://github.com/dfeich/org8-wikiexporters") (:keywords "org"))]) (ox-textile . [(20140215 607) ((org (8 1))) "Textile Back-End for Org Export Engine" single ((:url . "https://github.com/yashi/org-textile") (:keywords "org" "textile"))]) (ox-rst . [(20151018 205) ((emacs (24 4)) (org (8 2 4))) "Export reStructuredText using org-mode." single ((:url . "https://github.com/masayuko/ox-rst") (:keywords "org" "rst" "rest" "restructuredtext"))]) (ox-reveal . [(20151022 2306) ((org (20150330))) "reveal.js Presentation Back-End for Org Export Engine" single ((:keywords "outlines" "hypermedia" "slideshow" "presentation"))]) (ox-pukiwiki . [(20150124 916) ((org (8 1))) "Pukiwiki Back-End for Org Export Engine" single ((:url . "https://github.com/yashi/org-pukiwiki") (:keywords "org" "pukiwiki"))]) (ox-pandoc . [(20150706 1809) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) "org exporter for pandoc." single ((:url . "https://github.com/kawabata/ox-pandoc") (:keywords "tools"))]) (ox-nikola . [(20150901 1507) ((emacs (24 4)) (org (8 2 4)) (ox-rst (0 2))) "Export Nikola articles using org-mode." single ((:url . "https://github.com/masayuko/ox-nikola") (:keywords "org" "nikola"))]) (ox-mediawiki . [(20150923 902) ((cl-lib (0 5)) (s (1 9 0))) "Mediawiki Back-End for Org Export Engine" single ((:url . "https://github.com/tomalexander/orgmode-mediawiki") (:keywords "org" "wp" "mediawiki"))]) (ox-ioslide . [(20151018 2152) ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2)) (makey (0 3))) "Export org-mode to Google I/O HTML5 slide." tar ((:url . "http://github.com/coldnew/org-ioslide") (:keywords "html" "presentation"))]) (ox-impress-js . [(20150412 1016) ((org (8))) "impress.js Back-End for Org Export Engine" tar ((:url . "https://github.com/kinjo/org-impress-js.el") (:keywords "outlines" "hypermedia" "calendar" "wp"))]) (ox-html5slide . [(20131227 2206) ((org (8 0))) "Export org-mode to HTML5 slide." single ((:url . "http://github.com/coldnew/org-html5slide") (:keywords "html" "presentation"))]) (ox-gfm . [(20150604 26) nil "Github Flavored Markdown Back-End for Org Export Engine" single ((:keywords "org" "wp" "markdown" "github"))]) (ox-asciidoc . [(20150919 1259) ((org (8 1))) "AsciiDoc Back-End for Org Export Engine" single ((:url . "https://github.com/yashi/org-asciidoc") (:keywords "org" "asciidoc"))]) (owdriver . [(20141011 738) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single ((:url . "https://github.com/aki2o/owdriver") (:keywords "convenience"))]) (overseer . [(20150801 1002) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) "Ert-runner Integration Into Emacs" single ((:url . "http://www.github.com/tonini/overseer.el"))]) (ov . [(20150311 2228) ((emacs (24 3))) "Overlay library for Emacs Lisp" single ((:url . "https://github.com/ShingoFukuyama/ov.el") (:keywords "overlay"))]) (outshine . [(20150910 1226) ((outorg (2 0))) "outline with outshine outshines outline" single ((:url . "https://github.com/tj64/outshine"))]) (outorg . [(20150910 1240) nil "Org-style comment editing" single ((:url . "https://github.com/tj64/outorg"))]) (outlined-elisp-mode . [(20131108 327) nil "outline-minor-mode settings for emacs lisp" single ((:url . "http://hins11.yu-yake.com/"))]) (outline-magic . [(20150209 1426) nil "outline mode extensions for Emacs" single ((:keywords "outlines"))]) (otter-mode . [(20121202 903) nil "Major mode for source files of the Otter automated theorem prover" single ((:url . "https://github.com/scvalex/script-fu/blob/master/otter-mode.el"))]) (osx-trash . [(20150723 735) ((emacs (24 1))) "System trash for OS X" tar ((:url . "https://github.com/lunaryorn/osx-trash.el") (:keywords "files" "convenience" "tools" "unix"))]) (osx-pseudo-daemon . [(20131026 1730) nil "Daemon mode that plays nice with OSX." single ((:url . "https://github.com/DarwinAwardWinner/osx-pseudo-daemon") (:keywords "convenience" "osx"))]) (osx-plist . [(20101130 448) nil "Apple plist file parser" single ((:keywords "convenience"))]) (osx-org-clock-menubar . [(20150205 1311) nil "simple menubar integration for org-clock" tar ((:url . "https://github.com/jordonbiondo/osx-org-clock-menubar") (:keywords "org" "osx"))]) (osx-location . [(20150613 217) nil "Watch and respond to changes in geographical location on OS X" tar nil]) (osx-lib . [(20150626 1639) nil "Basic function for Apple/OSX." single ((:keywords "apple" "applescript" "osx" "finder" "emacs" "elisp" "vpn" "speech"))]) (osx-dictionary . [(20151015 419) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar ((:url . "https://github.com/xuchunyang/osx-dictionary.el") (:keywords "mac" "dictionary"))]) (osx-clipboard . [(20141012 17) nil "Use the OS X clipboard from terminal Emacs" single ((:url . "https://github.com/joddie/osx-clipboard-mode"))]) (osx-browse . [(20140508 1341) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single ((:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external"))]) (origami . [(20150822 450) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "Flexible text folding" tar ((:url . "https://github.com/gregsexton/origami.el") (:keywords "folding"))]) (orgtbl-show-header . [(20141023 137) nil "Show the header of the current column in the minibuffer" single nil]) (orgtbl-join . [(20150121 1446) ((cl-lib (0 5))) "join columns from another table" tar ((:keywords "org" "table" "join" "filtering"))]) (orgtbl-ascii-plot . [(20150125 1429) nil "ascii-art bar plots in org-mode tables" single ((:keywords "org" "table" "ascii" "plot"))]) (orgtbl-aggregate . [(20150104 818) nil "Create an aggregated Org table from another one" tar ((:keywords "org" "table" "aggregation" "filtering"))]) (orglue . [(20150430 513) ((org (8 1)) (epic (0 2)) (org-mac-link (1 2))) "more functionality to org-mode." tar ((:keywords "org"))]) (orglink . [(20150815 835) ((dash (1 3 2)) (org (8 0))) "use Org Mode links in other modes" single ((:url . "http://github.com/tarsius/orglink") (:keywords "hypertext"))]) (orgit . [(20151008 1414) ((emacs (24 4)) (dash (2 12 0)) (magit (2 2 2)) (org (8 3))) "support for Org links to Magit buffers" single ((:url . "https://github.com/magit/orgit"))]) (orgbox . [(20140528 1826) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single ((:url . "https://github.com/yasuhito/orgbox") (:keywords "org"))]) (organic-green-theme . [(20151020 632) nil "Low-contrast green color theme." single nil]) (org2jekyll . [(20150906 647) ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) "Minor mode to publish org-mode post to jekyll without specific yaml" tar ((:url . "https://github.com/ardumont/org2jekyll") (:keywords "org-mode" "jekyll" "blog" "publish"))]) (org2blog . [(20150920 1312) ((org (8 1)) (xml-rpc (1 6 8)) (metaweblog (0 1))) "Blog from Org mode to wordpress" tar nil]) (org-wunderlist . [(20150817 1913) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4)) (s (1 9 0))) "Org sync with Wunderlist" single ((:url . "https://github.com/myuhe/org-wunderlist.el") (:keywords "convenience"))]) (org-webpage . [(20150915 1648) ((cl-lib (1 0)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (web-server (0 1))) "a static site generator based on org mode." tar nil]) (org-wc . [(20141031 2320) nil "Count words in org mode trees." single nil]) (org-vcard . [(20150412 1836) nil "org-mode support for vCard export and import." tar ((:url . "https://github.com/flexibeast/org-vcard") (:keywords "outlines" "org" "vcard"))]) (org-trello . [(20150905 1124) ((request-deferred (0 2 0)) (deferred (0 3 2)) (s (1 9 0)) (dash-functional (2 11 0)) (dash (2 11 0)) (emacs (24))) "Minor mode to synchronize org-mode buffer and trello board" tar nil]) (org-tree-slide . [(20151017 53) nil "A presentation tool for org-mode" single ((:keywords "org-mode" "presentation" "narrowing"))]) (org-transform-tree-table . [(20150110 633) ((dash (2 10 0)) (s (1 3 0))) "Transform org-mode tree with properties to a table, and the other way around" single ((:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table") (:keywords "org-mode" "table" "org-table" "tree" "csv" "convert"))]) (org-toodledo . [(20150301 313) ((request-deferred (0 2 0)) (emacs (24)) (cl-lib (0 5))) "Toodledo integration for Emacs Org mode" tar ((:keywords "outlines" "data"))]) (org-table-comment . [(20120209 1051) nil "Org table comment modes." single ((:url . "http://github.com/mlf176f2/org-table-comment.el") (:keywords "org-mode" "orgtbl"))]) (org-sync . [(20150817 754) ((cl-lib (0 5)) (org (8 2)) (emacs (24))) "Synchronize Org documents with External Issue Trackers" tar ((:url . "https://github.com/arbox/org-sync") (:keywords "org" "synchronization" "issue tracking" "github" "redmine"))]) (org-screenshot . [(20150814 657) ((org (7))) "screenshots integrated with org attachment dirs" single ((:url . "https://github.com/dfeich/org-screenshot") (:keywords "org"))]) (org-repo-todo . [(20141204 1341) nil "Simple repository todo management with org-mode" single ((:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience"))]) (org-redmine . [(20151021 731) ((anything (0))) "Redmine tools using Emacs OrgMode" single ((:url . "https://github.com/gongo/org-redmine") (:keywords "redmine" "org"))]) (org-readme . [(20150914 1014) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) "Integrates Readme.org and Commentary/Change-logs." tar ((:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git"))]) (org-protocol-jekyll . [(20130810 1450) nil "Jekyll's handler for org-protocol" single nil]) (org-projectile . [(20150902 2156) ((projectile (0 11 0)) (dash (2 10 0))) "Repository todo management for org-mode" single ((:url . "https://github.com/IvanMalison/org-projectile") (:keywords "org" "projectile" "todo"))]) (org-present . [(20141109 1756) ((org (7))) "Minimalist presentation minor-mode for Emacs org-mode." single ((:url . "https://github.com/rlister/org-present"))]) (org-pomodoro . [(20151020 407) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar ((:url . "https://github.com/lolownia/org-pomodoro"))]) (org-pdfview . [(20150704 220) ((org (6 1)) (pdf-tools (0 40))) "Support for links to documents in pdfview mode" single ((:keywords "org" "pdf-view" "pdf-tools"))]) (org-password-manager . [(20150729 1515) ((org (8 2 10)) (s (1 9 0))) "Minimal password manager for Emacs Org Mode." single ((:url . "https://github.com/leafac/org-password-manager") (:keywords "password"))]) (org-pandoc . [(20130729 1850) nil "Export from Org using Pandoc" tar nil]) (org-page . [(20150913 1733) ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0))) "a static site generator based on org mode" tar nil]) (org-outlook . [(20150914 547) nil "Outlook org" tar ((:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook"))]) (org-octopress . [(20150826 416) ((org (8 0)) (orglue (0 1)) (ctable (0 1 1))) "Compose octopress articles using org-mode." tar ((:keywords "org" "jekyll" "octopress" "blog"))]) (org-multiple-keymap . [(20150328 1806) ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) "Set keymap to elements, such as timestamp and priority." single ((:url . "https://github.com/myuhe/org-multiple-keymap.el") (:keywords "convenience" "org-mode"))]) (org-mobile-sync . [(20131118 1116) ((emacs (24 3 50)) (org (8 0))) "automatically sync org-mobile on changes" single ((:url . "https://github.com/steckerhalter/org-mobile-sync") (:keywords "org-mode" "org" "mobile" "sync" "todo"))]) (org-mac-link . [(20150910 416) nil "Insert org-mode links to items selected in various Mac apps" single ((:keywords "org" "mac" "hyperlink"))]) (org-mac-iCal . [(20140107 519) nil "Imports events from iCal.app to the Emacs diary" single ((:keywords "outlines" "calendar"))]) (org-linkany . [(20140314 1108) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single ((:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion"))]) (org-link-travis . [(20140405 1627) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single ((:url . "https://github.com/aki2o/org-link-travis") (:keywords "org"))]) (org-journal . [(20150910 749) nil "a simple org-mode based journaling mode" single ((:url . "http://github.com/bastibe/org-journal"))]) (org-jira . [(20150911 558) nil "Syncing between Jira and Org-mode." tar ((:url . "https://github.com/baohaojun/org-jira"))]) (org-jekyll . [(20130508 239) ((org (8 0))) "Export jekyll-ready posts form org-mode entries" single ((:url . "http://juanreyero.com/open/org-jekyll/") (:keywords "hypermedia"))]) (org-if . [(20150920 813) nil "Interactive Fiction Authoring System for Org-Mode." tar nil]) (org-grep . [(20140214 2022) nil "Kind of M-x rgrep adapted for Org mode." single ((:url . "https://github.com/pinard/org-grep"))]) (org-gnome . [(20150614 757) ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single ((:keywords "org" "gnome"))]) (org-gcal . [(20150922 1948) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single ((:url . "https://github.com/myuhe/org-gcal.el") (:keywords "convenience"))]) (org-fstree . [(20090723 819) nil "include a filesystem subtree into an org file" single ((:url . "http://www.burtzlaff.de/org-fstree/org-fstree.el") (:keywords "org-mode" "filesystem" "tree"))]) (org-elisp-help . [(20130423 1545) ((cl-lib (0 2)) (org (8 0))) "org links to emacs-lisp documentation" single ((:url . "https://github.com/tarsius/org-elisp-help") (:keywords "org" "remember" "lisp"))]) (org-ehtml . [(20150506 1658) ((web-server (20140109 2200)) (emacs (24 3))) "Export Org-mode files as editable web pages" tar nil]) (org-dropbox . [(20150113 2109) ((dash (2 2)) (names (20150000)) (emacs (24))) "move Dropbox notes from phone into org-mode datetree" single ((:url . "https://github.com/heikkil/org-dropbox") (:keywords "dropbox" "android" "notes" "org-mode"))]) (org-drill-table . [(20140117 137) ((s (1 7 0)) (dash (2 2 0)) (cl-lib (0 3)) (org-plus-contrib (8 2)) (emacs (24 1))) "Generate drill cards from org tables" single nil]) (org-download . [(20151025 15) ((async (1 2))) "Image drag-and-drop for Emacs org-mode" single ((:url . "https://github.com/abo-abo/org-download") (:keywords "images" "screenshots" "download"))]) (org-dotemacs . [(20150118 1941) ((org (7 9 3)) (cl-lib (1 0))) "Store your emacs config as an org file, and choose which bits to load." single ((:url . "https://github.com/vapniks/org-dotemacs") (:keywords "local"))]) (org-doing . [(20150824 701) nil "Keep track of what you're doing" tar ((:url . "https://github.com/omouse/org-doing") (:keywords "tools" "org"))]) (org-dashboard . [(20150812 302) ((cl-lib (0 5))) "Visually summarize progress in org files" single ((:url . "http://github.com/bard/org-dashboard") (:keywords "outlines" "calendar"))]) (org-cua-dwim . [(20120202 2134) nil "Org-mode and Cua mode compatibility layer" single ((:keywords "org-mode" "cua-mode"))]) (org-context . [(20150106 1306) nil "Contextual capture and agenda commands for Org-mode" single ((:url . "https://github.com/thisirs/org-context") (:keywords "org" "capture" "agenda" "convenience"))]) (org-cliplink . [(20150921 2251) nil "insert org-mode links from the clipboard" tar ((:url . "http://github.com/rexim/org-cliplink"))]) (org-caldav . [(20150131 152) ((org (7))) "Sync org files with external calendar through CalDAV" single ((:keywords "calendar" "caldav"))]) (org-bullets . [(20140918 1137) nil "Show bullets in org-mode as UTF-8 characters" single ((:url . "https://github.com/sabof/org-bullets"))]) (org-beautify-theme . [(20150106 956) nil "A sub-theme to make org-mode more beautiful." single ((:keywords "org" "theme"))]) (org-autolist . [(20150922 705) nil "Improved list management in org-mode" single ((:url . "https://github.com/calvinwyoung/org-autolist") (:keywords "lists" "checklists" "org-mode"))]) (org-alert . [(20151007 337) ((s (1 10 0)) (dash (2 12 0)) (alert (1 2))) "Notify org deadlines via notify-send" single ((:url . "https://github.com/groksteve/org-alert") (:keywords "org" "org-mode" "notify" "notifications"))]) (org-agenda-property . [(20140626 1416) ((emacs (24 2))) "Display org properties in the agenda buffer." single ((:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar"))]) (org-ac . [(20140302 413) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single ((:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion"))]) (operate-on-number . [(20150706 2323) nil "Operate on number at point with arithmetic functions" single ((:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing"))]) (openwith . [(20120531 1436) nil "Open files with external programs" single ((:url . "https://bitbucket.org/jpkotta/openwith") (:keywords "files" "processes"))]) (openstack-cgit-browse-file . [(20130819 227) nil "Browse the current file in OpenStack cgit" single ((:url . "https://github.com/chmouel/openstack-cgit-browse-file") (:keywords "convenience" "vc" "git" "cgit" "gerrit" "openstack"))]) (open-junk-file . [(20130130 2320) nil "Open a junk (memo) file to try-and-error" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/open-junk-file.el") (:keywords "convenience" "tools"))]) (opam . [(20150719 520) ((emacs (24 1))) "OPAM tools" single ((:url . "https://github.com/lunaryorn/opam.el") (:keywords "convenience"))]) (oneonone . [(20150821 1228) ((hexrgb (0))) "Frame configuration that uses one frame per window." single ((:url . "http://www.emacswiki.org/oneonone.el") (:keywords "local" "frames"))]) (on-screen . [(20150909 2317) ((cl-lib (0))) "guide your eyes while scrolling" single ((:url . "https://github.com/michael-heerdegen/on-screen.el") (:keywords "convenience"))]) (on-parens . [(20150702 1506) ((dash (2 10 0)) (emacs (24)) (evil (1 1 6)) (smartparens (1 6 3))) "smartparens wrapper to fit with evil-mode/vim normal-state" single ((:keywords "evil" "smartparens"))]) (omnisharp . [(20150709 1045) ((json (1 2)) (flycheck (0 21)) (dash (20141201 2206)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5)) (s (1 9 0))) "Omnicompletion (intellisense) and more for C#" tar ((:url . "https://github.com/sp3ctum/omnisharp-emacs") (:keywords "csharp" "c#" "ide" "auto-complete" "intellisense"))]) (omniref . [(20140222 1226) nil "Omniref Ruby documentation search engine interface" single ((:url . "http://github.org/dotemacs/omniref.el") (:keywords "docs" "help" "tools"))]) (omni-tags . [(20150513 1053) ((pcre2el (1 7)) (cl-lib (0 5))) "Highlight and Actions for 'Tags'" tar ((:url . "http://github.com/AdrieanKhisbe/omni-tags.el") (:keywords "convenience"))]) (omni-scratch . [(20150623 938) nil "Easy and mode-specific draft buffers" single ((:url . "https://github.com/AdrieanKhisbe/omni-scratch.el") (:keywords "convenience" "languages" "tools"))]) (omni-quotes . [(20150604 1057) ((dash (2 8)) (omni-log (0 1 2))) "Random quotes displayer" tar ((:url . "https://github.com/AdrieanKhisbe/omni-quotes.el") (:keywords "convenience"))]) (omni-log . [(20150604 1038) ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (1 8 0))) "Logging utilities" tar ((:url . "https://github.com/AdrieanKhisbe/omni-log.el") (:keywords "convenience" "languages" "tools"))]) (omni-kill . [(20150526 2349) nil "Kill all the things" single ((:keywords "convenience" "editing" "tools"))]) (om-mode . [(20140915 1410) nil "Insert Om component template with life cycle." single ((:keywords "clojurescript"))]) (olivetti . [(20150620 2136) nil "Minor mode for a nice writing environment" single ((:keywords "wp"))]) (oldlace-theme . [(20150705 600) ((emacs (24))) "Emacs 24 theme with an 'oldlace' background." single nil]) (offlineimap . [(20150916 458) nil "Run OfflineIMAP from Emacs" single ((:url . "http://julien.danjou.info/offlineimap-el.html"))]) (octopress . [(20151006 314) nil "A lightweight wrapper for Jekyll and Octopress." tar ((:url . "https://github.com/aaronbieber/octopress.el") (:keywords "octopress" "blog"))]) (octicons . [(20150801 629) ((cl-lib (0 5))) "octicons utility" tar ((:url . "https://github.com/syohex/emacs-octicons"))]) (ocp-indent . [(20150914 132) nil "automatic indentation with ocp-indent" single ((:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages"))]) (ocodo-svg-modelines . [(20150516 719) ((svg-mode-line-themes (0))) "A collection of beautiful SVG modelines" tar nil]) (occur-x . [(20130610 643) nil "Extra functionality for occur" single ((:keywords "occur" "search" "convenience"))]) (occur-context-resize . [(20140826 1249) nil "dynamically resize context around matches in occur-mode" single ((:url . "https://github.com/dgtized/occur-context-resize.el") (:keywords "matching"))]) (occidental-theme . [(20130312 1258) nil "Custom theme for faces based on Adwaita" single ((:url . "http://github.com/olcai/occidental-theme"))]) (obsidian-theme . [(20140420 943) nil "port of the eclipse obsidian theme" single ((:url . "http://github.com/mswift42/obsidian-theme"))]) (objc-font-lock . [(20141021 1122) nil "Highlight Objective-C method calls." single ((:url . "https://github.com/Lindydancer/objc-font-lock") (:keywords "languages" "faces"))]) (oberon . [(20120715 209) nil "Major mode for editing Oberon/Oberon-2 program texts" single ((:keywords "oberon" "oberon-2" "languages" "oop"))]) (ob-typescript . [(20150804 530) ((emacs (24)) (org (8 0))) "org-babel functions for typescript evaluation" single ((:url . "https://github.com/lurdan/ob-typescript") (:keywords "literate programming" "reproducible research" "typescript"))]) (ob-translate . [(20130718 729) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." single ((:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation"))]) (ob-sml . [(20130829 1143) ((sml-mode (6 4))) "org-babel functions for template evaluation" single ((:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research"))]) (ob-prolog . [(20150530 937) nil "org-babel functions for prolog evaluation." single ((:url . "https://github.com/ljos/ob-prolog") (:keywords "literate programming" "reproducible research"))]) (ob-mongo . [(20130718 732) ((org (8))) "Execute mongodb queries within org-mode blocks." single ((:url . "https://github.com/krisajenkins/ob-mongo") (:keywords "org" "babel" "mongo" "mongodb"))]) (ob-lfe . [(20150701 655) ((org (8))) "org-babel functions for lfe evaluation" single ((:url . "http://github.com/zweifisch/ob-lfe") (:keywords "org" "babel" "lfe" "lisp" "erlang"))]) (ob-kotlin . [(20150312 614) ((org (8))) "org-babel functions for kotlin evaluation" single ((:url . "http://github.com/zweifisch/ob-kotlin") (:keywords "org" "babel" "kotlin"))]) (ob-ipython . [(20151010 307) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "org-babel functions for IPython evaluation" tar ((:url . "http://www.gregsexton.org") (:keywords "literate programming" "reproducible research"))]) (ob-http . [(20151023 1553) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar ((:url . "http://github.com/zweifisch/ob-http"))]) (ob-elixir . [(20151021 447) ((org (8))) "org-babel functions for elixir evaluation" single ((:url . "http://github.com/zweifisch/ob-elixir") (:keywords "org" "babel" "elixir"))]) (ob-cypher . [(20150224 1837) ((s (1 9 0)) (cypher-mode (0 0 6)) (dash (2 10 0)) (dash-functional (1 2 0))) "query neo4j using cypher in org-mode blocks" single ((:url . "http://github.com/zweifisch/ob-cypher") (:keywords "org" "babel" "cypher" "neo4j"))]) (ob-browser . [(20150101 710) ((org (8))) "Render HTML in org-mode blocks." tar ((:url . "https://github.com/krisajenkins/ob-browser") (:keywords "org" "babel" "browser" "phantomjs"))]) (ob-axiom . [(20150804 1500) ((emacs (24 2)) (axiom-environment (20150801))) "org-babel for the axiom-environment system" single ((:keywords "axiom" "openaxiom" "fricas"))]) (oauth . [(20130127 1751) nil "Oauth library." tar ((:keywords "comm"))]) (o-blog . [(20140711 832) nil "" tar ((:keywords "emacs"))]) (nyan-prompt . [(20140809 2208) nil "Nyan Cat on the eshell prompt." tar ((:url . "http://github.com/PuercoPop/nyan-prompt") (:keywords "nyan" "cat" "lulz" "eshell" "rainbow dependencies ((rx 0))"))]) (nyan-mode . [(20151017 2235) nil "Nyan Cat shows position in current buffer in mode-line." tar ((:url . "https://github.com/TeMPOraL/nyan-mode/") (:keywords "nyan" "cat" "lulz" "pop tart cat" "build something amazing"))]) (nvm . [(20150910 745) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) "Manage Node versions within Emacs" single ((:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm"))]) (nummm-mode . [(20131117 214) nil "Display the number of minor modes instead of their names" single ((:url . "http://github.com/agpchil/nummm-mode"))]) (number . [(20141127 1004) nil "Working with numbers at point." single nil]) (nu-mode . [(20150413 1315) ((undo-tree (0 6 5)) (helm (20140902 1005))) "Modern Emacs Prompts Based Keybinding." tar nil]) (nsis-mode . [(20150914 546) nil "NSIS-mode" tar ((:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis"))]) (nrepl-sync . [(20140807 854) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single ((:url . "https://github.com/phillord/lein-sync"))]) (nrepl-eval-sexp-fu . [(20140311 341) ((highlight (0 0 0)) (smartparens (0 0 0)) (thingatpt (0 0 0))) "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience"))]) (novice+ . [(20150104 1634) nil "Extensions to `novice.el'." single ((:url . "http://www.emacswiki.org/novice+.el") (:keywords "internal" "help"))]) (notmuch-labeler . [(20131230 919) ((notmuch (0))) "Improve notmuch way of displaying labels" tar ((:url . "https://github.com/DamienCassou/notmuch-labeler") (:keywords "emacs" "package" "elisp" "notmuch" "emails"))]) (notmuch . [(20151027 401) nil "No description available." tar nil]) (nose . [(20140520 948) nil "Easy Python test running in Emacs" single ((:keywords "nose" "python" "testing"))]) (noflet . [(20141102 654) nil "locally override functions" single ((:url . "https://github.com/nicferrier/emacs-noflet") (:keywords "lisp"))]) (nodejs-repl . [(20130520 1635) nil "Run Node.js REPL" single nil]) (node-resolver . [(20140930 1023) ((cl-lib (0 5))) "hook to install node modules in background" single ((:url . "https://github.com/meandavejustice/node-resolver.el") (:keywords "convenience" "nodejs" "javascript" "npm"))]) (noctilux-theme . [(20150723 747) nil "Dark theme inspired by LightTable" tar nil]) (noccur . [(20150514 1420) nil "Run multi-occur on project/dired files" single ((:keywords "convenience"))]) (nnir-est . [(20140301 602) nil "Gnus nnir interface for HyperEstraier" single ((:url . "https://github.com/kawabata/nnir-est") (:keywords "mail"))]) (nm . [(20150607 1447) ((notmuch (0 18)) (peg (0 6)) (company (0)) (emacs (24))) "NEVERMORE: an email interface for Notmuch" tar ((:url . "https://github.com/tjim/nevermore"))]) (nixos-options . [(20151013 1609) ((emacs (24))) "Interface for browsing and completing NixOS options." single ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (nix-mode . [(20151026 315) nil "Major mode for editing Nix expressions" single ((:url . "https://github.com/NixOS/nix/tree/master/misc/emacs"))]) (ninja-mode . [(20141203 2159) ((emacs (24))) "Major mode for editing .ninja files" single nil]) (nim-mode . [(20150904 438) ((emacs (24)) (epc (0 1 1))) "A major mode for the Nim programming language" tar ((:keywords "nim" "languages"))]) (niflheim-theme . [(20150630 821) nil "A port of the Nifleim theme to Emacs" single ((:url . "https://github.com/niflheim-theme/emacs") (:keywords "themes"))]) (nginx-mode . [(20150824 1411) nil "major mode for editing nginx config files" single ((:keywords "nginx"))]) (nexus . [(20140114 505) nil "REST Client for Nexus Maven Repository servers" tar ((:keywords "comm"))]) (newlisp-mode . [(20150120 1040) nil "newLISP editing mode for Emacs" single ((:url . "https://github.com/kosh04/newlisp-mode") (:keywords "language" "lisp" "newlisp"))]) (never-comment . [(20140104 1407) nil "Never blocks are comment" single ((:url . "http://stackoverflow.com/a/4554658/89376"))]) (netherlands-holidays . [(20150202 817) nil "Netherlands holidays for Emacs calendar." single ((:url . "https://github.com/abo-abo/netherlands-holidays") (:keywords "calendar"))]) (neotree . [(20151003 626) nil "A tree plugin like NerdTree for Vim" tar ((:url . "https://github.com/jaypei/emacs-neotree"))]) (nemerle . [(20130328 746) nil "major mode for editing nemerle programs" single ((:keywords "nemerle" "mode" "languages"))]) (nclip . [(20130617 1315) nil "Network (HTTP) Clipboard" tar ((:url . "http://www.github.com/maio/nclip.el") (:keywords "nclip" "clipboard" "network"))]) (ncl-mode . [(20150525 929) ((emacs (24))) "Major Mode for editing NCL scripts and other goodies" tar nil]) (navorski . [(20141203 1024) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single ((:keywords "terminal"))]) (navi2ch . [(20150329 1916) nil "Navigator for 2ch for Emacsen" tar ((:keywords "network" "2ch"))]) (navi-mode . [(20141019 210) nil "major-mode for easy buffer-navigation" single ((:url . "https://github.com/tj64/navi"))]) (nav-flash . [(20140508 1341) nil "Briefly highlight the current line" single ((:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface"))]) (nav . [(20120507 7) nil "Emacs mode for filesystem navigation" tar nil]) (nasm-mode . [(20151026 1729) ((emacs (24 3))) "NASM x86 assembly major mode" single ((:url . "https://github.com/skeeto/nasm-mode"))]) (narrowed-page-navigation . [(20150108 2119) ((emacs (24)) (cl-lib (0 5))) "A minor mode for showing one page at a time" single ((:keywords "outlines"))]) (narrow-reindent . [(20150722 1206) ((emacs (24 4))) "Defines a minor mode to left-align narrowed regions." single ((:url . "https://github.com/emallson/narrow-reindent.el"))]) (narrow-indirect . [(20150104 1633) nil "Narrow using an indirect buffer that is a clone" single ((:url . "http://www.emacswiki.org/narrow-indirect.el") (:keywords "narrow" "indirect" "buffer" "clone" "view" "multiple-modes"))]) (naquadah-theme . [(20150923 141) nil "A theme based on Tango color set" single nil]) (nanowrimo . [(20141102 2139) nil "Track progress for nanowrimo" single ((:url . "https://bitbucket.org/gvol/nanowrimo-mode"))]) (nand2tetris . [(20151027 1451) ((names (0 3 0))) "Major mode for HDL files in the nand2tetris course" tar ((:url . "http://www.github.com/CestDiego/nand2tetris.el/") (:keywords "nand2tetris" "hdl"))]) (namespaces . [(20130326 1550) nil "An implementation of namespaces for Elisp, with an emphasis on immutabilty." single ((:url . "https://github.com/chrisbarrett/elisp-namespaces"))]) (names . [(20151014 443) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar ((:url . "https://github.com/Bruce-Connor/names") (:keywords "extensions" "lisp"))]) (nameless . [(20151014 439) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single ((:url . "https://github.com/Malabarba/nameless") (:keywords "convenience" "lisp"))]) (nameframe-projectile . [(20151018 207) ((nameframe (0 4 0 -2)) (projectile (0 13 0))) "Nameframe integration with Projectile" single ((:url . "https://github.com/john2x/nameframe"))]) (nameframe-perspective . [(20151018 207) ((nameframe (0 4 0 -2)) (perspective (1 12))) "Nameframe integration with perspective.el" single ((:url . "https://github.com/john2x/nameframe"))]) (nameframe . [(20151017 2119) nil "Manage frames by name." single ((:url . "https://github.com/john2x/nameframe"))]) (name-this-color . [(20151014 1330) ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) "Match RGB codes to names easily and precisely" single ((:url . "https://github.com/knl/name-this-color.el") (:keywords "lisp" "color" "hex" "rgb" "shade" "name"))]) (naked . [(20150104 1632) nil "Provide for naked key descriptions: no angle brackets." single ((:url . "http://www.emacswiki.org/naked.el") (:keywords "lisp" "key" "print" "format" "help"))]) (n4js . [(20150713 1931) ((emacs (24)) (cypher-mode (0))) "Neo4j Shell" single ((:url . "https://github.com/tmtxt/n4js.el") (:keywords "neo4j" "shell" "comint"))]) (n3-mode . [(20141027 1057) nil "mode for Notation 3" single nil]) (myterminal-controls . [(20150427 347) ((emacs (24)) (cl-lib (0 5))) "Quick toggle controls at a key-stroke" single ((:url . "http://ismail.teamfluxion.com") (:keywords "convenience" "shortcuts"))]) (mysql2sqlite . [(20120514 731) nil "Convert mysql databases into sqlite databases." single nil]) (mynt-mode . [(20150512 1349) ((virtualenvwrapper (20131514))) "Minor mode to work with the mynt static site generator" single ((:url . "https://github.com/crshd/mynt-mode") (:keywords "convenience"))]) (mykie . [(20150808 1505) ((emacs (24 3)) (cl-lib (0 5))) "Command multiplexer: Register multiple functions to a keybind" tar ((:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind"))]) (myanmar-input-methods . [(20150806 507) nil "Emacs Input Method for Myanmar" single ((:url . "http://github.com/yelinkyaw/emacs-myanmar-input-methods") (:keywords "myanmar" "unicode" "keyboard"))]) (mwim . [(20150822 1236) nil "Move to the beginning/end of line or code" single ((:url . "https://github.com/alezost/mwim.el") (:keywords "convenience"))]) (mwe-log-commands . [(20100703 541) nil "log keyboard commands to buffer" single ((:keywords "help"))]) (mvn . [(20150930 2329) nil "helpers for compiling with maven" single ((:url . "https://github.com/apgwoz/mvn-el") (:keywords "compilation" "maven" "java"))]) (muttrc-mode . [(20090804 1552) nil "Major mode to edit muttrc under Emacs" single nil]) (mustard-theme . [(20141115 2302) ((emacs (24 0))) "an Emacs 24 theme based on Mustard (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (mustang-theme . [(20141017 1623) nil "port of vim's mustang theme" single ((:url . "http://github.com/mswift42/mustang-theme"))]) (mustache-mode . [(20141024 732) nil "A major mode for editing Mustache files." single nil]) (mustache . [(20131117 1407) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar nil]) (multiple-cursors . [(20150710 456) nil "Multiple cursors for Emacs." tar nil]) (multifiles . [(20130615 1433) nil "View and edit parts of multiple files in one buffer" single ((:keywords "multiple" "files"))]) (multicolumn . [(20150202 1451) nil "Creating and managing multiple side-by-side windows." single ((:url . "https://github.com/Lindydancer/multicolumn"))]) (multi-web-mode . [(20130823 2054) nil "multiple major mode support for web editing" tar ((:url . "https://github.com/fgallina/multi-web-mode") (:keywords "convenience" "languages" "wp"))]) (multi-term . [(20150220 520) nil "Managing multiple terminal buffers in Emacs." single ((:url . "http://www.emacswiki.org/emacs/download/multi-term.el") (:keywords "term" "terminal" "multiple buffer"))]) (multi-project . [(20150314 744) nil "Easily work with multiple projects." single ((:url . "https://bitbucket.org/ellisvelo/multi-project/overview") (:keywords "project" "management"))]) (multi-eshell . [(20120608 1135) nil "Create and manage multiple shells within Emacs" single ((:url . "http://cims.nyu.edu/~stucchio"))]) (multi-compile . [(20151021 1502) ((emacs (24))) "Multi target interface to compile." single ((:url . "https://github.com/ReanGD/emacs-multi-compile") (:keywords "tools" "compile" "build"))]) (multi . [(20131013 844) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single ((:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch"))]) (mu4e-maildirs-extension . [(20150930 627) ((dash (0 0 0))) "Show mu4e maildirs summary in mu4e-main-view" single ((:url . "http://github.com/agpchil/mu4e-maildirs-extension"))]) (mu4e-alert . [(20151024 1008) ((alert (1 2)) (s (1 10 0)) (emacs (24 1))) "Desktop notification for mu4e" single ((:url . "https://github.com/iqbalansari/mu4e-alert") (:keywords "mail" "convenience"))]) (msvc . [(20150530 151) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (1 2 0))) "Microsoft Visual C/C++ mode" tar ((:url . "https://github.com/yaruopooner/msvc") (:keywords "languages" "completion" "syntax check" "mode" "intellisense"))]) (mpv . [(20150218 118) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) "control mpv for easy note-taking" single ((:url . "https://github.com/kljohann/mpv.el") (:keywords "tools" "multimedia"))]) (mpg123 . [(20150110 1816) nil "A front-end program to mpg123/ogg123" single nil]) (mpages . [(20150710 704) nil "An Emacs buffer for quickly writing your Morning Pages" single ((:url . "https://github.com/slevin/mpages"))]) (mozc-popup . [(20150223 1634) ((popup (0 5 2)) (mozc (0))) "Mozc with popup" single ((:keywords "i18n" "extentions"))]) (mozc-im . [(20150419 449) ((mozc (0))) "Mozc with input-method-function interface." single ((:keywords "i18n" "extentions"))]) (mozc . [(20150815 303) nil "minor mode to input Japanese with Mozc" single ((:keywords "mule" "multilingual" "input method"))]) (moz-controller . [(20141001 2347) ((moz (0))) "Control Firefox from Emacs" single ((:url . "https://github.com/RenWenshan/emacs-moz-controller"))]) (moz . [(20150805 1006) nil "Lets current buffer interact with inferior mozilla." single ((:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el"))]) (mowedline . [(20150601 1009) nil "elisp utilities for using mowedline" single nil]) (move-text . [(20140307 844) nil "Move current line or region with M-up or M-down." single ((:keywords "edit"))]) (move-dup . [(20140925 808) nil "Eclipse-like moving and duplicating lines or rectangles." single ((:keywords "convenience" "wp"))]) (mouse3 . [(20150402 1629) nil "Customizable behavior for `mouse-3'." single ((:url . "http://www.emacswiki.org/mouse3.el") (:keywords "mouse" "menu" "keymap" "kill" "rectangle" "region"))]) (mouse-slider-mode . [(20150910 1400) ((emacs (24 3)) (cl-lib (0 3))) "scale numbers dragged under the mouse" single ((:url . "https://github.com/skeeto/mouse-slider-mode"))]) (mouse+ . [(20150104 1629) nil "Extensions to `mouse.el'." single ((:url . "http://www.emacswiki.org/mouse+.el") (:keywords "mouse"))]) (motion-mode . [(20140919 1856) ((flymake-easy (0 7)) (flymake-cursor (1 0 2))) "major mode for RubyMotion enviroment" tar ((:url . "https://github.com/ainame/motion-mode"))]) (mote-mode . [(20121014 2119) ((ruby-mode (1 1))) "Mote minor mode" single ((:url . "http://inkel.github.com/mote-mode/"))]) (morlock . [(20150815 834) nil "more font-lock keywords for elisp" single ((:url . "http://github.com/tarsius/morlock") (:keywords "convenience"))]) (monroe . [(20141111 107) nil "Yet another client for nREPL" single ((:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp"))]) (monokai-theme . [(20151022 703) nil "A fruity color theme for Emacs." single ((:url . "http://github.com/oneKelvinSmith/monokai-emacs"))]) (monochrome-theme . [(20140326 350) nil "A dark Emacs 24 theme for your focused hacking sessions" tar nil]) (monky . [(20150404 18) nil "Control Hg from Emacs." tar nil]) (mongo . [(20150315 519) nil "MongoDB driver for Emacs Lisp" tar ((:keywords "convenience"))]) (molokai-theme . [(20151016 845) nil "molokai theme with Emacs theme engine" single ((:url . "https://github.com/alloy-d/color-theme-molokai"))]) (moe-theme . [(20151013 1927) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar ((:url . "https://github.com/kuanyui/moe-theme.el"))]) (modtime-skip-mode . [(20140128 1401) nil "Minor mode for disabling modtime and supersession checks on files." single ((:url . "http://www.github.com/jordonbiondo/modtime-skip-mode"))]) (modeline-posn . [(20150228 1013) nil "Set up `mode-line-position'." single ((:url . "http://www.emacswiki.org/modeline-posn.el") (:keywords "mode-line" "region" "column"))]) (modeline-char . [(20150710 1953) nil "In the mode-line, show the value of the character after point." single ((:url . "http://www.emacswiki.org/modeline-char.el") (:keywords "mode-line" "character"))]) (mode-line-debug . [(20150307 512) nil "show status of `debug-on-error' in the mode-line" single ((:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp"))]) (mode-icons . [(20130602 548) nil "Show icons for modes" tar ((:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia"))]) (modalka . [(20150924 911) ((emacs (24 4))) "Easily introduce native modal editing of your own design" single ((:url . "https://github.com/mrkkrp/modalka") (:keywords "modal" "editing"))]) (mocker . [(20150916 1854) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single ((:keywords "lisp" "testing"))]) (mocha-snippets . [(20150116 800) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar ((:keywords "test" "javascript"))]) (mobdebug-mode . [(20140109 1946) ((lua-mode (20130419)) (emacs (24))) "Major mode for MobDebug" single ((:url . "https://github.com/deftsp/mobdebug-mode"))]) (mo-vi-ment-mode . [(20131028 2333) nil "Provide vi-like cursor movement that's easy on the fingers" single ((:keywords "convenience"))]) (mo-git-blame . [(20140409 320) nil "An interactive, iterative 'git blame' mode for Emacs" single ((:keywords "tools"))]) (mmt . [(20150906 959) ((emacs (24 1)) (cl-lib (0 3))) "Missing macro tools for Emacs Lisp" single ((:url . "https://github.com/mrkkrp/mmt") (:keywords "macro" "emacs-lisp"))]) (mmm-mode . [(20150828 1716) nil "Allow Multiple Major Modes in a buffer" tar ((:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools"))]) (mmm-mako . [(20121019 2351) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ((:url . "https://bitbucket.org/pjenvey/mmm-mako"))]) (mmm-jinja2 . [(20150904 1134) ((mmm-mode (0 5 4))) "MMM submode class for Jinja2 Templates" single ((:url . "https://github.com/beardedprojamz/mmm-jinja2"))]) (mkdown . [(20140517 718) ((markdown-mode (2 0))) "Pretty Markdown previews based on mkdown.com" tar ((:url . "https://github.com/ajtulloch/mkdown.el") (:keywords "markdown"))]) (misc-fns . [(20150403 921) nil "Miscellaneous non-interactive functions." single ((:url . "http://www.emacswiki.org/misc-fns.el") (:keywords "internal" "unix" "lisp" "extensions" "local"))]) (misc-cmds . [(20150602 1227) nil "Miscellaneous commands (interactive functions)." single ((:url . "http://www.emacswiki.org/misc-cmds.el") (:keywords "internal" "unix" "extensions" "maint" "local"))]) (mip-mode . [(20141023 450) nil "virtual projects for emacs." single ((:keywords "workspaces" "workspace" "project" "projects" "mip-mode"))]) (minor-mode-hack . [(20141226 1220) nil "Change priority of minor-mode keymaps" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/minor-mode-hack.el") (:keywords "lisp"))]) (minitest . [(20151015 1131) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" tar ((:url . "https://github.com/arthurnn/minitest-emacs"))]) (minimap . [(20150108 1615) nil "Minimap sidebar for Emacs" single ((:keywords "minimap"))]) (minimal-theme . [(20140409 1601) nil "A light/dark minimalistic Emacs 24 theme." tar ((:url . "http://github.com/ikame/minimal-theme") (:keywords "color" "theme" "minimal"))]) (minimal-session-saver . [(20140508 1341) nil "Very lean session saver" single ((:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project"))]) (miniedit . [(20100419 1045) nil "Enhanced editing for minibuffer fields." single nil]) (minibuffer-cua . [(20130906 434) nil "Make CUA mode's S-up/S-down work in minibuffer" single ((:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing"))]) (minibuffer-complete-cycle . [(20130813 945) nil "Cycle through the *Completions* buffer" single ((:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion"))]) (minibuf-isearch . [(20071112 234) nil "incremental search on minibuffer history" tar ((:keywords "minibuffer" "history" "incremental search"))]) (mingus . [(20151018 745) ((libmpdee (2 1))) "MPD Interface" tar ((:url . "https://github.com/pft/mingus") (:keywords "multimedia" "elisp" "music" "mpd"))]) (minesweeper . [(20150413 2222) nil "play minesweeper in Emacs" single ((:url . "https://bitbucket.org/zck/minesweeper.el") (:keywords "game" "fun" "minesweeper" "inane" "diversion"))]) (milkode . [(20140926 2229) nil "Command line search and direct jump with Milkode" single ((:keywords "milkode" "search" "grep" "jump" "keyword"))]) (migemo . [(20150412 741) ((cl-lib (0 5))) "Japanese incremental search through dynamic pattern expansion" single ((:url . "https://github.com/emacs-jp/migemo"))]) (midje-test-mode . [(20131208 914) ((clojure-mode (1 7)) (cider (0 3 0))) "Minor mode for midje" single ((:keywords "languages" "lisp" "test"))]) (midje-mode . [(20150921 1750) ((cider (0 1 4)) (clojure-mode (1 0))) "Minor mode for running Midje tests in emacs" tar nil]) (mic-paren . [(20140714 19) nil "advanced highlighting of matching parentheses" single ((:keywords "languages" "faces" "parenthesis" "matching"))]) (mhc . [(20151022 646) ((calfw (20150703))) "Message Harmonized Calendaring system." tar ((:url . "http://www.quickhack.net/mhc") (:keywords "calendar"))]) (mew . [(20150813 2354) nil "Messaging in the Emacs World" tar nil]) (metaweblog . [(20141130 605) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar nil]) (metascript-mode . [(20150708 1757) ((emacs (24 3))) "Major mode for the Metascript programming language" single ((:url . "http://github.com/metascript/metascript-mode") (:keywords "languages" "metascript" "mjs"))]) (meta-presenter . [(20150501 410) nil "A simple multi-file presentation tool for Emacs" single ((:url . "http://ismail.teamfluxion.com") (:keywords "productivity" "presentation"))]) (message-x . [(20140505 707) nil "No description available." single nil]) (merlin . [(20151027 820) nil "Mode for Merlin, an assistant for OCaml." tar ((:url . "http://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages"))]) (menu-bar+ . [(20150104 1623) nil "Extensions to `menu-bar.el'." single ((:url . "http://www.emacswiki.org/menu-bar+.el") (:keywords "internal" "local" "convenience"))]) (mentor . [(20140904 1710) ((xml-rpc (1 6 9))) "Frontend for the rTorrent bittorrent client" tar ((:keywords "bittorrent" "rtorrent"))]) (memolist . [(20150804 1021) ((markdown-mode (22 0)) (ag (0 45))) "memolist.el is Emacs port of memolist.vim." single ((:url . "http://github.com/mikanfactory/emacs-memolist") (:keywords "markdown" "memo"))]) (memoize . [(20130421 1234) nil "Memoization functions" single ((:url . "https://github.com/skeeto/emacs-memoize"))]) (memento . [(20150823 339) nil "maintaining daily journals when the day ends." single ((:keywords "journal" "log" "diary"))]) (melpa-upstream-visit . [(20130720 333) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single ((:keywords "convenience"))]) (mellow-theme . [(20141115 2302) ((emacs (24 0))) "an Emacs 24 theme based on Mellow (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (mediawiki . [(20150711 1734) nil "mediawiki frontend" single ((:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki"))]) (meacupla-theme . [(20151027 1517) nil "meacupla theme for emacs" single ((:url . "https://gitlab.com/jtecca/meacupla-theme") (:keywords "color" "theme" "meacupla" "faces"))]) (md-readme . [(20150505 2359) nil "Markdown-formatted READMEs for your ELisp" tar ((:url . "http://github.com/thomas11/md-readme/tree/master") (:keywords "lisp" "help" "readme" "markdown" "header" "documentation" "github"))]) (mc-extras . [(20150218 234) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar ((:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors"))]) (mbo70s-theme . [(20141122 642) ((emacs (24 0))) "70s style palette, with similarities to mbo theme" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (mbe . [(20141112 1042) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single ((:url . "https://github.com/ijp/mbe.el") (:keywords "tools" "macros"))]) (mb-depth+ . [(20150104 1622) nil "Indicate minibuffer-depth in prompt" single ((:url . "http://www.emacswiki.org/mb-depth+.el") (:keywords "convenience"))]) (maxframe . [(20140916 754) nil "maximize the emacs frame based on display size" single ((:keywords "display" "frame" "window" "maximize"))]) (maven-test-mode . [(20141219 2157) ((s (1 9)) (emacs (24))) "Utilities for navigating test files and running maven test tasks." single ((:url . "http://github.com/rranelli/maven-test-mode") (:keywords "java" "maven" "test"))]) (maude-mode . [(20140212 302) nil "Emacs mode for the programming language Maude" single ((:keywords "maude"))]) (matlab-mode . [(20141227 1244) nil "No description available." tar nil]) (math-symbols . [(20130910 31) ((helm (1 0))) "Math Symbol Input methods and conversion tools" tar ((:url . "https://github.com/kawabata/math-symbols") (:keywords "math symbols" "tex" "latex"))]) (math-symbol-lists . [(20150830 1633) nil "Lists of Unicode math symbols and latex commands" single ((:url . "https://github.com/vspinu/math-symbol-lists") (:keywords "unicode" "symbols" "mathematics"))]) (material-theme . [(20151010 406) ((emacs (24 1))) "A Theme based on the colors of the Google Material Design" tar ((:url . "http://github.com/cpaulik/emacs-material-theme") (:keywords "themes"))]) (marshal . [(20150916 1857) ((eieio (1 4)) (json (1 3))) "eieio extension for automatic (un)marshalling" single ((:url . "https://github.com/sigma/marshal.el") (:keywords "eieio"))]) (marmalade-client . [(20141231 1207) ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) "client for marmalade API from emacs" tar ((:url . "https://github.com/nicferrier/emacs-marmalade-upload") (:keywords "lisp"))]) (marmalade . [(20110602 1622) ((furl (0 0 2))) "Elisp interface for the Emacs Lisp package server." single ((:url . "http://code.google.com/p/marmalade"))]) (markup-faces . [(20141110 17) nil "collection of faces for markup language modes" single ((:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces"))]) (markup . [(20130207 1309) nil "Simple markup generation helpers." single ((:url . "http://github.com/leoc/markup.el") (:keywords "convenience" "markup" "html"))]) (markdown-toc . [(20150715 914) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 0))) "A simple TOC generator for markdown file" tar nil]) (markdown-mode . [(20151011 1256) nil "Emacs Major mode for Markdown-formatted text files" single ((:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex"))]) (markdown-mode+ . [(20120829 510) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar ((:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf"))]) (mark-tools . [(20130614 325) nil "Some simple tools to access the mark-ring in Emacs" single ((:url . "https://github.com/stsquad/emacs-mark-tools"))]) (mark-multiple . [(20121118 754) nil "Sorta lets you mark several regions at once." tar nil]) (marcopolo . [(20150326 918) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Docker API" tar ((:url . "https://github.com/nlamirault/marcopolo") (:keywords "docker"))]) (map-regexp . [(20130522 1403) ((cl-lib (0 2))) "map over matches of a regular expression" single ((:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience"))]) (map-progress . [(20140310 1432) nil "mapping macros that report progress" single ((:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience"))]) (mandoku-meta-zb . [(20150302 2006) ((org (8)) (mandoku (0 5))) "Metadata for the ZB repository to be used by Mandoku" tar ((:url . "http://www.mandoku.org") (:keywords "convenience"))]) (mandoku-meta-kr . [(20150617 2218) ((org (8)) (mandoku (0 5))) "Metadata for the KR repository to be used by Mandoku" tar ((:url . "http://www.kanripo.org") (:keywords "convenience"))]) (mandoku . [(20150909 1611) ((org (8 0))) "A tool to access repositories of premodern Chinese texts" tar nil]) (manage-minor-mode . [(20140310 900) ((emacs (24 3))) "Manage your minor-modes easily" single ((:url . "https://github.com/ShingoFukuyama/manage-minor-mode") (:keywords "minor-mode" "manage" "emacs"))]) (man-commands . [(20130627 1653) nil "Add interactive commands for every manpages installed in your computer." single ((:url . "http://github.com/nflath/man-commands"))]) (mallard-snippets . [(20131023 1151) ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) "Yasnippets for Mallard" tar ((:url . "https://github.com/jhradilek/emacs-mallard-snippets") (:keywords "snippets" "mallard"))]) (mallard-mode . [(20131203 2025) nil "Major mode for editing Mallard files" tar ((:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard"))]) (malinka . [(20151025 226) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single ((:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management"))]) (malabar-mode . [(20150720 1055) ((fringe-helper (1 0 1)) (groovy-mode (0))) "JVM Integration mode for EMACS" tar ((:url . "http://www.github.com/m0smith/malabar-mode") (:keywords "java" "maven" "groovy" "language" "malabar"))]) (makey . [(20131231 630) ((cl-lib (0 2))) "interactive commandline mode" single nil]) (maker-mode . [(20150116 354) ((s (1 3 0)) (dash (2 8 0))) "Emacs mode for maker (scala build tool)" single ((:url . "https://github.com/fommil/maker-mode") (:keywords "processes" "tools"))]) (make-it-so . [(20150319 1207) ((helm (1 5 3)) (emacs (24))) "Transform files with Makefile recipes." tar ((:url . "https://github.com/abo-abo/make-it-so") (:keywords "make" "dired"))]) (make-color . [(20140625 450) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single ((:url . "https://github.com/alezost/make-color.el") (:keywords "color"))]) (majapahit-theme . [(20151025 2143) nil "Color theme with a dark and light versions" tar ((:keywords "color" "theme") (:url . "https://gitlab.com/franksn/majapahit-theme"))]) (main-line . [(20130404 1904) nil "modeline replacement forked from an early version of powerline.el" single ((:url . "https://github.com/jasonm23/emacs-mainline") (:keywords "statusline" "/" "modeline"))]) (magnatune . [(20151015 1338) ((dash (2 9 0)) (s (1 9 0))) "browse magnatune's music catalog" tar nil]) (magma-mode . [(20150923 140) ((cl-lib (0 3)) (dash (2 6 0)) (f (0 17 1))) "Magma mode for Emacs" tar ((:url . "https://github.com/ThibautVerron/magma-mode"))]) (magit-tramp . [(20150628 1152) ((magit (1 2 0))) "git method for TRAMP" tar ((:url . "https://github.com/sigma/magit-tramp"))]) (magit-topgit . [(20151018 1031) ((emacs (24 4)) (magit (2 1 0))) "TopGit extension for Magit" single ((:keywords "vc" "tools"))]) (magit-svn . [(20151018 1033) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" single ((:keywords "vc" "tools"))]) (magit-stgit . [(20151018 1032) ((emacs (24 4)) (magit (2 1 0))) "StGit extension for Magit" single ((:keywords "vc" "tools"))]) (magit-rockstar . [(20151008 1524) ((dash (2 11 0)) (magit (2 1 0))) "commit like a rockstar" single ((:url . "http://github.com/tarsius/magit-rockstar") (:keywords "convenience"))]) (magit-popup . [(20151022 1002) ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113))) "Define prefix-infix-suffix command combos" tar ((:url . "https://github.com/magit/magit") (:keywords "bindings"))]) (magit-gitflow . [(20150905 39) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single ((:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools"))]) (magit-gh-pulls . [(20151021 202) ((emacs (24)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single ((:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "git" "tools"))]) (magit-gerrit . [(20150920 1656) ((magit (2 1 0))) "Magit plugin for Gerrit Code Review" single ((:url . "https://github.com/terranpro/magit-gerrit"))]) (magit-find-file . [(20150702 130) ((magit (2 1 0)) (dash (2 8 0))) "completing-read over all files in Git" single ((:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git"))]) (magit-filenotify . [(20151001 36) ((magit (1 3 0)) (emacs (24 4))) "Refresh status buffer when git tree changes" single ((:keywords "tools"))]) (magit-annex . [(20151008 2126) ((cl-lib (0 3)) (magit (1 2 0))) "Control git-annex from Magit" single ((:url . "https://github.com/kyleam/magit-annex") (:keywords "vc" "tools"))]) (magit . [(20151025 1115) ((emacs (24 4)) (async (20150909 2257)) (dash (20151021 113)) (with-editor (20151022)) (git-commit (20151022)) (magit-popup (20151022))) "A Git porcelain inside Emacs" tar ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc"))]) (magic-latex-buffer . [(20150818 849) ((cl-lib (0 5)) (emacs (24 3))) "magical syntax highlighting for LaTeX-mode buffers" single ((:url . "http://hins11.yu-yake.com/"))]) (magic-filetype . [(20151018 1035) ((emacs (24)) (s (1 9 0))) "Enhance filetype major mode" single ((:keywords "vim" "ft" "file" "magic-mode"))]) (mag-menu . [(20150505 1150) ((splitter (0 1 0))) "Intuitive keyboard-centric menu system" single ((:url . "https://github.com/chumpage/mag-menu") (:keywords "convenience"))]) (macrostep . [(20151001 2043) nil "interactive macro expander" single ((:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging"))]) (macros+ . [(20150104 1620) nil "Extensions to `macros.el'." single ((:url . "http://www.emacswiki.org/macros+.el") (:keywords "abbrev" "local"))]) (macro-math . [(20130328 904) nil "in-buffer mathematical operations" single ((:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience"))]) (m-buffer . [(20151025 916) ((dash (2 8 0)) (emacs (24 3))) "List-Oriented, Functional Buffer Manipulation" tar nil]) (lxc . [(20140410 1322) nil "lxc integration with Emacs" single ((:url . "https://github.com/nicferrier/emacs-lxc") (:keywords "processes"))]) (lusty-explorer . [(20150508 1557) nil "Dynamic filesystem explorer and buffer switcher" single ((:keywords "convenience" "files" "matching"))]) (lush-theme . [(20141107 806) ((emacs (24))) "A dark theme with strong colors" single ((:url . "https://github.com/andre-richter/emacs-lush-theme") (:keywords "theme" "dark" "strong colors"))]) (lua-mode . [(20151025 530) nil "a major-mode for editing Lua scripts" tar ((:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools"))]) (love-minor-mode . [(20130429 1459) ((lua-mode (20130419))) "Minor mode for working on LÖVE projects" single ((:url . "https://github.com/ejmr/love-minor-mode"))]) (lorem-ipsum . [(20140911 1408) nil "Insert dummy pseudo Latin text." single ((:keywords "tools" "language" "convenience"))]) (loop . [(20130309 805) nil "friendly imperative loop structures" single ((:keywords "loop" "while" "for each" "break" "continue"))]) (look-mode . [(20130824 506) nil "quick file viewer for image and text file browsing" single nil]) (look-dired . [(20151015 931) ((look-mode (1 0))) "Extensions to look-mode for dired buffers" single ((:url . "https://github.com/vapniks/look-dired") (:keywords "convenience"))]) (lolcode-mode . [(20111002 147) nil "Major mode for editing LOLCODE" single ((:url . "http://github.com/bodil/lolcode-mode") (:keywords "lolcode" "major" "mode"))]) (logview . [(20151006 1201) ((emacs (24 1))) "Major mode for viewing log files" single ((:url . "https://github.com/doublep/logview") (:keywords "files" "tools"))]) (logstash-conf . [(20150308 518) nil "basic mode for editing logstash configuration" single nil]) (logito . [(20120225 1255) ((eieio (1 3))) "logging library for Emacs" single ((:keywords "lisp" "tool"))]) (logalimacs . [(20131021 1129) ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) "Front-end to logaling-command for Ruby gems" single ((:url . "https://github.com/logaling/logalimacs") (:keywords "translation" "logaling-command"))]) (log4j-mode . [(20101016 822) nil "major mode for viewing log files" single ((:keywords "log" "log4j" "java"))]) (log4e . [(20150105 505) nil "provide logging framework for elisp" single ((:url . "https://github.com/aki2o/log4e") (:keywords "log"))]) (lodgeit . [(20150312 649) nil "Paste to a lodgeit powered pastebin" single ((:url . "https://github.com/ionrock/lodgeit-el") (:keywords "pastebin" "lodgeit"))]) (loccur . [(20150611 1037) nil "Performs an occur-like folding in current buffer." single ((:url . "https://github.com/fourier/loccur") (:keywords "matching"))]) (loc-changes . [(20150302 848) nil "keep track of positions even after buffer changes" single ((:url . "http://github.com/rocky/emacs-loc-changes"))]) (load-theme-buffer-local . [(20120702 1336) nil "Install emacs24 color themes by buffer." single ((:url . "http://github.com/vic/color-theme-buffer-local") (:keywords "faces"))]) (load-relative . [(20150224 1722) nil "relative file load (within a multi-file Emacs package)" single ((:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal"))]) (llvm-mode . [(20150910 644) nil "Major mode for the LLVM assembler language." tar nil]) (livid-mode . [(20131116 544) ((skewer-mode (1 5 3)) (s (1 8 0))) "Live browser eval of JavaScript every time a buffer changes" single ((:url . "https://github.com/pandeiro/livid-mode"))]) (livescript-mode . [(20140612 2121) nil "Major mode for editing LiveScript files" single ((:url . "https://github.com/yhisamatsu/livescript-mode") (:keywords "languages" "livescript"))]) (lively . [(20120728 713) nil "Interactively updating text" single nil]) (live-code-talks . [(20150115 1423) ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) "Support for slides with live code in them" single ((:keywords "docs" "multimedia"))]) (literate-starter-kit . [(20150730 1154) ((emacs (24 3))) "A literate starter kit to configure Emacs using Org-mode files." tar nil]) (literate-coffee-mode . [(20141216 1519) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single ((:url . "https://github.com/syohex/emacs-literate-coffee-mode"))]) (litable . [(20150908 709) ((dash (2 6 0))) "dynamic evaluation replacement with emacs" single ((:keywords "lisp"))]) (lit-mode . [(20141123 936) nil "Major mode for lit" single ((:keywords "languages" "tools"))]) (list-utils . [(20140508 1341) nil "List-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions"))]) (list-unicode-display . [(20150219 101) ((cl-lib (0 5))) "Search for and list unicode characters by name" single ((:keywords "convenience"))]) (list-register . [(20130824 500) nil "List register" single nil]) (list-processes+ . [(20131117 1135) nil "Add process management to `list-processes'" single ((:url . "not distributed yet"))]) (list-packages-ext . [(20130927 908) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single ((:keywords "convenience" "tools"))]) (list-environment . [(20150620 2018) nil "A tabulated process environment editor" single ((:keywords "processes" "unix"))]) (lispyscript-mode . [(20130828 719) nil "Major mode for LispyScript code." single ((:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages"))]) (lispy . [(20151027 617) ((emacs (24 1)) (ace-window (0 9 0)) (iedit (0 97)) (swiper (0 4 0))) "vi-like Paredit" tar nil]) (lispxmp . [(20130824 507) nil "Automagic emacs lisp code annotation" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/lispxmp.el") (:keywords "lisp" "convenience"))]) (lisp-extra-font-lock . [(20150129 1316) nil "Highlight bound variables and quoted exprs." single ((:url . "https://github.com/Lindydancer/lisp-extra-font-lock") (:keywords "languages" "faces"))]) (linum-relative . [(20151019 455) nil "display relative line number in emacs." single ((:url . "http://github.com/coldnew/linum-relative") (:keywords "converience"))]) (linum-off . [(20130419 2054) nil "Provides an interface for turning line-numbering off" single ((:url . "http://www.emacswiki.org/emacs/auto-indent-mode.el ") (:keywords "line" "numbering"))]) (linphone . [(20130524 409) nil "Emacs interface to Linphone" tar ((:url . "https://github.com/zabbal/emacs-linphone") (:keywords "comm"))]) (link-hint . [(20151024 1744) ((avy (0 3 0)) (emacs (24 1))) "Use avy to open or copy visible urls." single ((:url . "https://github.com/noctuid/link-hint.el") (:keywords "url"))]) (link . [(20140717 2029) nil "Hypertext links in text buffers" single ((:keywords "interface" "hypermedia"))]) (lingr . [(20100807 1031) nil "Lingr Client for GNU Emacs" single ((:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet"))]) (light-soap-theme . [(20150607 745) ((emacs (24))) "Emacs 24 theme with a light background." single nil]) (lice . [(20151007 507) nil "License And Header Template" tar ((:url . "https://github.com/buzztaiki/lice-el") (:keywords "template" "license" "tools"))]) (libmpdee . [(20150131 1357) nil "Client end library for mpd, a music playing daemon" single ((:keywords "music" "mpd"))]) (lib-requires . [(20150104 1551) nil "Commands to list Emacs Lisp library dependencies." single ((:url . "http://www.emacswiki.org/lib-requires.el") (:keywords "libraries" "files"))]) (lfe-mode . [(20150904 1322) nil "Lisp Flavoured Erlang mode" tar nil]) (lexbind-mode . [(20141027 729) nil "Puts the value of lexical-binding in the mode line" single ((:url . "https://github.com/spacebat/lexbind-mode") (:keywords "convenience" "lisp"))]) (levenshtein . [(20051013 1056) nil "Edit distance between two strings." single ((:keywords "lisp"))]) (leuven-theme . [(20151019 156) nil "Awesome Emacs color theme on white background" single ((:url . "https://github.com/fniessen/emacs-leuven-theme") (:keywords "color" "theme"))]) (letcheck . [(20150726 912) nil "Check the erroneous assignments in let forms" single ((:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience"))]) (less-css-mode . [(20150511 319) nil "Major mode for editing LESS CSS files (lesscss.org)" single ((:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode"))]) (lentic-server . [(20150320 626) ((lentic (0 8)) (web-server (0 1 1))) "Web Server for Emacs Literate Source" single nil]) (lentic . [(20150625 1152) ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) "One buffer as a view of another" tar nil]) (lenlen-theme . [(20150307 11) ((color-theme-solarized (20150110))) "a solarized-based kawaii light theme" single ((:url . "http://hins11.yu-yake.com/"))]) (lemon-mode . [(20130216 504) nil "A major mode for editing lemon grammar files" single ((:keywords "lemon"))]) (legalese . [(20100119 1348) nil "Add legalese to your program files" single ((:keywords "convenience"))]) (leerzeichen . [(20151016 114) nil "Minor mode to display whitespace characters." single ((:url . "http://github.com/fgeller/leerzeichen.el") (:keywords "whitespace" "characters"))]) (ledger-mode . [(20151026 1542) nil "Helper code for use with the \"ledger\" command-line tool" tar nil]) (ldap-mode . [(20091203 1015) nil "major modes for editing LDAP schema and LDIF files" single ((:url . "http://www.loveshack.ukfsn.org/emacs") (:keywords "data"))]) (lavender-theme . [(20141115 2302) ((emacs (24 0))) "an Emacs 24 theme based on Lavender (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (launchctl . [(20150518 609) ((emacs (24 1))) "Interface to launchctl on Mac OS X." single ((:url . "http://github.com/pekingduck/launchctl-el") (:keywords "tools" "convenience"))]) (launch . [(20130619 1504) nil "launch files with OS-standard associated applications." single ((:url . "https://github.com/sfllaw/emacs-launch") (:keywords "convenience" "processes"))]) (latex-preview-pane . [(20151023 1303) nil "Makes LaTeX editing less painful by providing a updatable preview pane" tar nil]) (latex-pretty-symbols . [(20150409 240) nil "Display many latex symbols as their unicode counterparts" single ((:url . "https://bitbucket.org/mortiferus/latex-pretty-symbols.el") (:keywords "convenience" "display"))]) (latex-extra . [(20151027 519) nil "No description available." single nil]) (latest-clojure-libraries . [(20140314 617) nil "Clojure dependency resolver" single ((:url . "http://github.com/AdamClements/latest-clojure-libraries/"))]) (langtool . [(20150917 413) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" single ((:url . "https://github.com/mhayashi1120/Emacs-langtool") (:keywords "docs"))]) (langdoc . [(20150217 2245) ((cl-lib (0 2))) "Help to define help document mode for various languages" single ((:url . "https://github.com/tom-tan/langdoc/") (:keywords "convenience" "eldoc"))]) (lang-refactor-perl . [(20131122 1327) nil "Simple refactorings, primarily for Perl" single ((:url . "https://github.com/jplindstrom/emacs-lang-refactor-perl") (:keywords "languages" "refactoring" "perl"))]) (lacarte . [(20150104 1550) nil "Execute menu items as commands, with completion." single ((:url . "http://www.emacswiki.org/lacarte.el") (:keywords "menu-bar" "menu" "command" "help" "abbrev" "minibuffer" "keys" "completion" "matching" "local" "internal" "extensions"))]) (kwin . [(20150308 1112) nil "communicatewith the KWin window manager" single ((:url . "http://github.com/reactormonk/kwin-minor-mode"))]) (kv . [(20140108 734) nil "key/value data structure functions" single ((:keywords "lisp"))]) (kurecolor . [(20150423 2122) ((emacs (24 1)) (s (1 0))) "color editing goodies for Emacs" single nil]) (kroman . [(20150827 1640) nil "Korean hangul romanization" single ((:keywords "korean" "roman"))]) (kpm-list . [(20130131 148) nil "An emacs buffer list that tries to intelligently group together buffers." single ((:url . "https://github.com/KMahoney/kpm-list/"))]) (kolon-mode . [(20140122 334) nil "Syntax highlighting for Text::Xslate's Kolon syntax" single ((:url . "https://github.com/samvtran/kolon-mode") (:keywords "xslate" "perl"))]) (know-your-http-well . [(20140608 308) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar nil]) (kixtart-mode . [(20150611 904) ((emacs (24))) "major mode for Kixtart scripting files" single ((:url . "https://github.com/ryrun/kixtart-mode") (:keywords "languages"))]) (kivy-mode . [(20140524 557) nil "Emacs major mode for editing Kivy files" single nil]) (kite-mini . [(20150811 1129) ((dash (2 11 0)) (websocket (1 5))) "Remotely evaluate JavaScript in the WebKit debugger" single ((:url . "https://github.com/tungd/kite-mini.el") (:keywords "webkit"))]) (kite . [(20130201 1138) ((json (1 2)) (websocket (0 93 1))) "WebKit inspector front-end" tar ((:keywords "tools"))]) (killer . [(20120808 422) nil "kill and delete text" single ((:url . "http://github.com/tarsius/killer") (:keywords "convenience"))]) (kill-ring-search . [(20140422 855) nil "incremental search for the kill ring" single ((:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching"))]) (kill-or-bury-alive . [(20150905 540) ((emacs (24 4)) (cl-lib (0 5))) "Precise control over buffer killing in Emacs" single ((:url . "https://github.com/mrkkrp/kill-or-bury-alive") (:keywords "buffer" "killing" "convenience"))]) (kibit-helper . [(20150508 833) ((s (0 8)) (emacs (24))) "Conveniently use the Kibit Leiningen plugin from Emacs" single ((:url . "http://www.github.com/brunchboy/kibit-helper") (:keywords "languages" "clojure" "kibit"))]) (kfg . [(20140908 2238) ((f (0 17 1))) "an emacs configuration system" single ((:url . "https://github.com/abingham/kfg"))]) (keyword-search . [(20150911 232) nil "browser keyword search from Emacs" single ((:url . "https://github.com/juhp/keyword-search") (:keywords "web" "search" "keyword"))]) (keyset . [(20150219 2130) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single ((:url . "https://github.com/HKey/keyset"))]) (keymap-utils . [(20151008 1654) ((cl-lib (0 3))) "keymap utilities" single ((:url . "https://github.com/tarsius/keymap-utils") (:keywords "convenience" "extensions"))]) (keyfreq . [(20150924 2005) nil "track command frequencies" single nil]) (keydef . [(20090428 1231) nil "a simpler way to define keys, with kbd syntax" single ((:keywords "convenience" "lisp" "customization" "keyboard" "keys"))]) (keychain-environment . [(20150416 1258) nil "load keychain environment variables" single ((:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh"))]) (key-seq . [(20150907 56) ((key-chord (0 6))) "map pairs of sequentially pressed keys to commands" single ((:url . "http://github.com/vlevit/key-seq.el") (:keywords "convenience" "keyboard" "keybindings"))]) (key-intercept . [(20140210 2349) nil "Intercept prefix keys" single ((:url . "http://github.com/tarao/key-intercept-el") (:keywords "keyboard"))]) (key-combo . [(20150324 739) nil "map key sequence to commands" single ((:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input"))]) (key-chord . [(20150808 1005) nil "map pairs of simultaneously pressed keys to commands" single ((:keywords "keyboard" "chord" "input"))]) (kerl . [(20150424 1305) nil "Emacs integration for kerl" single ((:url . "http://github.com/correl/kerl.el/") (:keywords "tools"))]) (karma . [(20150120 2158) ((pkg-info (0 4)) (emacs (24))) "Karma Test Runner Emacs Integration" single ((:url . "http://github.com/tonini/karma.el") (:keywords "language" "javascript" "js" "karma" "testing"))]) (kanji-mode . [(20150202 25) nil "View stroke order for kanji characters at cursor" tar ((:url . "http://github.com/wsgac/kanji-mode "))]) (kanban . [(20150930 917) nil "Parse org-todo headlines to use org-tables as Kanban tables" single ((:keywords "outlines" "convenience"))]) (kakapo-mode . [(20150906 2152) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single ((:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation"))]) (kaesar-mode . [(20150220 305) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience"))]) (kaesar-file . [(20150130 804) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files"))]) (kaesar . [(20150220 305) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single ((:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data"))]) (jvm-mode . [(20150422 8) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single ((:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience"))]) (jump-to-line . [(20130122 853) nil "Jump to line number at point." single ((:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl"))]) (jump-char . [(20150108 1235) nil "navigation by char" single ((:url . "https://github.com/lewang/jump-char"))]) (jump . [(20151009 129) ((findr (0 7)) (inflections (1 1))) "build functions which contextually jump between files" single ((:url . "http://github.com/eschulte/jump.el/tree/master") (:keywords "project" "convenience" "navigation"))]) (jumblr . [(20140908 1352) ((s (1 8 0)) (dash (2 2 0))) "an anagram game for emacs" tar ((:url . "https://github.com/mkmcc/jumblr") (:keywords "anagram" "word game" "games"))]) (julia-shell . [(20150928 1001) ((julia-mode (0 3))) "Major mode for an inferior Julia shell" tar nil]) (julia-mode . [(20150912 800) nil "Major mode for editing Julia source code" single ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages"))]) (jtags . [(20111208 1022) nil "enhanced tags functionality for Java development" tar ((:url . "http://jtags.sourceforge.net") (:keywords "languages" "tools"))]) (jsx-mode . [(20130908 1024) nil "major mode for JSX" single ((:url . "https://github.com/jsx/jsx-mode.el"))]) (jst . [(20150604 438) ((s (1 9)) (f (0 17)) (dash (2 10)) (pcache (0 3)) (emacs (24 4))) "JS test mode" single ((:url . "https://github.com/cheunghy/jst-mode") (:keywords "js" "javascript" "jasmine" "coffee" "coffeescript"))]) (jss . [(20130508 723) ((emacs (24 1)) (websocket (0)) (js2-mode (0))) "An emacs interface to webkit and mozilla debuggers" tar ((:keywords "languages"))]) (json-snatcher . [(20150511 2047) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single ((:url . "http://github.com/sterlingg/json-snatcher"))]) (json-rpc . [(20150830 1401) ((emacs (24 1)) (cl-lib (0 5))) "JSON-RPC library" single ((:url . "https://github.com/skeeto/elisp-json-rpc"))]) (json-reformat . [(20151007 1728) nil "Reformatting tool for JSON" single ((:url . "https://github.com/gongo/json-reformat") (:keywords "json"))]) (json-mode . [(20150413 1948) ((json-reformat (20141009 1155)) (json-snatcher (20131110 1107))) "Major mode for editing JSON files" single ((:url . "https://github.com/joshwnj/json-mode"))]) (jsfmt . [(20150727 1525) nil "Interface to jsfmt command for javascript files" single ((:url . "https://github.com/brettlangdon/jsfmt.el"))]) (jscs . [(20151015 1049) ((emacs (24 1)) (cl-lib (0 5))) "Consistent JavaScript editing using JSCS" single ((:url . "https://github.com/papaeye/emacs-jscs") (:keywords "languages" "convenience"))]) (js3-mode . [(20150902 949) nil "An improved JavaScript editing mode" tar ((:keywords "javascript" "languages"))]) (js2-refactor . [(20150913 2126) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar nil]) (js2-mode . [(20151027 456) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar ((:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript"))]) (js2-highlight-vars . [(20150914 108) ((js2-mode (20150908))) "highlight occurrences of the variable under cursor" single ((:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode"))]) (js2-closure . [(20141027 1550) ((js2-mode (20140114))) "Google Closure dependency manager" single ((:url . "http://github.com/jart/js2-closure"))]) (js-doc . [(20131215 519) nil "Insert JsDoc style comment easily" single ((:url . "https://github.com/mooz/js-doc") (:keywords "document" "comment"))]) (js-comint . [(20080530 757) nil "Run javascript in an inferior process window." single ((:keywords "javascript" "inferior-mode" "convenience"))]) (jquery-doc . [(20150812 58) nil "jQuery api documentation interface for emacs" tar ((:keywords "docs" "jquery"))]) (jq-mode . [(20150902 305) ((emacs (24 3))) "Edit jq scripts." tar ((:url . "https://github.com/ljos/jq-mode"))]) (jonprl-mode . [(20150901 804) ((emacs (24 3)) (cl-lib (0 5)) (yasnippet (0 8 0))) "A major mode for editing JonPRL files" tar ((:keywords "languages"))]) (jknav . [(20121006 1325) nil "Automatically enable j/k keys for line-based navigation" single ((:keywords "keyboard" "navigation"))]) (jist . [(20150927 1118) ((emacs (24)) (cl-lib (0 5)) (magit (2 1 0)) (request (0 2 0)) (pkg-info (0 4))) "Manage gists from Emacs" single ((:url . "https://github.com/emacs-pe/jist.el") (:keywords "convenience"))]) (jira-markup-mode . [(20150601 1409) nil "Emacs Major mode for JIRA-markup-formatted text files" single ((:url . "https://github.com/mnuessler/jira-markup-mode") (:keywords "jira" "markup"))]) (jira . [(20131210 1022) nil "Connect to JIRA issue tracking software" single nil]) (jinja2-mode . [(20141128 207) nil "A major mode for jinja2" single nil]) (jg-quicknav . [(20150217 1828) ((s (1 9 0)) (cl-lib (0 5))) "Quickly navigate the file system to find a file." single ((:url . "https://github.com/jeffgran/jg-quicknav") (:keywords "navigation"))]) (jenkins-watch . [(20121004 1626) nil "Watch continuous integration build status" single ((:url . "https://github.com/ataylor284/jenkins-watch"))]) (jenkins . [(20151022 1125) ((dash (2 12)) (emacs (24 3)) (json (1 4))) "Minimalistic Jenkins client for Emacs" single ((:keywords "jenkins" "convenience"))]) (jekyll-modes . [(20141117 514) ((polymode (0 2))) "Major modes (markdown and HTML) for authoring Jekyll content" single ((:url . "https://github.com/fred-o/jekyll-modes") (:keywords "docs"))]) (jedi-direx . [(20140310 236) ((jedi (0 1 2)) (direx (0 1 -3))) "Tree style source code viewer for Python buffer" single nil]) (jedi-core . [(20151026 1948) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar nil]) (jedi . [(20150623 2335) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single nil]) (jdee . [(20151005 1237) ((emacs (24 3))) "Java Development Environment for Emacs" tar ((:url . "http://github.com/jdee-emacs/jdee") (:keywords "java" "tools"))]) (jbeans-theme . [(20151018 849) ((emacs (24))) "Jbeans theme for GNU Emacs 24 (deftheme)" single ((:url . "http://github.com/marktran/color-theme-ujelly"))]) (jazz-theme . [(20150910 844) nil "A warm color theme for Emacs 24." single ((:url . "https://github.com/donderom/jazz-theme"))]) (jaword . [(20150325 718) ((tinysegmenter (0 1))) "Minor-mode for handling Japanese words better" single ((:url . "http://hins11.yu-yake.com/"))]) (javap-mode . [(20120223 1408) nil "Javap major mode" single ((:url . "http://github.com/hiredman/javap-mode"))]) (javadoc-lookup . [(20150425 1003) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar ((:url . "https://github.com/skeeto/javadoc-lookup"))]) (java-snippets . [(20140727 2236) ((yasnippet (0 8 0))) "Yasnippets for Java" tar ((:url . "https://github.com/nekop/yasnippet-java-mode"))]) (jaunte . [(20130413 219) nil "Emacs Hit a Hint" single nil]) (jasminejs-mode . [(20150526 1705) nil "A minor mode for manipulating jasmine test files" tar ((:url . "https://github.com/stoltene2/jasminejs-mode") (:keywords "javascript" "jasmine"))]) (jar-manifest-mode . [(20150329 1533) nil "Major mode to edit JAR manifest files" single ((:url . "http://github.com/omajid/jar-manifest-mode") (:keywords "convenience" "languages"))]) (jape-mode . [(20140903 806) nil "An Emacs editing mode mode for GATE's JAPE files" single ((:url . "http://github.com/tanzoniteblack/jape-mode") (:keywords "languages" "jape" "gate"))]) (japanlaw . [(20150621 2141) nil "Japan law from law.e-gov.go.jp" single ((:keywords "docs" "help"))]) (japanese-holidays . [(20150208 1737) ((cl-lib (0 3))) "calendar functions for the Japanese calendar" single ((:url . "https://github.com/emacs-jp/japanese-holidays") (:keywords "calendar"))]) (jammer . [(20150914 125) nil "Punish yourself for using Emacs inefficiently" single ((:url . "https://github.com/wasamasa/jammer") (:keywords "games"))]) (jade-mode . [(20150801 944) nil "Major mode for editing .jade files" single ((:url . "https://github.com/brianc/jade-mode"))]) (jack-connect . [(20141207 407) nil "Manage jack connections within Emacs" single nil]) (jabber-otr . [(20150918 444) ((emacs (24)) (jabber (0 8 92))) "Off-The-Record messaging for jabber.el" tar ((:url . "https://github.com/legoscia/emacs-jabber-otr/") (:keywords "comm"))]) (jabber . [(20151025 1604) ((fsm (0 2))) "A Jabber client for Emacs." tar nil]) (j-mode . [(20140702 809) nil "Major mode for editing J programs" tar ((:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges"))]) (iy-go-to-char . [(20141029 849) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single ((:url . "https://github.com/doitian/iy-go-to-char") (:keywords "navigation" "search"))]) (ix . [(20131027 929) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single ((:url . "http://www.github.com/theanalyst/ix.el"))]) (ivs-edit . [(20140720 346) ((emacs (24 3)) (dash (2 6 0)) (cl-lib (1 0))) "IVS (Ideographic Variation Sequence) editing tool" tar ((:url . "http://github.com/kawabata/ivs-edit") (:keywords "text"))]) (ivariants . [(20140720 2127) ((emacs (24 3)) (ivs-edit (1 0))) "Ideographic variants editor and browser" tar ((:url . "http://github.com/kawabata/ivariants") (:keywords "i18n" "languages"))]) (iterator . [(20150321 2125) ((emacs (24)) (cl-lib (0 5))) "A library to create and use elisp iterators objects." single ((:url . "https://github.com/thierryvolpiatto/iterator"))]) (itail . [(20150301 2247) nil "An interactive tail mode" single ((:url . "https://github.com/re5et/itail") (:keywords "tail"))]) (iss-mode . [(20141001 1213) nil "Mode for InnoSetup install scripts" single nil]) (isgd . [(20150414 236) nil "Shorten URLs using the isgd.com shortener service" single ((:url . "https://github.com/chmouel/isgd.el"))]) (isend-mode . [(20130419 258) nil "Interactively send parts of an Emacs buffer to an interpreter" single ((:url . "https://github.com/ffevotte/isend-mode.el"))]) (isearch-symbol-at-point . [(20130728 1521) nil "Use isearch to search for the symbol at point" single ((:url . "https://github.com/re5et/isearch-symbol-at-point") (:keywords "isearch"))]) (isearch-prop . [(20150831 1406) nil "Search text-property or overlay-property contexts." single ((:url . "http://www.emacswiki.org/isearch-prop.el") (:keywords "search" "matching" "invisible" "thing" "help"))]) (isearch-dabbrev . [(20141223 2222) ((cl-lib (0 5))) "Use dabbrev in isearch" single ((:url . "https://github.com/Dewdrops/isearch-dabbrev") (:keywords "dabbrev" "isearch"))]) (isearch+ . [(20151026 1026) nil "Extensions to `isearch.el' (incremental search)." single ((:url . "http://www.emacswiki.org/isearch+.el") (:keywords "help" "matching" "internal" "local"))]) (irony-eldoc . [(20141226 2219) ((emacs (24)) (cl-lib (0 5)) (irony (0 1))) "irony-mode support for eldoc-mode" single ((:url . "https://github.com/ikirill/irony-eldoc") (:keywords "c" "c++" "objc" "convenience" "tools"))]) (irony . [(20151016 1420) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar ((:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools"))]) (irfc . [(20130824 507) nil "Interface for IETF RFC document." single ((:url . "http://www.emacswiki.org/emacs/download/irfc.el") (:keywords "rfc" "ietf"))]) (iregister . [(20150515 1407) nil "Interactive register commands for Emacs." tar ((:url . "https://github.com/atykhonov/iregister.el") (:keywords "convenience"))]) (ir-black-theme . [(20130302 2355) nil "Port of ir-black theme" single ((:keywords "faces"))]) (ipretty . [(20140406 2220) nil "Interactive Emacs Lisp pretty-printing" single ((:url . "https://github.com/steckerhalter/ipretty") (:keywords "pretty-print" "elisp" "buffer"))]) (iplayer . [(20150101 255) nil "Browse and download BBC TV/radio shows" single ((:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc"))]) (iodine-theme . [(20151020 930) ((emacs (24))) "A light emacs color theme" single ((:url . "https://github.com/srdja/iodine-theme") (:keywords "themes"))]) (ioccur . [(20130821 2248) nil "Incremental occur" single ((:url . "https://github.com/thierryvolpiatto/ioccur"))]) (io-mode-inf . [(20140128 1134) nil "Interaction with an Io interpreter." single ((:url . "https://github.com/slackorama/io-emacs") (:keywords "io" "languages"))]) (io-mode . [(20140814 321) nil "Major mode to edit Io language files in Emacs" single ((:url . "https://github.com/superbobry/io-mode") (:keywords "languages" "io"))]) (interval-tree . [(20130325 707) ((dash (1 1 0))) "Interval tree data structure for 1D range queries" single ((:url . "https://github.com/Fuco1/interval-tree") (:keywords "extensions" "data structure"))]) (interval-list . [(20150327 1018) ((dash (2 4 0)) (cl-lib (0 5)) (emacs (24 4))) "Interval list data structure for 1D selections" single ((:url . "https://github.com/Fuco1/interval-list") (:keywords "extensions" "data structure"))]) (interleave . [(20150527 730) nil "Interleaving text books since 2015" single ((:url . "https://github.com/rudolfochrist/interleave"))]) (interaction-log . [(20150603 1010) ((cl-lib (0))) "exhaustive log of interactions with Emacs" single ((:url . "https://github.com/michael-heerdegen/interaction-log.el") (:keywords "convenience"))]) (instapaper . [(20130104 621) nil "add URLs to instapaper from emacs" single ((:url . "htts://bitbucket.org/jfm/emacs-instapaper"))]) (insfactor . [(20141116 1602) nil "Client for a Clojure project with insfactor in it" single ((:url . "http://github.com/duelinmarkers/insfactor.el") (:keywords "clojure"))]) (insert-shebang . [(20141119 427) nil "Insert shebang line automatically." single ((:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience"))]) (inlineR . [(20120520 732) nil "insert Tag for inline image of R graphics" single ((:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el"))]) (inline-crypt . [(20130409 507) nil "Simple inline encryption via openssl" tar nil]) (inkpot-theme . [(20120505 708) nil "port of vim's inkpot theme" single ((:url . "http://github.com/siovan/emacs24-inkpot.git"))]) (initsplit . [(20141219 1629) nil "code to split customizations into different files" single ((:url . "http://www.gci-net.com/users/j/johnw/emacs.html") (:keywords "lisp"))]) (init-loader . [(20141030 2333) nil "Loader for configuration files" single ((:url . "https://github.com/emacs-jp/init-loader/"))]) (inform7-mode . [(20131009 2354) ((sws-mode (0 1))) "Major mode for editing Inform 7 source files" single ((:keywords "inform" "inform7" "interactive fiction"))]) (info+ . [(20150914 1436) nil "Extensions to `info.el'." single ((:url . "http://www.emacswiki.org/info+.el") (:keywords "help" "docs" "internal"))]) (inflections . [(20121016 157) nil "convert english words between singular and plural" single ((:url . "https://github.com/eschulte/jump.el") (:keywords "ruby" "rails" "languages" "oop"))]) (inf-ruby . [(20150926 1454) nil "Run a Ruby process in a buffer" single ((:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby"))]) (inf-php . [(20130414 21) ((php-mode (1 5 0))) "Run a php interactive shell in a buffer" single ((:url . "https://github.com/taksatou/inf-php") (:keywords "languages" "php"))]) (inf-mongo . [(20131216 228) nil "Run a MongoDB shell process in a buffer" single ((:url . "http://github.com/tobiassvn/inf-mongo") (:keywords "databases" "mongodb"))]) (inf-clojure . [(20151014 141) ((emacs (24 1)) (clojure-mode (4 0))) "an inferior-clojure mode" single ((:url . "http://github.com/clojure-emacs/inf-clojure") (:keywords "processes" "clojure"))]) (indy . [(20150610 1006) nil "A minor mode and EDSL to manage your mode's indentation rules." single ((:keywords "convenience" "matching" "tools"))]) (indicators . [(20130217 1405) nil "Display the buffer relative location of line in the fringe." single ((:url . "https://github.com/Fuco1/indicators.el") (:keywords "fringe" "frames"))]) (indent-guide . [(20150713 2327) nil "show vertical lines to guide indentation" single ((:url . "http://hins11.yu-yake.com/"))]) (import-popwin . [(20150716 233) ((popwin (0 6)) (cl-lib (0 5))) "popwin buffer near by import statements with popwin" single ((:url . "https://github.com/syohex/emacs-import-popwin"))]) (impatient-mode . [(20150501 247) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar ((:url . "https://github.com/netguy204/imp.el"))]) (immutant-server . [(20140311 1508) nil "Run your Immutant server in Emacs" single ((:url . "http://www.github.com/leathekd/immutant-server.el"))]) (imgur . [(20120307 225) ((anything (1 287))) "imgur client for Emacs" single ((:keywords "multimedia" "convenience"))]) (imgix . [(20141226 1332) ((json (1 2)) (ht (2 0)) (s (1 9 0)) (dash (2 9 0)) (cl-lib (0 5))) "Major mode for editing images in emacs via imgix" tar ((:keywords "images" "image processing" "image editing" "sepia" "blur"))]) (imenus . [(20150107 939) ((cl-lib (0 5))) "Imenu for multiple buffers" single ((:url . "https://gitorious.org/alezost-emacs/imenus") (:keywords "tools" "convenience"))]) (imenu-list . [(20150911 246) ((cl-lib (0 5))) "Show imenu entries in a seperate buffer" single ((:url . "https://github.com/bmag/imenu-list"))]) (imenu-anywhere . [(20150904 1742) ((cl-lib (0 5))) "ido/helm imenu tag selection across all buffers with the same mode" single ((:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags"))]) (imenu+ . [(20150104 1548) nil "Extensions to `imenu.el'." single ((:url . "http://www.emacswiki.org/imenu+.el") (:keywords "tools" "menus"))]) (imakado . [(20141024 223) nil "imakado's usefull macros and functions" single ((:url . "https://github.com/imakado/emacs-imakado") (:keywords "convenience"))]) (image-dired+ . [(20150429 2244) ((cl-lib (0 3))) "Image-dired extensions" single ((:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia"))]) (image-archive . [(20150218 2218) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single ((:url . "https://github.com/mhayashi1120/Emacs-image-archive/raw/master/image-archive.el") (:keywords "multimedia"))]) (image+ . [(20150707 916) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single ((:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions"))]) (igv . [(20141210 427) nil "Control Integrative Genomic Viewer within Emacs" single nil]) (igrep . [(20130824 507) nil "An improved interface to `grep` and `find`" single ((:keywords "tools" "processes" "search"))]) (ignoramus . [(20150216 1342) nil "Ignore backups, build files, et al." single ((:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools"))]) (iflipb . [(20141123 1316) nil "interactively flip between recently visited buffers" single ((:url . "http://git.rosdahl.net/?p=joel/iflipb.git"))]) (ietf-docs . [(20150928 257) nil "Fetch, Cache and Load IETF documents" single ((:url . "https://github.com/choppsv1/ietf-docs") (:keywords "ietf" "rfc"))]) (iedit . [(20150915 2022) nil "Edit multiple regions in the same way simultaneously." tar ((:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring"))]) (ids-edit . [(20141112 1642) ((emacs (24 3))) "IDS (Ideographic Description Sequence) editing tool" tar ((:url . "http://github.com/kawabata/ids-edit") (:keywords "text"))]) (idris-mode . [(20150930 257) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar ((:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages"))]) (idomenu . [(20141123 1320) nil "imenu tag selection a la ido" single nil]) (ido-yes-or-no . [(20140625 2106) nil "Use Ido to answer yes-or-no questions" single ((:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no"))]) (ido-vertical-mode . [(20151003 1833) nil "Makes ido-mode display vertically." single ((:url . "https://github.com/creichert/ido-vertical-mode.el") (:keywords "convenience"))]) (ido-ubiquitous . [(20151005 2131) ((emacs (24 1)) (ido-completing-read+ (3 0))) "Use ido (nearly) everywhere." single ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido"))]) (ido-springboard . [(20150505 1011) nil "Temporarily change default-directory for one command" single ((:url . "https://github.com/jwiegley/springboard") (:keywords "ido"))]) (ido-sort-mtime . [(20131117 530) nil "Sort Ido's file list by modification time" single ((:keywords "convenience" "files"))]) (ido-select-window . [(20131220 1247) ((emacs (24 1))) "Select a window using ido and buffer names" single ((:url . "https://github.com/pjones/ido-select-window"))]) (ido-occur . [(20150928 1443) ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) "Yet another `occur' with `ido'." single ((:url . "https://github.com/danil/ido-occur") (:keywords "inner" "buffer" "search"))]) (ido-occasional . [(20150214 448) ((emacs (24 1))) "Use ido where you choose." single ((:url . "https://github.com/abo-abo/ido-occasional") (:keywords "completion"))]) (ido-migemo . [(20150921 1544) ((migemo (1 9 1))) "Migemo plug-in for Ido" single ((:url . "https://github.com/myuhe/ido-migemo.el") (:keywords "files"))]) (ido-load-library . [(20140611 900) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single ((:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion"))]) (ido-hacks . [(20150331 1209) nil "Put more IDO in your IDO" single ((:keywords "convenience"))]) (ido-grid-mode . [(20151027 617) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single ((:url . "https://github.com/larkery/ido-grid-mode.el") (:keywords "convenience"))]) (ido-gnus . [(20140216 846) ((gnus (5 13))) "Access gnus groups or servers using ido" single ((:url . "https://github.com/vapniks/ido-gnus") (:keywords "comm"))]) (ido-exit-target . [(20150904 737) ((emacs (24 4))) "Commands and keys for selecting other window and frame targets within ido" single ((:url . "https://github.com/waymondo/ido-exit-target") (:keywords "convenience" "tools" "extensions"))]) (ido-describe-bindings . [(20150828 1238) ((ido-vertical-mode (1 0 0)) (dash (2 11 0))) "Yet another `describe-bindings' with `ido'." single ((:url . "https://github.com/danil/ido-describe-bindings") (:keywords "help"))]) (ido-completing-read+ . [(20151005 2131) ((emacs (24 1))) "A completing-read-function using ido" single ((:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "ido" "completion" "convenience"))]) (ido-complete-space-or-hyphen . [(20130228 208) nil "Complete SPACE or HYPHEN when type SPACE in ido" single ((:url . "https://github.com/doitian/ido-complete-space-or-hyphen") (:keywords "ido" "completion"))]) (ido-clever-match . [(20151011 1026) ((emacs (24 4)) (cl-lib (0 5))) "Alternative matcher for ido." single ((:url . "https://github.com/Bogdanp/ido-clever-match") (:keywords "ido" "flex"))]) (ido-at-point . [(20151021 57) ((emacs (24))) "ido-style completion-at-point" single ((:url . "https://github.com/katspaugh/ido-at-point") (:keywords "convenience" "abbrev"))]) (idle-require . [(20090715 1503) nil "load elisp libraries while Emacs is idle" single ((:url . "http://nschum.de/src/emacs/idle-require/") (:keywords "internal"))]) (idle-highlight-mode . [(20120920 948) nil "highlight the word the point is on" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience"))]) (identica-mode . [(20130204 1453) nil "Major mode API client for status.net open microblogging" tar ((:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web"))]) (id-manager . [(20150605 2039) nil "id-password management" single ((:keywords "password" "convenience"))]) (icomplete+ . [(20150619 803) nil "Extensions to `icomplete.el'." single ((:url . "http://www.emacswiki.org/icomplete+.el") (:keywords "help" "abbrev" "internal" "extensions" "local" "completion" "matching"))]) (icicles . [(20151015 1551) nil "Minibuffer input completion and cycling." tar ((:url . "http://www.emacswiki.org/icicles.el") (:keywords "extensions" "help" "abbrev" "local" "minibuffer" "projects" "keys" "apropos" "completion" "matching" "regexp" "command"))]) (ibuffer-vc . [(20150714 1320) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ((:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes"))]) (ibuffer-tramp . [(20150527 1335) nil "Group ibuffer's list by TRAMP connection" single ((:url . "http://github.com/svend/ibuffer-tramp") (:keywords "convenience"))]) (ibuffer-rcirc . [(20150215 1318) ((cl-lib (0 2))) "Ibuffer integration for rcirc" single ((:url . "https://github.com/fgallina/ibuffer-rcirc") (:keywords "buffer" "convenience" "comm"))]) (ibuffer-projectile . [(20150121 837) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single ((:url . "http://github.com/purcell/ibuffer-projectile") (:keywords "themes"))]) (ibuffer-git . [(20110508 31) nil "show git status in ibuffer column" single ((:keywords "convenience"))]) (iasm-mode . [(20131004 1644) nil "interactive assembly major mode." single ((:url . "https://github.com/RAttab/iasm-mode") (:keywords ":" "tools"))]) (i2b2-mode . [(20140709 1804) nil "Highlights corresponding PHI data in the text portion of an i2b2 XML Document." single ((:keywords "xml" "phi" "i2b2" "deidi2b2"))]) (hydra . [(20151019 233) ((cl-lib (0 5))) "Make bindings that stick around." tar ((:url . "https://github.com/abo-abo/hydra") (:keywords "bindings"))]) (hyde . [(20150615 1025) nil "Major mode to help create and manage Jekyll blogs" tar nil]) (hyai . [(20151024 1822) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single ((:url . "https://github.com/iquiw/hyai"))]) (hy-mode . [(20151025 543) nil "Major mode for Hy code" single ((:url . "http://github.com/hylang/hy-mode") (:keywords "languages" "lisp"))]) (hungry-delete . [(20141207 2125) nil "hungry delete minor mode" single ((:url . "http://github.com/nflath/hungry-delete"))]) (httprepl . [(20141101 1034) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single ((:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl"))]) (httpcode . [(20121001 2045) nil "explains the meaning of an HTTP status code" single ((:url . "http://github.com/rspivak/httpcode.el"))]) (http-twiddle . [(20121117 812) nil "send & twiddle & resend HTTP requests" single ((:url . "https://github.com/hassy/http-twiddle/blob/master/http-twiddle.el") (:keywords "http" "rest" "soap"))]) (http-post-simple . [(20131010 2058) nil "HTTP POST requests using the url library" single ((:keywords "comm" "data" "processes" "hypermedia"))]) (http . [(20150716 759) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "Yet another HTTP client" single ((:url . "https://github.com/emacs-pe/http.el") (:keywords "convenience"))]) (htmlize . [(20130207 1202) nil "Convert buffer text and decorations to HTML." single ((:keywords "hypermedia" "extensions"))]) (html-to-markdown . [(20131212 1441) nil "HTML to Markdown converter written in Emacs-lisp." single ((:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages"))]) (html-script-src . [(20120403 1115) nil "Insert <script src=\"..\"> for popular JavaScript libraries" single ((:url . "http://github.com/rejeep/html-script-src") (:keywords "tools" "convenience"))]) (ht . [(20150830 1115) nil "The missing hash table library for Emacs" single ((:keywords "hash table" "hash map" "hash"))]) (howdoi . [(20150203 1643) nil "Instant coding answers via Emacs." tar nil]) (how-many-lines-in-project . [(20140806 2142) nil "Calculate how many lines are there in your project." single ((:keywords "project" "convenience"))]) (hound . [(20150217 949) ((web (1 0)) (cl-lib (0 5))) "Display hound search results in a compilation window" single nil]) (hookify . [(20141216 1409) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience"))]) (homebrew-mode . [(20150910 2031) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single ((:url . "https://github.com/dunn/homebrew-mode") (:keywords "homebrew" "brew" "ruby"))]) (hoa-pp-mode . [(20151027 36) ((emacs (24 1)) (names (20150723 0))) "Major mode for Hoa PP grammars" single ((:url . "https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords "php" "hoa"))]) (hlinum . [(20150621 1933) ((cl-lib (0 2))) "Extension for linum.el to highlight current line number" single ((:url . "https://github.com/tom-tan/hlinum-mode/") (:keywords "convenience" "extensions"))]) (hl-todo . [(20151025 1220) nil "highlight TODO keywords" single ((:url . "http://github.com/tarsius/hl-todo") (:keywords "convenience"))]) (hl-spotlight . [(20150104 1424) nil "Extension of hl-line.el to spotlight current few lines." single ((:url . "http://www.emacswiki.org/hl-spotlight.el") (:keywords "highlight" "cursor" "accessibility"))]) (hl-sexp . [(20101130 443) nil "highlight the current sexp" single ((:keywords "faces" "frames" "emulation"))]) (hl-sentence . [(20140802 920) nil "highlight a sentence based on customizable face" single ((:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting"))]) (hl-line+ . [(20150104 1422) nil "Extensions to hl-line.el." single ((:url . "http://www.emacswiki.org/hl-line+.el") (:keywords "highlight" "cursor" "accessibility"))]) (hl-indent . [(20141227 1330) ((emacs (24)) (cl-lib (0 5))) "Highlight irregular indentation." single ((:url . "https://github.com/ikirill/hl-indent") (:keywords "convenience" "faces"))]) (hl-defined . [(20150104 1420) nil "Highlight defined or undefined symbols in Emacs-Lisp." single ((:url . "http://www.emacswiki.org/hl-defined.el") (:keywords "highlight" "lisp" "functions"))]) (hl-anything . [(20150219 531) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar nil]) (hiwin . [(20150825 127) nil "Visible active window mode." single ((:keywords "faces" "editing" "emulating"))]) (hive . [(20131217 712) ((sql (3 0))) "Hive SQL mode extension" single ((:keywords "sql" "hive"))]) (historyf . [(20131203 22) nil "file history library like browser" single ((:url . "https://github.com/k1LoW/emacs-historyf"))]) (history . [(20150409 1734) ((emacs (24 3))) "History utility for source code navigation" tar ((:url . "https://github.com/boyw165/history"))]) (hipster-theme . [(20141205 2005) nil "A low contrast color theme for Emacs." single ((:url . "http://github.com/xzerocode/hispter-theme"))]) (hippie-namespace . [(20140508 1341) nil "Special treatment for namespace prefixes in hippie-expand" single ((:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion"))]) (hippie-expand-slime . [(20130907 132) nil "Hook slime's completion into hippie-expand" single ((:url . "https://github.com/purcell/hippie-expand-slime"))]) (hippie-exp-ext . [(20151011 145) nil "Extension of hippie-expand" single ((:url . "http://www.emacswiki.org/emacs/download/hippie-exp-ext.el") (:keywords "abbrev" "convenience" "completions" "hippie-expand"))]) (hindent . [(20151025 936) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single ((:url . "https://github.com/chrisdone/hindent"))]) (highlight2clipboard . [(20151020 1140) ((htmlize (1 47))) "Copy text to clipboard with highlighting." tar ((:keywords "tools"))]) (highlight-unique-symbol . [(20130611 2242) ((deferred (0 3 2))) "highlight symbols which not appear in the repository" single ((:url . "https://github.com/hitode909/emacs-highlight-unique-symbol"))]) (highlight-thing . [(20151001 21) nil "Minimalistic minor mode to highlight current thing under point." single ((:url . "https://github.com/fgeller/highlight-thing.el") (:keywords "highlight" "thing" "symbol"))]) (highlight-tail . [(20140415 1841) nil "draw a colourful \"tail\" while you write" single ((:keywords "highlight" "tail" "eye-candy" "visual-effect" "light" "color" "burn"))]) (highlight-symbol . [(20151005 451) nil "automatic and manual symbol highlighting" single ((:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching"))]) (highlight-stages . [(20150421 2057) nil "highlight staged (quasi-quoted) expressions" single ((:url . "http://hins11.yu-yake.com/"))]) (highlight-quoted . [(20140916 1122) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single ((:url . "https://github.com/Fanael/highlight-quoted"))]) (highlight-parentheses . [(20150421 2328) nil "highlight surrounding parentheses" single ((:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching"))]) (highlight-numbers . [(20150531 607) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:url . "https://github.com/Fanael/highlight-numbers"))]) (highlight-indentation . [(20150307 208) nil "Minor modes for highlighting indentation" single ((:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs"))]) (highlight-escape-sequences . [(20150729 1910) nil "Highlight escape sequences" single ((:url . "https://github.com/dgutov/highlight-escape-sequences") (:keywords "convenience"))]) (highlight-defined . [(20141225 730) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single ((:url . "https://github.com/Fanael/highlight-defined"))]) (highlight-current-line . [(20051013 1056) nil "highlight line where the cursor is." single ((:keywords "faces"))]) (highlight-cl . [(20091012 1030) nil "Highlighting `cl' functions." single ((:url . "http://www.emacswiki.org/emacs/highlight-cl.el") (:keywords "faces"))]) (highlight-chars . [(20150630 1435) nil "Highlight specified sets of characters, including whitespace." single ((:url . "http://www.emacswiki.org/highlight-chars.el") (:keywords "highlight" "whitespace" "characters" "unicode"))]) (highlight-blocks . [(20150701 1106) ((emacs (24))) "Highlight the blocks point is in" single ((:url . "https://github.com/Fanael/highlight-blocks"))]) (highlight . [(20150818 1118) nil "Highlighting commands." single ((:url . "http://www.emacswiki.org/highlight.el") (:keywords "faces" "help" "local"))]) (hideshowvis . [(20130824 500) nil "Add markers to the fringe for regions foldable by hideshow.el" single nil]) (hideshow-org . [(20120223 1450) nil "Provides org-mode like hide and show for hideshow.el" single ((:keywords "c" "c++" "java" "lisp" "tools" "editing" "comments" "blocks" "hiding" "outlines" "org-mode"))]) (hide-region . [(20140201 314) nil "hide regions of text using overlays" single ((:url . "http://mathias.dahl.net/pgm/emacs/elisp/hide-region.el") (:keywords "hide" "region"))]) (hide-lines . [(20130824 507) nil "Commands for hiding lines based on a regexp" single ((:url . "https://github.com/vapniks/hide-lines") (:keywords "convenience"))]) (hide-comnt . [(20150801 920) nil "Hide/show comments in code." single ((:url . "http://www.emacswiki.org/hide-comnt.el") (:keywords "comment" "hide" "show"))]) (hi2 . [(20141005 1231) nil "indentation module for Haskell Mode" single ((:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell"))]) (hgignore-mode . [(20150412 1100) nil "a major mode for editing hgignore files" single ((:url . "http://github.com/omajid/hgignore-mode") (:keywords "convenience" "vc" "hg"))]) (hexrgb . [(20150708 1836) nil "Functions to manipulate colors, including RGB hex strings." single ((:url . "http://www.emacswiki.org/hexrgb.el") (:keywords "number" "hex" "rgb" "color" "background" "frames" "display"))]) (heroku-theme . [(20150522 1919) nil "Heroku color theme" single ((:url . "https://github.com/jonathanchu/color-theme-heroku"))]) (heroku . [(20120629 1113) nil "Interface to Heroku apps." single ((:url . "https://github.com/technomancy/heroku.el") (:keywords "convenience" "api" "database"))]) (hemisu-theme . [(20130508 1144) nil "Hemisu for Emacs." tar ((:url . "http://github/anrzejsliwa/django-theme"))]) (help-mode+ . [(20150104 1416) nil "Extensions to `help-mode.el'" single ((:url . "http://www.emacswiki.org/help-mode+.el") (:keywords "help"))]) (help-fns+ . [(20150909 838) nil "Extensions to `help-fns.el'." single ((:url . "http://www.emacswiki.org/help-fns+.el") (:keywords "help" "faces" "characters" "packages" "description"))]) (help+ . [(20150702 943) nil "Extensions to `help.el'." single ((:url . "http://www.emacswiki.org/help+.el") (:keywords "help"))]) (helm-zhihu-daily . [(20151006 119) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single ((:url . "https://github.com/xuchunyang/helm-zhihu-daily"))]) (helm-words . [(20150413 1318) nil "No description available." single nil]) (helm-wordnet . [(20150921 1433) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to local wordnet dictionary" single ((:url . "https://github.com/raghavgautam/helm-wordnet") (:keywords "dictionary" "wordnet" "emacs" "elisp" "helm"))]) (helm-w3m . [(20150722 824) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single nil]) (helm-w32-launcher . [(20141223 1214) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar ((:url . "https://github.com/Fanael/helm-w32-launcher"))]) (helm-unicode . [(20150428 1154) ((helm (1 6)) (emacs (24 4))) "Helm command for unicode characters." single nil]) (helm-themes . [(20151008 2321) ((helm-core (1 7 7))) "Color theme selection with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-themes"))]) (helm-swoop . [(20151022 1750) ((helm (1 0)) (emacs (24))) "Efficiently hopping squeezed lines powered by helm interface" single ((:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search"))]) (helm-spotify . [(20131014 1421) ((helm (0 0 0)) (multi (2 0 0))) "Control Spotify with Helm." single ((:url . "https://github.com/krisajenkins/helm-spotify") (:keywords "helm" "spotify"))]) (helm-spaces . [(20130605 900) ((helm (1 0)) (spaces (0 1 0))) "helm sources for spaces" single ((:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience"))]) (helm-sheet . [(20130630 539) ((helm (1 0))) "helm sources for sheet" single ((:url . "https://github.com/yasuyk/helm-sheet") (:keywords "helm" "sheet"))]) (helm-sage . [(20150827 2034) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) "A helm extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm"))]) (helm-rubygems-org . [(20140826 456) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm"))]) (helm-rubygems-local . [(20130711 1811) ((helm (1 5 3))) "Installed local rubygems find-file for helm" single ((:url . "https://github.com/f-kubotar/helm-rubygems-local"))]) (helm-robe . [(20140805 659) ((helm (1 0))) "completing read function for robe" single ((:url . "https://github.com/syohex/emacs-helm-robe"))]) (helm-rhythmbox . [(20150813 608) ((helm (1 5 0)) (cl-lib (0 5))) "control Rhythmbox's play queue via Helm" single ((:url . "https://github.com/mrBliss/helm-rhythmbox"))]) (helm-recoll . [(20130905 1822) ((helm (1 5 4))) "helm interface for the recoll desktop search tool." single ((:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience"))]) (helm-rb . [(20131123 839) ((helm (1 0)) (helm-ag-r (20131123))) "Search Ruby's method by ag and display helm" tar ((:url . "https://github.com/yuutayamada/helm-rb") (:keywords "searching" "ruby"))]) (helm-rails . [(20130424 819) ((helm (1 5 1)) (inflections (1 1))) "Helm extension for Rails projects." single ((:url . "https://github.com/asok/helm-rails") (:keywords "helm" "rails" "git"))]) (helm-pydoc . [(20151008 724) ((helm-core (1 7 4)) (cl-lib (0 5))) "pydoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-pydoc"))]) (helm-pt . [(20150308 1915) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar ((:keywords "helm" "platinum searcher"))]) (helm-prosjekt . [(20140128 2317) ((prosjekt (0 3)) (helm (1 5 9))) "Helm integration for prosjekt." single ((:url . "https://github.com/abingham/prosjekt"))]) (helm-projectile . [(20151021 248) ((helm (1 7 7)) (projectile (0 13 0)) (dash (1 5 0)) (cl-lib (0 3))) "Helm integration for Projectile" single ((:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience"))]) (helm-project-persist . [(20150612 910) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ((:keywords "project-persist" "project" "helm"))]) (helm-proc . [(20140504 157) ((helm (1 6 0))) "Helm interface for managing system processes" tar nil]) (helm-perldoc . [(20151008 727) ((helm-core (1 7 7)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar ((:url . "https://github.com/syohex/emacs-helm-perldoc"))]) (helm-pages . [(20150117 1433) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single ((:keywords "convenience" "helm" "outlines"))]) (helm-package . [(20140108 2223) ((helm (1 0)) (cl-lib (0 3))) "Listing ELPA packages with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-package"))]) (helm-orgcard . [(20151001 824) ((helm-core (1 7 7))) "browse the orgcard by helm" single ((:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org"))]) (helm-open-github . [(20151009 2331) ((helm-core (1 7 7)) (gh (0 8 2)) (cl-lib (0 5))) "Utilities of Opening Github Page" single ((:url . "https://github.com/syohex/emacs-helm-open-github"))]) (helm-nixos-options . [(20151013 1609) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (helm-mu . [(20151019 944) ((helm (1 5 5))) "Helm sources for searching emails and contacts" single ((:url . "https://github.com/emacs-helm/helm-mu"))]) (helm-mt . [(20150904 2219) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management." single ((:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term"))]) (helm-mode-manager . [(20140224 1504) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single ((:url . "https://github.com/istib/helm-mode-manager"))]) (helm-migemo . [(20151009 2056) ((emacs (24 4)) (helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single ((:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n"))]) (helm-make . [(20150915 9) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single ((:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile"))]) (helm-ls-svn . [(20150717 39) ((emacs (24 1)) (helm (1 7 0)) (cl-lib (0 5))) "helm extension to list svn files" single ((:url . "https://svn.macports.org/repository/macports/users/chunyang/helm-ls-svn.el/helm-ls-svn.el") (:keywords "helm" "svn"))]) (helm-ls-hg . [(20150908 2243) ((helm (1 7 8))) "List hg files in hg project." single nil]) (helm-ls-git . [(20151014 2208) ((helm (1 7 8))) "list git files." single nil]) (helm-lobsters . [(20150213 746) ((helm (1 0)) (cl-lib (0 5))) "helm front-end for lobste.rs" single ((:url . "https://github.com/julienXX/helm-lobste.rs"))]) (helm-jstack . [(20150602 2122) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to Jps & Jstack for Java/JVM processes" single ((:keywords "java" "jps" "jstack" "jvm" "emacs" "elisp" "helm"))]) (helm-j-cheatsheet . [(20131228 441) ((helm (1 5 3))) "Quick J reference for Emacs" single ((:url . "https://github.com/abo-abo/helm-j-cheatsheet"))]) (helm-itunes . [(20151012 2348) ((helm (1 6 1))) "Play local iTunes and Spotify tracks" single ((:url . "https://github.com/daschwa/helm-itunes"))]) (helm-idris . [(20141202 957) ((helm (0 0 0)) (idris-mode (0 9 14))) "A Helm datasource for Idris documentation, queried from the compiler" single ((:keywords "languages" "helm"))]) (helm-hoogle . [(20150919 221) ((helm (1 6 2)) (emacs (24 4))) "Use helm to navigate query results from Hoogle" single ((:url . "https://github.com/jwiegley/haskell-config") (:keywords "haskell" "programming" "hoogle"))]) (helm-helm-commands . [(20130902 1048) ((helm (1 5 4))) "List all helm commands with helm" single ((:url . "https://github.com/vapniks/helm-helm-commands") (:keywords "convenience"))]) (helm-hayoo . [(20151013 2351) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:keywords "helm"))]) (helm-hatena-bookmark . [(20150615 840) ((helm (1 6 9))) "Hatena::Bookmark with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark"))]) (helm-gtags . [(20151016 201) ((helm (1 5 6)) (cl-lib (0 5))) "GNU GLOBAL helm interface" single ((:url . "https://github.com/syohex/emacs-helm-gtags"))]) (helm-growthforecast . [(20140119 1944) ((helm (1 5 9))) "helm extensions for growthforecast." single ((:url . "https://github.com/daic-h/helm-growthforecast"))]) (helm-google . [(20141228 340) ((helm (0)) (google (0))) "Emacs Helm Interface for quick Google searches" single ((:url . "https://github.com/steckerhalter/helm-google") (:keywords "helm" "google" "search" "browse"))]) (helm-go-package . [(20150603 604) ((helm (1 0)) (go-mode (9)) (deferred (0 3 2))) "helm sources for Go programming language's package" single ((:url . "https://github.com/yasuyk/helm-go-package") (:keywords "helm" "go"))]) (helm-gitlab . [(20150604 33) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0))) "Helm interface to Gitlab" single ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm"))]) (helm-gitignore . [(20150517 2056) ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) "Generate .gitignore files with gitignore.io." single ((:url . "https://github.com/jupl/helm-gitignore") (:keywords "helm" "gitignore" "gitignore.io"))]) (helm-github-stars . [(20150625 1523) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single ((:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars"))]) (helm-git-grep . [(20140222 1822) ((helm (1 5 9))) "helm for git grep, an incremental git-grep(1)" single ((:url . "https://github.com/yasuyk/helm-git-grep") (:keywords "helm" "git"))]) (helm-git-files . [(20141212 517) ((helm (1 5 9))) "helm for git files" single ((:keywords "helm" "git"))]) (helm-git . [(20120630 1403) nil "Helm extension for Git." single ((:url . "https://github.com/maio/helm-git") (:keywords "helm" "git"))]) (helm-ghq . [(20150816 517) ((helm (1 7 6))) "ghq with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-ghq"))]) (helm-ghc . [(20141105 659) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:keywords "languages" "helm"))]) (helm-fuzzy-find . [(20150613 349) ((emacs (24 1)) (helm (1 7 0))) "Find file using Fuzzy Search" single ((:url . "https://github.com/xuchunyang/helm-fuzzy-find") (:keywords "helm" "fuzzy" "find" "file"))]) (helm-fuzzier . [(20151027 1203) ((emacs (24 3)) (helm (1 7 0))) "Better fuzzy matching for Helm" single ((:url . "http://github.com/EphramPerdition/helm-fuzzier") (:keywords "convenience" "helm" "fuzzy"))]) (helm-flyspell . [(20151026 912) ((helm (1 6 5))) "Helm extension for correcting words with flyspell" single nil]) (helm-flymake . [(20130716 2244) ((helm (1 0))) "helm interface for flymake" single ((:url . "https://github.com/tam17aki"))]) (helm-flycheck . [(20140915 752) ((dash (2 4 0)) (flycheck (0 20 -3)) (helm (1 5 7))) "Show flycheck errors with helm" single ((:url . "https://github.com/yasuyk/helm-flycheck") (:keywords "helm" "flycheck"))]) (helm-flx . [(20151027 1150) ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) "Sort helm candidates by flx score" single ((:url . "https://github.com/PythonNut/helm-flx") (:keywords "convenience" "helm" "fuzzy" "flx"))]) (helm-firefox . [(20150720 1118) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single ((:url . "https://github.com/emacs-helm/helm-firefox"))]) (helm-filesets . [(20140929 1135) ((helm (1 6 3)) (filesets+ (0))) "A helm source for emacs filesets" single ((:url . "https://github.com/gcla/helm-filesets") (:keywords "filesets"))]) (helm-emms . [(20151001 1328) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single nil]) (helm-emmet . [(20131013 2329) ((helm (1 0)) (emmet-mode (1 0 2))) "helm sources for emmet-mode's snippets" single ((:url . "https://github.com/yasuyk/helm-emmet") (:keywords "convenience" "helm" "emmet"))]) (helm-dirset . [(20141204 1552) ((f (0 16 2)) (helm (1 6 1)) (s (1 9 0))) "helm sources for multi directories" single ((:url . "http://101000lab.org") (:keywords "files" "directories"))]) (helm-dired-recent-dirs . [(20131228 614) ((helm (1 0))) "Show recent dirs with helm.el support." single ((:keywords "helm" "dired" "zsh"))]) (helm-dictionary . [(20141226 1136) ((helm (1 5 5))) "Helm source for looking up dictionaries" single ((:url . "https://github.com/emacs-helm/helm-dictionary"))]) (helm-descbinds . [(20151019 230) ((helm (1 5))) "Yet Another `describe-bindings' with `helm'." single ((:url . "https://github.com/emacs-helm/helm-descbinds") (:keywords "helm" "help"))]) (helm-dash . [(20151012 859) ((helm (0 0 0)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single ((:url . "http://github.com/areina/helm-dash") (:keywords "docs"))]) (helm-ctest . [(20150823 408) ((s (1 9 0)) (dash (2 11 0)) (helm-core (1 7 4))) "Run ctest from within emacs" single ((:keywords "helm" "ctest"))]) (helm-css-scss . [(20140626 1725) ((helm (1 0)) (emacs (24))) "CSS/SCSS/LESS Selectors with helm interface" single ((:url . "https://github.com/ShingoFukuyama/helm-css-scss") (:keywords "scss" "css" "less" "selector" "helm"))]) (helm-cscope . [(20150609 649) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single ((:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm"))]) (helm-core . [(20151024 2233) ((emacs (24)) (cl-lib (0 5)) (async (1 5))) "Development files for Helm" tar ((:url . "https://emacs-helm.github.io/helm/"))]) (helm-company . [(20150917 408) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single ((:url . "https://github.com/yasuyk/helm-company"))]) (helm-commandlinefu . [(20150610 2245) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single ((:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com"))]) (helm-cmd-t . [(20150823 1157) nil "cmd-t style completion" tar ((:url . "https://github.com/lewang/helm-cmd-t") (:keywords "helm" "project-management" "completion" "convenience" "cmd-t" "textmate"))]) (helm-circe . [(20150316 2244) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single ((:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe"))]) (helm-cider-history . [(20150719 1420) ((helm (1 4 0)) (cider (0 9 0))) "Helm interface for cider history" single ((:url . "https://github.com/Kungi/helm-cider-history") (:keywords "convenience"))]) (helm-chronos . [(20150528 1336) ((chronos (1 2)) (helm (1 7 1))) "helm interface for chronos timers" tar ((:url . "http://github.com/dxknight/helm-chronos") (:keywords "calendar"))]) (helm-chrome . [(20151014 2127) ((helm (1 5)) (cl-lib (0 3)) (emacs (24))) "Helm interface for Chrome bookmarks" single ((:url . "https://github.com/kawabata/helm-chrome") (:keywords "tools"))]) (helm-c-yasnippet . [(20151001 802) ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ((:keywords "convenience" "emulation"))]) (helm-c-moccur . [(20150213 1942) ((helm (20120811)) (color-moccur (2 71))) "helm source for color-moccur.el" single ((:keywords "convenience" "emulation"))]) (helm-bundle-show . [(20150816 526) ((helm (1 7 6))) "bundle show with helm interface" single ((:url . "https://github.com/masutaka/emacs-helm-bundle-show"))]) (helm-bm . [(20131224 705) ((bm (1 0)) (cl-lib (0 3)) (helm (1 5 7)) (s (1 8 0))) "helm sources for bm.el" single ((:url . "https://github.com/yasuyk/helm-bm") (:keywords "helm" "bookmark"))]) (helm-bind-key . [(20141108 2115) ((bind-key (1 0)) (helm (1 6 4))) "helm-source for for bind-key." single ((:keywords "convenience" "emulation"))]) (helm-bibtexkey . [(20140214 704) ((helm (1 5 8))) "Bibtexkey source for helm" tar ((:url . "https://github.com/kenbeese/helm-bibtexkey") (:keywords "bib" "tex"))]) (helm-bibtex . [(20151005 1108) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5))) "A BibTeX bibliography manager based on Helm" single nil]) (helm-backup . [(20150930 1804) ((helm (1 5 5)) (s (1 8 0))) "Backup each file change using git" single ((:url . "http://github.com/antham/helm-backup") (:keywords "backup"))]) (helm-aws . [(20141206 1208) ((helm (1 5 3))) "Manage AWS EC2 server instances directly from Emacs" single ((:url . "https://github.com/istib/helm-aws"))]) (helm-anything . [(20141126 231) ((helm (20130406)) (anything (20120101))) "Bridge between anything and helm" single ((:url . "http://www.emacswiki.org/emacs/download/helm-anything.el") (:keywords "helm" "anything" "convenience" "search" "tools"))]) (helm-ag-r . [(20131123 731) ((helm (1 0))) "Search something by ag and display by helm" single ((:url . "https://github.com/yuutayamada/helm-ag-r") (:keywords "searching"))]) (helm-ag . [(20151028 202) ((helm (1 7 7)) (cl-lib (0 5))) "the silver searcher with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ag"))]) (helm-ad . [(20140807 230) ((dash (2 8 0)) (helm (1 6 2))) "helm source for Active Directory" single ((:keywords "comm"))]) (helm-ack . [(20141030 526) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:url . "https://github.com/syohex/emacs-helm-ack"))]) (helm-R . [(20120819 1714) ((helm (20120517)) (ess (20120509))) "helm-sources and some utilities for GNU R." single ((:url . "https://github.com/myuhe/helm-R.el") (:keywords "convenience"))]) (helm . [(20151027 2239) ((emacs (24)) (cl-lib (0 5)) (async (1 5)) (helm-core (1 8 0))) "Helm is an Emacs incremental and narrowing framework" tar ((:url . "https://emacs-helm.github.io/helm/"))]) (headlong . [(20150417 826) nil "reckless completion" single ((:url . "https://github.com/abo-abo/headlong") (:keywords "completion"))]) (header2 . [(20150104 1410) nil "Support for creation and update of file headers." single ((:url . "http://www.emacswiki.org/header2.el") (:keywords "tools" "docs" "maint" "abbrev" "local"))]) (hcl-mode . [(20151002 2049) ((cl-lib (0 5))) "Major mode for Hashicorp" single ((:url . "https://github.com/syohex/emacs-hcl-mode"))]) (hc-zenburn-theme . [(20150928 933) nil "An higher contrast version of the Zenburn theme." single ((:url . "https:github.com/edran/hc-zenburn-emacs"))]) (hayoo . [(20140831 521) ((emacs (24)) (json (1 3))) "Query hayoo and show results in a tabulated buffer." single ((:url . "https://github.com/benma/hayoo.el/") (:keywords "hayoo" "haskell"))]) (haxe-mode . [(20131004 142) nil "An Emacs major mode for Haxe" single ((:url . "http://people.debian.org/~jps/misc/haxe-mode.el"))]) (haste . [(20141030 1334) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)" single ((:url . "http://github.com/rlister/emacs-haste-client"))]) (haskell-snippets . [(20150612 1239) ((yasnippet (0 8 0))) "Yasnippets for Haskell" tar ((:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell"))]) (haskell-mode . [(20151028 37) ((cl-lib (0 5))) "A Haskell editing mode" tar nil]) (haskell-emacs-text . [(20150713 716) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar ((:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs-base . [(20150714 859) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar ((:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs . [(20151004 1030) nil "Write emacs extensions in haskell" tar ((:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi"))]) (hardhat . [(20140827 1856) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ((:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience"))]) (hardcore-mode . [(20111204 2216) nil "Disable arrow keys + optionally backspace and return" single ((:keywords "marking" "region"))]) (handoff . [(20150916 2300) nil "Get your hand off that mouse, damn it!" single ((:url . "http://github.com/rejeep/handoff.el"))]) (handlebars-sgml-mode . [(20130623 1633) nil "Add Handlebars contextual indenting support to sgml-mode" single ((:url . "http://github.com/jacott/handlebars-sgml-mode"))]) (handlebars-mode . [(20150211 949) nil "A major mode for editing Handlebars files." single nil]) (hamlet-mode . [(20131207 2324) ((cl-lib (0 3)) (dash (2 3 0)) (s (1 7 0))) "Hamlet editing mode" single ((:url . "https://github.com/lightquake/hamlet-mode") (:keywords "wp" "languages" "comm"))]) (haml-mode . [(20150508 2011) ((ruby-mode (1 0))) "Major mode for editing Haml files" single ((:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html"))]) (ham-mode . [(20150811 606) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single ((:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp"))]) (hackernews . [(20150901 817) ((json (1 2))) "Access the hackernews aggregator from Emacs" tar nil]) (gvpr-mode . [(20131208 918) nil "A major mode offering basic syntax coloring for gvpr scripts." single ((:url . "https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el") (:keywords "graphviz" "gv" "dot" "gvpr" "graph"))]) (guru-mode . [(20151027 2228) nil "Become an Emacs guru" single ((:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience"))]) (guide-key-tip . [(20140406 1820) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip"))]) (guide-key . [(20150107 2235) ((dash (2 10 0)) (popwin (0 3 0)) (s (1 9 0))) "Guide the following key bindings automatically and dynamically" single ((:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience"))]) (gscholar-bibtex . [(20151022 1025) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single ((:keywords "extensions"))]) (gs-mode . [(20141026 235) nil "Major mode for editing GrADS script files" single ((:keywords "grads" "script" "major-mode"))]) (gruvbox-theme . [(20150729 341) nil "A retro-groove colour theme for Emacs" single ((:url . "http://github.com/Greduan/emacs-theme-gruvbox"))]) (grunt . [(20151009 52) ((dash (2 9 0)) (ansi-color (3 4 2))) "Some glue to stick Emacs and Gruntfiles together" single ((:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt"))]) (gruber-darker-theme . [(20151018 2310) nil "Gruber Darker color theme for Emacs 24." single ((:url . "http://github.com/rexim/gruber-darker-theme"))]) (groovy-mode . [(20150725 1050) nil "Major mode for Groovy source files" tar ((:keywords "languages"))]) (grizzl . [(20150711 2230) ((cl-lib (0 5)) (emacs (24 3))) "Fast fuzzy search index for Emacs." single ((:url . "https://github.com/grizzl/grizzl") (:keywords "convenience" "usability"))]) (grin . [(20110805 2358) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find"))]) (greymatters-theme . [(20150621 423) ((emacs (24))) "Emacs 24 theme with a light background." single nil]) (grep-a-lot . [(20131006 647) nil "manages multiple search results buffers for grep.el" single ((:url . "https://github.com/ZungBang/emacs-grep-a-lot") (:keywords "tools" "convenience" "search"))]) (grep+ . [(20150104 1410) nil "Extensions to standard library `grep.el'." single ((:url . "http://www.emacswiki.org/grep+.el") (:keywords "tools" "processes" "compile"))]) (gregorio-mode . [(20151026 720) nil "Gregorio Mode for .gabc files" single ((:url . "http://chant.fsspx.pl/gregorio-mode/docs/") (:keywords "gregorio" "chant"))]) (green-phosphor-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single ((:url . "http://github.com/aalpern/emacs-color-theme-green-phosphor") (:keywords "color" "theme"))]) (grass-mode . [(20150414 1044) ((cl-lib (0 2)) (dash (2 8 0))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(20131001 834) nil "HTTP request lib with flexible callback dispatch" single ((:url . "http://www.github.com/leathekd/grapnel"))]) (graphviz-dot-mode . [(20151010 2359) nil "Mode for the dot-language used by graphviz (att)." single ((:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att"))]) (graphene . [(20150704 619) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 4)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 6 3)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar nil]) (grandshell-theme . [(20150404 501) nil "Dark color theme for Emacs > 24 with intensive colors." tar nil]) (grails-projectile-mode . [(20141229 1129) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar ((:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile"))]) (grails-mode . [(20141024 949) nil "minor-mode that adds some Grails project management to a grails project" single ((:url . "http://blog.wolfman.com"))]) (gradle-mode . [(20150313 1205) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle"))]) (gplusify . [(20150312 1244) nil "Add Google Plus markup to a piece of code" single ((:url . "https://github.com/jorgenschaefer/gplusify"))]) (govet . [(20150428 1159) nil "linter/problem finder for the Go source code" single ((:url . "https://godoc.org/golang.org/x/tools/cmd/vet"))]) (goto-last-change . [(20150109 1023) nil "Move point through buffer-undo-list positions" single ((:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience"))]) (goto-gem . [(20140729 1145) ((s (1 9 0))) "Open dired in gem directory" single ((:keywords "gemfile" "convenience"))]) (goto-chg . [(20131228 659) nil "goto last change" single ((:keywords "convenience" "matching"))]) (gotham-theme . [(20151009 1505) nil "A very dark Emacs color theme." single ((:url . "https://github.com/wasamasa/gotham-theme"))]) (gotest . [(20151009 555) ((emacs (24 3)) (s (1 9 0)) (f (0 17 2)) (go-mode (1 0 0))) "Launch GO unit tests" single ((:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests"))]) (gorepl-mode . [(20151023 755) ((emacs (24))) "Go REPL Interactive Development in top of Gore" single ((:url . "http://www.github.com/manute/gorepl-mode") (:keywords "languages" "go" "golang" "gorepl"))]) (gore-mode . [(20131027 2227) nil "Simple mode for gore, a command-line evaluator for golang." single ((:keywords "go" "repl"))]) (google-translate . [(20151016 1220) nil "Emacs interface to Google Translate." tar nil]) (google-this . [(20150522 240) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia"))]) (google-maps . [(20130412 230) nil "Access Google Maps from Emacs" tar ((:keywords "comm"))]) (google-contacts . [(20140530 233) ((oauth2 (0 10))) "Support for Google Contacts in Emacs" tar ((:url . "http://julien.danjou.info/projects/emacs-packages#google-contacts") (:keywords "comm"))]) (google-c-style . [(20140929 1118) nil "Google's C/C++ style for c-mode" single ((:keywords "c" "tools"))]) (google . [(20140330 856) nil "Emacs interface to the Google API" single ((:keywords "comm" "processes" "tools"))]) (gom-mode . [(20131007 1953) nil "Major mode for Gomfile" single ((:url . "https://github.com/syohex/emacs-gom-mode"))]) (golint . [(20150414 1730) nil "lint for the Go source code" single ((:url . "https://github.com/golang/lint"))]) (golden-ratio . [(20150819 420) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:keywords "window" "resizing"))]) (gold-mode . [(20140606 1906) ((sws-mode (0))) "Major mode for editing .gold files" single ((:url . "https://github.com/yuutayamada/gold-mode-el") (:keywords "golang" "template" "gold"))]) (god-mode . [(20151005 925) nil "God-like command entering minor mode" tar ((:url . "https://github.com/chrisdone/god-mode"))]) (go-stacktracer . [(20150430 1442) nil "parse Go stack traces" single ((:url . "https://github.com/samertm/go-stacktracer.el") (:keywords "tools"))]) (go-snippets . [(20130821 844) ((yasnippet (0 8 0))) "Yasnippets for go" tar nil]) (go-scratch . [(20150809 2140) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single ((:keywords "languages" "go"))]) (go-rename . [(20151027 638) ((go-mode (1 3 1))) "Integration of the 'gorename' tool into Emacs." single ((:keywords "tools"))]) (go-projectile . [(20151026 1135) ((projectile (0 10 0)) (go-mode (0)) (go-eldoc (0 16)) (go-rename (0))) "Go add-ons for Projectile" single ((:url . "https://github.com/dougm/go-projectile") (:keywords "project" "convenience"))]) (go-playground . [(20151024 1650) ((emacs (24)) (go-mode (1 0 0)) (gotest (0 40 0))) "Local Golang playground for short snippets." single ((:url . "https://github.com/grafov/go-playground") (:keywords "tools" "golang"))]) (go-play . [(20120914 1248) nil "Paste to play.golang.org" single nil]) (go-mode . [(20150817 2318) nil "Major mode for the Go programming language" tar ((:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go"))]) (go-errcheck . [(20150828 1135) nil "errcheck integration for go-mode" single nil]) (go-eldoc . [(20151028 10) ((go-mode (1 0 0)) (cl-lib (0 5))) "eldoc for go-mode" single ((:url . "https://github.com/syohex/emacs-go-eldoc"))]) (go-dlv . [(20151027 1136) nil "Go Delve - Debug Go programs interactively with the GUD." single ((:url . "https://github.com/benma/go-dlv.el/") (:keywords "go" "debug" "debugger" "delve" "interactive" "gud"))]) (go-direx . [(20150315 1843) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:url . "https://github.com/syohex/emacs-go-direx"))]) (go-complete . [(20151015 228) ((go-mode (0)) (cl-lib (0 5))) "Native code completion for Go" single ((:url . "https://github.com/vibhavp/go-complete") (:keywords "go" "golang" "completion"))]) (go-autocomplete . [(20150903 1940) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ((:keywords "languages"))]) (gnus-x-gm-raw . [(20140610 31) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus"))]) (gnus-summary-ext . [(20150119 1833) nil "Extra limit and process mark commands for the gnus summary buffer" single ((:url . "https://github.com/vapniks/gnus-summary-ext") (:keywords "comm"))]) (gnus-spotlight . [(20130901 735) nil "Search mail with Spotlight" single ((:keywords "mail" "searching" "spotlight"))]) (gnus-desktop-notify . [(20150703 654) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:url . "http://www.thregr.org/~wavexx/software/gnus-desktop-notify.el/"))]) (gnus-alias . [(20150315 1742) nil "an alternative to gnus-posting-styles" single ((:keywords "personality" "identity" "news" "mail" "gnus"))]) (gnuplot-mode . [(20131203 2159) nil "Major mode for editing gnuplot scripts" single ((:url . "https://github.com/mkmcc/gnuplot") (:keywords "gnuplot" "plotting"))]) (gnuplot . [(20141231 1337) nil "drive gnuplot from within emacs" tar ((:keywords "gnuplot" "plotting"))]) (gnu-apl-mode . [(20150625 2044) ((emacs (24))) "Integrate GNU APL with Emacs" tar ((:keywords "languages" "apl") (:url . "https://github.com/lokedhs/gnu-apl-mode"))]) (gntp . [(20141024 1950) nil "Growl Notification Protocol for Emacs" single nil]) (gnomenm . [(20150316 1218) ((s (1 9 0)) (dash (2 3 0)) (kv (0 0 19))) "Emacs interface to Gnome nmcli command" single ((:url . "http://github.com/nicferrier/emacs-nm") (:keywords "processes" "hardware"))]) (gnome-calendar . [(20140112 359) nil "Integration with the GNOME Shell calendar" single ((:keywords "gnome" "calendar"))]) (gmail2bbdb . [(20150909 1839) nil "import email and name into bbdb from vcard." single ((:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail"))]) (gmail-message-mode . [(20140815 816) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation"))]) (glsl-mode . [(20150114 833) nil "major mode for Open GLSL shader files" single ((:url . "http://artis.inrialpes.fr/~Xavier.Decoret/resources/glsl-mode/") (:keywords "languages"))]) (gitty . [(20121014 742) nil "vc-mode extension for fast git interaction" single ((:url . "https://github.com/jorgenschaefer/gitty") (:keywords "vc"))]) (gitolite-clone . [(20150819 639) ((dash (2 10 0)) (s (1 9 0)) (pcache (0 3 1)) (emacs (24))) "Clone gitolite repositories from a completing list" single ((:url . "https://github.com/IvanMalison/gitolite-clone") (:keywords "gitolite" "clone" "git"))]) (gitlab . [(20151012 752) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab"))]) (gitignore-mode . [(20150330 1048) nil "Major mode for editing .gitignore files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (github-clone . [(20150705 1705) ((gh (0 7 2)) (magit (2 1 0)) (emacs (24 4))) "Fork and clone github repos" single ((:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools"))]) (github-browse-file . [(20150805 1419) ((cl-lib (0 5))) "View the file you're editing on GitHub" single ((:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github"))]) (gitconfig-mode . [(20150330 1048) nil "Major mode for editing .gitconfig files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (gitconfig . [(20130718 235) nil "Emacs lisp interface to work with git-config variables" single ((:keywords "git" "gitconfig" "git-config"))]) (gitattributes-mode . [(20150330 1048) nil "Major mode for editing .gitattributes files" single ((:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (git-wip-timemachine . [(20150408 306) ((s (1 9 0))) "Walk through git-wip revisions of a file" single ((:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git"))]) (git-timemachine . [(20151004 2229) nil "Walk through git revisions of a file" single ((:url . "https://github.com/pidu/git-timemachine") (:keywords "git"))]) (git-ps1-mode . [(20150421 2101) nil "Global minor-mode to print __git_ps1" single ((:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git"))]) (git-messenger . [(20150314 602) ((popup (0 5 0)) (cl-lib (0 5))) "Pop up last commit information of current line" single ((:url . "https://github.com/syohex/emacs-git-messenger"))]) (git-link . [(20150927 1025) nil "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single ((:url . "http://github.com/sshaw/git-link") (:keywords "git"))]) (git-lens . [(20150817 14) ((emacs (24 4))) "Show new, deleted or modified files in branch" single ((:keywords "vc" "convenience"))]) (git-gutter-fringe . [(20150331 2139) ((git-gutter (0 82)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:url . "https://github.com/syohex/emacs-git-gutter-fringe"))]) (git-gutter-fringe+ . [(20140729 403) ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) "Fringe version of git-gutter+.el" single ((:url . "https://github.com/nonsequitur/git-gutter-fringe-plus"))]) (git-gutter . [(20150915 50) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single ((:url . "https://github.com/syohex/emacs-git-gutter"))]) (git-gutter+ . [(20150925 231) ((git-commit (0)) (dash (0))) "Manage Git hunks straight from the buffer" single ((:url . "https://github.com/nonsequitur/git-gutter-plus") (:keywords "git" "vc"))]) (git-dwim . [(20130130 1350) nil "Context-aware git commands such as branch handling" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el") (:keywords "git" "tools" "convenience"))]) (git-commit-insert-issue . [(20151008 1303) ((helm (0)) (projectile (0)) (s (0))) "Get issues list when typing \"Fixes #\"" tar ((:url . "https://gitlab.com/emacs-stuff/git-commit-insert-issue/") (:keywords "git" "commit" "issues"))]) (git-commit . [(20151022 933) ((emacs (24 4)) (dash (20151021 113)) (with-editor (20151022))) "Edit Git commit messages" single ((:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc"))]) (git-blame . [(20110509 926) nil "Minor mode for incremental blame for Git" single ((:keywords "git" "version control" "release management"))]) (git-auto-commit-mode . [(20150404 751) nil "Emacs Minor mode to automatically commit and push" single ((:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc"))]) (git-annex . [(20131119 1445) nil "Mode for easy editing of git-annex'd files" single ((:url . "https://github.com/jwiegley/git-annex-el") (:keywords "files" "data" "git" "annex"))]) (git . [(20140128 241) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:url . "http://github.com/rejeep/git.el") (:keywords "git"))]) (gist . [(20150906 954) ((emacs (24 1)) (gh (0 9 2))) "Emacs integration for gist.github.com" single ((:url . "https://github.com/defunkt/gist.el") (:keywords "tools"))]) (gildas-mode . [(20150919 1501) ((polymode (0)) (emacs (24 3))) "Major mode for Gildas" single ((:url . "https://github.com/smaret/gildas-mode") (:keywords "languages" "gildas"))]) (gherkin-mode . [(20140107 804) nil "An emacs major mode for editing gherkin files." single ((:keywords "languages"))]) (ghci-completion . [(20140316 2331) ((emacs (24 1))) "Completion for GHCi commands in inferior-haskell buffers" single ((:keywords "convenience"))]) (ghc-imported-from . [(20141124 1132) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single ((:keywords "languages"))]) (ghc . [(20151013 1219) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar nil]) (gh-md . [(20150902 623) ((emacs (24))) "Render markdown using the Github api" single ((:url . "https://github.com/emacs-pe/gh-md.el") (:keywords "convenience"))]) (gh . [(20150906 848) ((emacs (24 4)) (pcache (0 3 1)) (logito (0 1))) "A GitHub library for Emacs" tar nil]) (ggtags . [(20150814 842) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience"))]) (ggo-mode . [(20130524 443) nil "Gengetopt major mode" single ((:keywords "extensions" "convenience" "local"))]) (gerrit-download . [(20150714 708) ((emacs (24 0)) (magit (2 1 0))) "Show gerrit reviews in a diff buffer." single ((:url . "https://github.com/chmouel/gerrit-download.el") (:keywords "tools" "gerrit" "git"))]) (german-holidays . [(20150325 1144) nil "German holidays for Emacs calendar" single ((:url . "https://github.com/rudolfochrist/german-holidays"))]) (genrnc . [(20140612 537) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml"))]) (general-close . [(20150922 13) nil "Insert closing delimiter" tar ((:keywords "languages" "lisp"))]) (geiser . [(20151020 1729) nil "GNU Emacs and Scheme talk to each other" tar nil]) (geeknote . [(20150223 815) ((emacs (24))) "Use Evernote in Emacs through geeknote" single ((:url . "http://github.com/avendael/emacs-geeknote") (:keywords "evernote" "geeknote" "note" "emacs-evernote" "evernote-mode"))]) (geben . [(20100330 343) nil "DBGp protocol frontend, a script debugger" tar ((:url . "http://code.google.com/p/geben-on-emacs/") (:keywords "dbgp" "debugger" "php" "xdebug" "perl" "python" "ruby" "tcl" "komodo"))]) (gather . [(20141230 538) nil "Gather string in buffer." single ((:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools"))]) (gap-mode . [(20140913 1258) nil "Major mode for editing files in the GAP programing language." tar ((:url . "https://bitbucket.org/gvol/gap-mode") (:keywords "gap"))]) (gandalf-theme . [(20130809 247) nil "Gandalf color theme" single ((:keywords "color" "theme"))]) (fzf . [(20151027 2046) ((emacs (24 4))) "A front-end for fzf." single ((:url . "https://github.com/bling/fzf.el") (:keywords "fzf" "fuzzy" "search"))]) (fyure . [(20130216 514) nil "An interface to fix Japanese hyoki-yure" tar ((:keywords "languages"))]) (fwb-cmds . [(20131209 1600) nil "misc frame, window and buffer commands" single ((:url . "http://github.com/tarsius/fwb-cmds") (:keywords "convenience"))]) (fvwm-mode . [(20141105 2036) nil "major mode for editing Fvwm configuration files" single ((:keywords "files"))]) (fuzzy-match . [(20150104 1409) nil "fuzzy matching" single ((:url . "http://www.emacswiki.org/fuzzy-match.el") (:keywords "matching" "completion" "string"))]) (fuzzy-format . [(20130824 500) nil "select indent-tabs-mode and format code automatically." single ((:url . "http://code.101000lab.org, http://trac.codecheck.in"))]) (fuzzy . [(20150729 2037) nil "Fuzzy Matching" single ((:keywords "convenience"))]) (furl . [(20110112 1707) nil "Friendly URL retrieval" single nil]) (function-args . [(20151022 551) ((swiper (0 2 0))) "C++ completion for GNU Emacs" tar ((:url . "https://github.com/abo-abo/function-args"))]) (fullframe . [(20140619 305) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single ((:keywords "fullscreen"))]) (full-ack . [(20140223 932) nil "a front-end for ack" single ((:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching"))]) (fuel . [(20151014 1741) ((cl-lib (0 2)) (emacs (24 2))) "Major mode for the Factor programming language." tar nil]) (fstar-mode . [(20151023 753) ((emacs (24 3)) (cl-lib (0 3)) (dash (2 11))) "Support for F* programming" single ((:url . "https://github.com/FStarLang/fstar.el") (:keywords "convenience" "languages"))]) (fsharp-mode . [(20151024 419) ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) "F# mode for Emacs" tar nil]) (fringe-helper . [(20140620 1409) nil "helper functions for fringe bitmaps" single ((:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp"))]) (fringe-current-line . [(20140110 2011) nil "show current line on the fringe." single ((:url . "http://github.com/kyanagi/fringe-current-line/raw/master/fringe-current-line.el"))]) (free-keys . [(20140309 1051) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single ((:url . "https://github.com/Fuco1/free-keys") (:keywords "convenience"))]) (framesize . [(20131017 1432) ((key-chord (0 5 20080915))) "change the size of frames in Emacs" single ((:url . "http://github.com/nicferrier/emacs-framesize") (:keywords "frames"))]) (framemove . [(20130328 433) nil "directional frame selection routines" single ((:keywords "frame" "movement" "convenience"))]) (frame-tag . [(20120527 136) nil "Minor mode that assigns a unique number to each frame for easy switching" single ((:url . "http://github.com/liangzan/frame-tag.el") (:keywords "frame" "movement"))]) (frame-restore . [(20140811 1409) ((emacs (24 1))) "Restore Emacs frame" single ((:url . "https://github.com/lunaryorn/frame-restore.el") (:keywords "frames" "convenience"))]) (frame-fns . [(20150104 1408) nil "Non-interactive frame and window functions." single ((:url . "http://www.emacswiki.org/frame-fns.el") (:keywords "internal" "extensions" "local" "frames"))]) (frame-cmds . [(20150814 752) ((frame-fns (0))) "Frame and window commands (interactive functions)." single ((:url . "http://www.emacswiki.org/frame-cmds.el") (:keywords "internal" "extensions" "mouse" "frames" "windows" "convenience"))]) (fountain-mode . [(20150618 116) ((s (1 9 0))) "Major mode for screenwriting in Fountain markup" single ((:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp"))]) (fortpy . [(20150715 1332) ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2)) (pos-tip (0 4 5))) "a Fortran auto-completion for Emacs" tar nil]) (format-sql . [(20150422 633) nil "Use format-sql to make your SQL readable in directly Emacs." single ((:url . "https://github.com/paetzke/format-sql.el"))]) (form-feed . [(20150926 556) nil "Display ^L glyphs as horizontal lines" single ((:url . "https://github.com/wasamasa/form-feed") (:keywords "faces"))]) (foreman-mode . [(20150611 156) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single ((:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman"))]) (foreign-regexp . [(20140823 1742) nil "search and replace by foreign regexp." tar ((:keywords "convenience" "emulations" "matching" "tools" "unix" "wp"))]) (forecast . [(20151023 1652) ((emacs (24 4))) "Display a forecast.io weather report in a buffer" single ((:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast"))]) (fontawesome . [(20150615 2239) ((helm (1 7 2)) (cl-lib (0 5))) "fontawesome utility" tar ((:url . "https://github.com/syohex/emacs-fontawesome"))]) (font-utils . [(20150806 1051) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ((:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions"))]) (font-lock-studio . [(20141201 1658) ((emacs (24 3))) "interactive debugger for Font Lock keywords." single ((:url . "https://github.com/Lindydancer/font-lock-studio") (:keywords "faces" "tools"))]) (font-lock+ . [(20150104 1405) nil "Enhancements to standard library `font-lock.el'." single ((:url . "http://www.emacswiki.org/font-lock+.el") (:keywords "languages" "faces" "highlighting"))]) (folding . [(20140401 3) nil "A folding-editor-like minor mode." single ((:keywords "tools"))]) (fold-this . [(20150601 342) nil "Just fold this region please" single ((:keywords "convenience"))]) (fold-dwim-org . [(20131203 551) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode"))]) (fold-dwim . [(20140208 837) nil "Unified user interface for Emacs folding modes" single ((:url . "http://www.dur.ac.uk/p.j.heslin/Software/Emacs"))]) (focus-autosave-mode . [(20151012 242) ((emacs (24 4))) "Automatically save files in focus-out-hook." single ((:keywords "convenience" "files" "frames" "mouse"))]) (focus . [(20150524 848) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single ((:url . "http://github.com/larstvei/Focus"))]) (fm-bookmarks . [(20150715 146) ((emacs (24 3)) (cl-lib (0 5))) "Use file manager bookmarks (eg Dolphin, Nautilus, PCManFM) in Dired" single ((:url . "http://github.com/kuanyui/fm-bookmarks.el") (:keywords "files" "convenience"))]) (fm . [(20130126 1618) nil "follow mode for compilation/output buffers" single ((:keywords "outlines"))]) (flyspell-popup . [(20150926 803) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single ((:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience"))]) (flyspell-lazy . [(20141222 652) nil "Improve flyspell responsiveness using idle timers" single ((:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling"))]) (flyparens . [(20140723 1146) nil "Check for unbalanced parens on the fly" tar ((:keywords "faces" "convenience" "lisp" "matching" "parentheses" "parens"))]) (flymake-yaml . [(20130423 848) ((flymake-easy (0 1))) "A flymake handler for YAML" single ((:url . "https://github.com/yasuyk/flymake-yaml") (:keywords "yaml"))]) (flymake-vala . [(20150325 2231) ((flymake-easy (0 1))) "A flymake handler for vala-mode files" single ((:url . "https://github.com/daniellawrence/flymake-vala") (:keywords "convenience" "vala"))]) (flymake-shell . [(20121104 1100) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ((:url . "https://github.com/purcell/flymake-shell"))]) (flymake-sass . [(20140308 325) ((flymake-easy (0 1))) "Flymake handler for sass and scss files" single ((:url . "https://github.com/purcell/flymake-sass"))]) (flymake-rust . [(20141004 1552) ((flymake-easy (0 1))) "A flymake handler for rust-mode files" single ((:url . "https://github.com/joaoxsouls/flymake-rust"))]) (flymake-ruby . [(20121104 1059) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ((:url . "https://github.com/purcell/flymake-ruby"))]) (flymake-python-pyflakes . [(20131127 6) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ((:url . "https://github.com/purcell/flymake-python-pyflakes"))]) (flymake-puppet . [(20141006 1855) ((flymake-easy (0 9))) "An Emacs flymake handler for syntax-checking puppet using puppet-lint" single ((:url . "https://github.com/benprew/flymake-puppet"))]) (flymake-phpcs . [(20140712 2331) ((flymake-easy (0 9))) "making flymake work with PHP CodeSniffer" single ((:url . "https://github.com/senda-akiha/flymake-phpcs/") (:keywords "flymake" "phpcs" "php"))]) (flymake-php . [(20121104 1102) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:url . "https://github.com/purcell/flymake-php"))]) (flymake-perlcritic . [(20120328 114) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:url . "https://github.com/illusori/emacs-flymake-perlcritic"))]) (flymake-lua . [(20140310 230) nil "Flymake for Lua" single ((:keywords "lua"))]) (flymake-json . [(20130423 2357) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ((:url . "https://github.com/purcell/flymake-json"))]) (flymake-jslint . [(20130613 202) ((flymake-easy (0 1))) "A flymake handler for javascript using jslint" single ((:url . "https://github.com/purcell/flymake-jslint"))]) (flymake-jshint . [(20140319 1500) ((flymake-easy (0 8))) "making flymake work with JSHint" single ((:keywords "flymake" "jshint" "javascript"))]) (flymake-hlint . [(20130309 145) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ((:url . "https://github.com/purcell/flymake-hlint"))]) (flymake-haskell-multi . [(20130620 422) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar nil]) (flymake-haml . [(20130324 351) ((flymake-easy (0 1))) "A flymake handler for haml files" single ((:url . "https://github.com/purcell/flymake-haml"))]) (flymake-google-cpplint . [(20140205 525) ((flymake-easy (0 9))) "Help to comply with the Google C++ Style Guide" single ((:url . "https://github.com/senda-akiha/flymake-google-cpplint/") (:keywords "flymake" "c" "c++"))]) (flymake-go . [(20150714 33) nil "A flymake handler for go-mode files" single ((:url . "https://github.com/robert-zaremba/flymake-go") (:keywords "go" "flymake"))]) (flymake-gjshint . [(20130327 532) nil "A flymake handler for javascript using both jshint and gjslint" single ((:keywords "flymake" "javascript" "jshint" "gjslint"))]) (flymake-elixir . [(20130810 717) nil "A flymake handler for elixir-mode .ex files." single nil]) (flymake-easy . [(20140818 55) nil "Helpers for easily building flymake checkers" single ((:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal"))]) (flymake-cursor . [(20130822 332) nil "displays flymake error msg in minibuffer after delay" single ((:url . "http://www.emacswiki.org/emacs/flymake-cursor.el") (:keywords "languages" "mode" "flymake"))]) (flymake-css . [(20121104 1104) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ((:url . "https://github.com/purcell/flymake-css"))]) (flymake-cppcheck . [(20140415 557) ((flymake-easy (0 9))) "Flymake work with Cppcheck for C/C++" single ((:url . "https://github.com/senda-akiha/flymake-cppcheck/") (:keywords "flymake" "cppcheck" "c" "c++"))]) (flymake-coffee . [(20140809 324) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ((:url . "https://github.com/purcell/flymake-coffee"))]) (flycheck-ycmd . [(20150727 31) ((emacs (24)) (dash (1 2 0)) (flycheck (0 22)) (ycmd (0 9))) "flycheck integration for ycmd" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (flycheck-tip . [(20150726 156) ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar ((:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck"))]) (flycheck-status-emoji . [(20150924 1114) ((emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single ((:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools"))]) (flycheck-rust . [(20150609 1248) ((emacs (24 1)) (flycheck (0 20)) (dash (2 4 0))) "Flycheck: Rust additions and Cargo support" single ((:url . "https://github.com/flycheck/flycheck-rust") (:keywords "tools" "convenience"))]) (flycheck-pyflakes . [(20140630 1521) ((flycheck (0 18))) "Support pyflakes in flycheck" single nil]) (flycheck-protobuf . [(20150904 50) ((flycheck (0 20)) (protobuf-mode (0))) "protobuf checker for flycheck" single ((:url . "https://github.com/edvorg/flycheck-protobuf") (:keywords "flycheck"))]) (flycheck-processing . [(20151015 431) ((processing-mode (1 3 0)) (flycheck (0 22))) "Flycheck checker for processing-mode" single ((:keywords "extensions"))]) (flycheck-pos-tip . [(20140606 510) ((flycheck (0 18)) (popup (0 5 0))) "Flycheck errors display in tooltip" single ((:url . "https://github.com/flycheck/flycheck-pos-tip") (:keywords "tools" "convenience"))]) (flycheck-perl6 . [(20150414 1832) ((emacs (24 3)) (flycheck (0 22))) "Perl 6 support in Flycheck" single ((:url . "https://github.com/hinrik/flycheck-perl6") (:keywords "tools" "convenience"))]) (flycheck-package . [(20151027 36) ((cl-lib (0 5)) (flycheck (0 22)) (emacs (24))) "A Flycheck checker for elisp package authors" single ((:keywords "lisp"))]) (flycheck-ocaml . [(20150609 1301) ((emacs (24 1)) (flycheck (0 22)) (merlin (2 0)) (let-alist (1 0 3))) "Flycheck: OCaml support" single ((:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages"))]) (flycheck-nim . [(20150911 1647) ((dash (2 4 0)) (flycheck (0 20))) "Defines a flycheck syntax checker for nim" single ((:url . "https://github.com/ALSchwalm/flycheck-nim"))]) (flycheck-mypy . [(20150915 133) ((flycheck (0 18))) "Support mypy in flycheck" single nil]) (flycheck-mercury . [(20150715 549) ((flycheck (0 22)) (s (1 9 0)) (dash (2 4 0))) "Mercury support in Flycheck" single ((:url . "https://github.com/flycheck/flycheck-mercury") (:keywords "convenience" "languages" "tools"))]) (flycheck-ledger . [(20140605 1146) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:keywords "convenience" "languages" "tools"))]) (flycheck-irony . [(20150728 1231) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0 -3 4))) "Flycheck: C/C++ support via Irony" single ((:url . "https://github.com/Sarcasm/flycheck-irony/") (:keywords "convenience" "tools" "c"))]) (flycheck-hdevtools . [(20150329 323) ((flycheck (0 21 -3 1)) (dash (2 0))) "A flycheck checker for Haskell using hdevtools" single ((:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools"))]) (flycheck-haskell . [(20151010 340) ((emacs (24 1)) (flycheck (0 22)) (haskell-mode (13 7)) (dash (2 4 0)) (let-alist (1 0 1))) "Flycheck: Cabal projects and sandboxes" tar ((:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience"))]) (flycheck-google-cpplint . [(20140806 925) ((flycheck (0 20 -3 1))) "Help to comply with the Google C++ Style Guide" single ((:url . "https://github.com/flycheck/flycheck-google-cpplint/") (:keywords "flycheck" "c" "c++"))]) (flycheck-ghcmod . [(20150113 2232) ((flycheck (0 21 -3 1)) (dash (2 0))) "A flycheck checker for Haskell using ghcmod" single ((:url . "https://github.com/scturtle/flycheck-ghcmod") (:keywords "convenience" "languages" "tools"))]) (flycheck-flow . [(20151027 1516) ((flycheck (0 18))) "Support Flow in flycheck" single nil]) (flycheck-elm . [(20150928 503) ((flycheck (0 24)) (emacs (24 4))) "Flycheck support for the elm language" single ((:url . "https://github.com/bsermons/flycheck-elm"))]) (flycheck-dmd-dub . [(20151019 622) ((flycheck (0 24))) "Sets flycheck-dmd-include-paths from dub package information" single ((:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages"))]) (flycheck-dialyzer . [(20151023 2237) ((flycheck (0 18))) "Support dialyzer in flycheck" single nil]) (flycheck-dedukti . [(20150106 651) ((flycheck (0 19)) (dedukti-mode (0 1))) "Flycheck integration of Dedukti" single nil]) (flycheck-d-unittest . [(20150708 2309) ((flycheck (0 21 -3 1)) (dash (1 4 0))) "Add D unittest support to flycheck" single ((:url . "https://github.com/tom-tan/flycheck-d-unittest/") (:keywords "flycheck" "d"))]) (flycheck-color-mode-line . [(20131125 2138) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:keywords "convenience" "language" "tools"))]) (flycheck-clojure . [(20150831 631) ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single ((:url . "https://github.com/clojure-emacs/squiggly-clojure"))]) (flycheck-clangcheck . [(20150712 10) ((cl-lib (0 5)) (seq (1 7)) (flycheck (0 17))) "A Flycheck checker difinition for ClangCheck." single ((:url . "https://github.com/kumar8600/flycheck-clangcheck"))]) (flycheck-cask . [(20150920 453) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience"))]) (flycheck-ats2 . [(20150628 1845) ((emacs (24 1)) (flycheck (0 22))) "Flycheck: ATS2 support" single ((:url . "http://github.com/drvink/flycheck-ats2") (:keywords "convenience" "tools" "languages"))]) (flycheck . [(20151027 755) ((dash (2 4 0)) (pkg-info (0 4)) (let-alist (1 0 1)) (cl-lib (0 3)) (emacs (24 3))) "On-the-fly syntax checking" tar ((:url . "https://www.flycheck.org") (:keywords "convenience" "languages" "tools"))]) (flx-isearch . [(20151016 2059) ((emacs (24)) (flx (20140821)) (cl-lib (0 5))) "Fuzzy incremental searching for emacs" single ((:url . "https://github.com/pythonnut/flx-isearch") (:keywords "convenience" "search" "flx"))]) (flx-ido . [(20140821 2033) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:url . "https://github.com/lewang/flx"))]) (flx . [(20140921 739) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:url . "https://github.com/lewang/flx"))]) (floobits . [(20151016 1636) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools"))]) (fliptext . [(20131113 1818) nil "Input method for flipping characters upside down" single ((:keywords "games" "i18n"))]) (flim . [(20150730 629) ((apel (10 8))) "A library to provide basic features about message representation or encoding." tar nil]) (flex-isearch . [(20130508 1503) nil "Flex matching (like ido) in isearch." single ((:url . "https://bitbucket.org/jpkotta/flex-isearch") (:keywords "convenience" "search"))]) (flex-autopair . [(20120809 518) nil "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single ((:url . "https://github.com/uk-ar/flex-autopair.el") (:keywords "keyboard" "input"))]) (flatui-theme . [(20150531 143) nil "A color theme for Emacs based on flatuicolors.com" single ((:url . "https://github.com/john2x/flatui-theme.el"))]) (flatland-theme . [(20140805 305) nil "A simple theme for Emacs based on the Flatland theme for Sublime Text" single ((:url . "http://github.com/gregchapple/flatland-emacs"))]) (flatland-black-theme . [(20141115 2230) ((emacs (24 0))) "an Emacs 24 theme based on Flatland Black (tmTheme)" single ((:url . "https://github.com/emacsfodder/flatland-black-theme"))]) (flash-region . [(20130923 1117) nil "Flash a region" single ((:keywords "utility"))]) (flappymacs . [(20140715 901) nil "flappybird clone for emacs" single ((:url . "https://github.com/taksatou/flappymacs") (:keywords "games"))]) (fixmee . [(20150223 555) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ((:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience"))]) (fix-word . [(20150716 602) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single ((:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience"))]) (fit-frame . [(20150104 1404) nil "Resize a frame.  In particular, fit a frame to its buffers." single ((:url . "http://www.emacswiki.org/fit-frame.el") (:keywords "internal" "extensions" "convenience" "local"))]) (fish-mode . [(20150924 2258) ((emacs (24))) "Major mode for fish shell scripts" single ((:keywords "fish" "shell"))]) (firestarter . [(20150913 1325) nil "Execute (shell) commands on save" single ((:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience"))]) (firecode-theme . [(20141115 2302) ((emacs (24 0))) "an Emacs 24 theme based on FireCode (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (firebelly-theme . [(20140410 155) ((cl-lib (0 5))) "a subdued, dark theme with pastelish colors." single ((:url . "https://github.com/startling/firebelly"))]) (fiplr . [(20140723 2345) ((grizzl (0 1 0)) (cl-lib (0 1))) "Fuzzy Search for Files in Projects" tar nil]) (fingers . [(20150809 1716) nil "Modal editing with universal text manipulation helpers." tar ((:url . "http://github.com/fgeller/fingers.el") (:keywords "fingers" "modal" "editing" "workman"))]) (findr . [(20130824 507) nil "Breadth-first file-finding facility for (X)Emacs" single ((:keywords "files"))]) (finder+ . [(20150104 1404) nil "Extensions to standard library finder.el" single ((:url . "http://www.emacswiki.org/finder+.el") (:keywords "help"))]) (find-things-fast . [(20150519 1526) nil "Find things fast, leveraging the power of git" single ((:keywords "project" "convenience"))]) (find-temp-file . [(20150101 601) nil "Open quickly a temporary file" single ((:url . "https://github.com/thisirs/find-temp-file.git") (:keywords "convenience"))]) (find-file-in-repository . [(20141214 2016) nil "Quickly find files in a git, mercurial or other repository" single ((:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control"))]) (find-file-in-project . [(20151022 708) ((swiper (0 6 0)) (emacs (24 3))) "Find files in a project quickly, on any OS" single ((:url . "https://github.com/technomancy/find-file-in-project") (:keywords "project" "convenience"))]) (find-dired+ . [(20150829 2155) nil "Extensions to `find-dired.el'." single ((:url . "http://www.emacswiki.org/find-dired+.el") (:keywords "internal" "unix" "tools" "matching" "local"))]) (find-by-pinyin-dired . [(20150202 216) nil "Find file by first Pinyin characters of Chinese Hanzi" tar nil]) (finalize . [(20140127 1046) ((emacs (24 1)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar nil]) (fillcode . [(20150812 941) nil "Fill (wrap) function calls and expressions in source code" single ((:url . "https://snarfed.org/fillcode"))]) (fill-column-indicator . [(20140509 1101) nil "Graphically indicate the fill column" tar ((:keywords "convenience"))]) (filesets+ . [(20150104 1402) nil "Extensions to `filesets.el'." single ((:url . "http://www.emacswiki.org/filesets+.el"))]) (files+ . [(20150104 1401) nil "Enhancements of standard library `files.el'." single ((:url . "http://www.emacswiki.org/files+.el") (:keywords "internal" "extensions" "local"))]) (figlet . [(20141104 837) nil "Annoy people with big, ascii art text" single nil]) (fic-mode . [(20140421 922) nil "Show FIXME/TODO/BUG/KLUDGE in special face only in comments and strings" single nil]) (fetch . [(20131130 2330) nil "Fetch and unpack resources" single ((:url . "https://github.com/crshd/fetch.el"))]) (feature-mode . [(20141121 1030) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar nil]) (fcopy . [(20150304 603) nil "Funny Copy, set past point HERE then search copy text" single ((:url . "https://github.com/ataka/fcopy") (:keywords "convenience"))]) (fcitx . [(20150925 2305) nil "Make fcitx better in Emacs" single ((:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions"))]) (fastnav . [(20120211 657) nil "Fast navigation and editing routines." single ((:keywords "nav" "fast" "fastnav" "navigation"))]) (fasm-mode . [(20141124 1034) nil "Fasm major mode" single ((:url . "https://github.com/Fanael/fasm-mode"))]) (fasd . [(20150309 1113) ((grizzl (0))) "Emacs integration for the command-line productivity booster `fasd'" single ((:url . "https://github.com/steckerhalter/emacs-fasd") (:keywords "cli" "bash" "zsh" "autojump"))]) (farmhouse-theme . [(20150506 2127) nil "Farmhouse Theme, Emacs edition" tar ((:keywords "color" "theme") (:url . "https://github.com/mattly/emacs-farmhouse-theme"))]) (fancy-narrow . [(20151021 333) nil "narrow-to-region with more eye candy." single ((:url . "http://github.com/Bruce-Connor/fancy-narrow") (:keywords "faces" "convenience"))]) (fancy-battery . [(20150101 404) ((emacs (24 1))) "Fancy battery display" single ((:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware"))]) (fakir . [(20140729 952) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) "fakeing bits of Emacs" single ((:url . "http://github.com/nicferrier/emacs-fakir") (:keywords "lisp" "tools"))]) (fakespace . [(20120817 1706) nil "fake namespaces with defpackage" single ((:url . "https://github.com/skeeto/elisp-fakespace"))]) (faff-theme . [(20151027 517) nil "Light Emacs color theme on ivory3 background" single ((:url . "https://github.com/WJCFerguson/emacs-faff-theme") (:keywords "color" "theme"))]) (factlog . [(20130209 1740) ((deferred (0 3 1))) "File activity logger" single ((:url . "https://github.com/tkf/factlog"))]) (faceup . [(20150215 1348) nil "Regression test system for font-lock" single ((:url . "https://github.com/Lindydancer/faceup") (:keywords "faces" "languages"))]) (faces+ . [(20150104 1400) nil "Extensions to `faces.el'." single ((:url . "http://www.emacswiki.org/faces+.el") (:keywords "faces" "local"))]) (facemenu+ . [(20150816 1953) nil "Extensions to `facemenu.el'." single ((:url . "http://www.emacswiki.org/facemenu+.el") (:keywords "faces" "extensions" "convenience" "menus" "local"))]) (face-remap+ . [(20150104 1358) nil "Extensions to standard library `face-remap.el'." single ((:url . "http://www.emacswiki.org/face-remap+.el") (:keywords "window" "frame" "face" "font"))]) (fabric . [(20141024 322) nil "Launch Fabric using Emacs" tar ((:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric"))]) (f . [(20150605 927) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories"))]) (ez-query-replace . [(20140810 517) ((dash (1 2 0))) "a smarter context-sensitive query-replace that can be reapplied" single nil]) (eyuml . [(20141028 1527) ((request (0 2 0)) (s (1 8 0))) "Write textual uml diagram from emacs using yuml.me" single ((:url . "http://github.com/antham/eyuml") (:keywords "uml"))]) (eyedropper . [(20150509 1345) ((hexrgb (0))) "Pick foreground and background colors at cursor or pointer." single ((:url . "http://www.emacswiki.org/eyedropper.el") (:keywords "color" "rgb" "hsv" "hexadecimal" "face" "frame"))]) (eyebrowse . [(20151008 1142) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single ((:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience"))]) (extend-dnd . [(20130328 1034) nil "R drag and Drop" tar ((:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop"))]) (express . [(20140508 1341) ((string-utils (0 3 2))) "Alternatives to `message'" single ((:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface"))]) (expand-region . [(20150902 558) nil "Increase selected region by semantic units." tar nil]) (expand-line . [(20151005 1907) nil "Expand selection by line" single nil]) (exec-path-from-shell . [(20151006 2253) nil "Get environment variables such as $PATH from the shell" single ((:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment"))]) (eww-lnum . [(20150102 712) nil "Conkeror-like functionality for eww" single ((:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror"))]) (ewmctrl . [(20150630 138) nil "Use `wmctrl' to manage desktop windows." single ((:url . "https://github.com/flexibeast/ewmctrl") (:keywords "desktop" "windows"))]) (evm . [(20141007 456) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:url . "http://github.com/rejeep/evm"))]) (evil-visualstar . [(20150514 1410) ((evil (0))) "Starts a * or # search from the visual selection" single ((:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar"))]) (evil-visual-mark-mode . [(20150202 1000) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single ((:keywords "evil"))]) (evil-vimish-fold . [(20151006 2126) ((emacs (24 4)) (evil (1 0 0)) (vimish-fold (0 2 0))) "Integrate vimish-fold with evil" single ((:url . "https://github.com/alexmurray/evil-vimish-fold"))]) (evil-tutor . [(20150102 2250) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil"))]) (evil-textobj-anyblock . [(20151017 1417) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single ((:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil"))]) (evil-terminal-cursor-changer . [(20150827 1951) ((evil (1 0 8))) "Change cursor shape and color by evil state in terminal" single ((:url . "https://github.com/7696122/evil-terminal-cursor-changer") (:keywords "evil" "terminal" "cursor"))]) (evil-tabs . [(20150127 1346) ((evil (0 0 0)) (elscreen (0 0 0))) "Integrating Vim-style tabs for Evil mode users." single ((:url . "https://github.com/krisajenkins/evil-tabs") (:keywords "evil" "tab" "tabs" "vim"))]) (evil-surround . [(20150605 2306) nil "emulate surround.vim from Vim" single ((:keywords "emulation" "vi" "evil mailing list: <implementations-list at lists.ourproject.org> subscribe: http://tinyurl.com/implementations-list newsgroup: nntp://news.gmane.org/gmane.emacs.vim-emulation archives: http://dir.gmane.org/gmane.emacs.vim-emulation"))]) (evil-space . [(20150617 534) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion"))]) (evil-snipe . [(20150928 2006) ((evil (1 1 3))) "emulate vim-sneak & vim-seek" single ((:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek"))]) (evil-smartparens . [(20150913 58) ((evil (1 0)) (cl-lib (0 3)) (emacs (24 4)) (smartparens (1 6 3))) "Evil support for smartparens" single ((:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens"))]) (evil-search-highlight-persist . [(20150815 1442) ((highlight (0))) "Persistent highlights after search" single nil]) (evil-rsi . [(20151027 1519) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single ((:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi"))]) (evil-rails . [(20150803 446) ((evil (1 0)) (projectile-rails (1 0))) "Rails support for Evil Mode" single ((:url . "https://github.com/antono/evil-rails") (:keywords "ruby" "rails" "vim" "project" "convenience" "web" "evil" "projectile"))]) (evil-quickscope . [(20150929 1248) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single ((:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil"))]) (evil-paredit . [(20150413 1348) ((evil (1 0 9)) (paredit (25 -2))) "Paredit support for evil keybindings" single ((:url . "https://github.com/roman/evil-paredit") (:keywords "paredit" "evil"))]) (evil-org . [(20150513 1610) ((evil (0)) (org (0))) "evil keybindings for org-mode" single ((:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets"))]) (evil-numbers . [(20140606 551) nil "increment/decrement numbers like in vim" single ((:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary"))]) (evil-nerd-commenter . [(20150922 1800) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar nil]) (evil-mc . [(20151023 2120) ((emacs (24 4)) (evil (1 2 5)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar ((:url . "https://github.com/gabesoft/evil-mc") (:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc"))]) (evil-matchit . [(20150921 536) nil "Vim matchit ported into Emacs (requires EVIL)" tar nil]) (evil-mark-replace . [(20150424 18) ((evil (1 0 8))) "replace the thing in marked area" single ((:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil"))]) (evil-lisp-state . [(20150328 736) ((evil (1 0 9)) (evil-leader (0 4 3)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single ((:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic"))]) (evil-leader . [(20140606 543) ((evil (0))) "let there be <leader>" single ((:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader"))]) (evil-jumper . [(20151025 802) ((evil (0)) (cl-lib (0 5))) "Jump like vimmers do!" single ((:url . "https://github.com/bling/evil-jumper") (:keywords "evil" "vim" "jumplist" "jump" "list"))]) (evil-indent-textobject . [(20130831 1519) ((evil (0))) "evil textobjects based on indentation" single ((:url . "http://github.com/cofi/evil-indent-textobject") (:keywords "convenience" "evil"))]) (evil-iedit-state . [(20141217 1734) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single ((:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic"))]) (evil-god-state . [(20141116 1855) ((evil (1 0 8)) (god-mode (2 12 0))) "use god-mode keybindings in evil-mode" single ((:url . "https://github.com/gridaphobe/evil-god-state") (:keywords "evil" "leader" "god-mode"))]) (evil-exchange . [(20141127 2243) ((evil (1 0 7)) (cl-lib (0 3))) "Exchange text more easily within Evil" single ((:url . "http://github.com/Dewdrops/evil-exchange") (:keywords "evil" "plugin"))]) (evil-escape . [(20150926 2152) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single ((:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil"))]) (evil-easymotion . [(20151016 2059) ((emacs (24)) (avy (0 3 0))) "A port of vim's easymotion to emacs" single ((:url . "https://github.com/pythonnut/evil-easymotion.el") (:keywords "convenience" "evil"))]) (evil-dvorak . [(20150709 1233) ((evil (1 0 8)) (helm (0)) (helm-swoop (0)) (ace-jump-mode (2 0)) (evil-surround (0))) "evil keybindings for that work with dvorak mode" tar ((:keywords "evil" "vim-emulation" "dvorak" "keyboard") (:url . "https://github.com/jbranso/evil-dvorak.git"))]) (evil-commentary . [(20151027 936) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." single ((:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary"))]) (evil-cleverparens . [(20151022 735) ((evil (1 0)) (paredit (1)) (smartparens (1 6 1)) (emacs (24 4)) (dash (2 12 0))) "Evil friendly minor-mode for editing lisp." tar ((:url . "https://github.com/luxbock/evil-cleverparens") (:keywords "cleverparens" "parentheses" "evil" "paredit" "smartparens"))]) (evil-avy . [(20150908 48) ((emacs (24 1)) (cl-lib (0 5)) (avy (0 3 0)) (evil (1 2 3))) "set-based completion" single ((:url . "https://github.com/louy2/evil-avy") (:keywords "point" "location" "evil" "vim"))]) (evil-args . [(20140329 1429) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation"))]) (evil-anzu . [(20150124 1609) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single ((:url . "https://github.com/syohex/emacs-evil-anzu"))]) (evil-annoying-arrows . [(20150509 1418) ((cl-lib (0 5))) "Ring the bell if using arrows too much" single ((:keywords "learning"))]) (evil . [(20151027 37) ((undo-tree (0 6 3)) (goto-chg (1 6))) "Extensible Vi layer for Emacs." tar nil]) (eval-sexp-fu . [(20131230 1351) ((highlight (0))) "Tiny functionality enhancements for evaluating sexps." single ((:keywords "lisp" "highlight" "convenience"))]) (eval-in-repl . [(20150905 1525) ((dash (0 0 0)) (paredit (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar ((:url . "https://github.com/kaz-yos/eval-in-repl/"))]) (ethan-wspace . [(20140709 543) nil "whitespace customizations for emacs" single ((:keywords "whitespace" "tab" "newline" "trailing" "clean"))]) (etags-table . [(20130824 457) nil "Set tags table(s) based on current file" single ((:keywords "etags" "tags" "tag"))]) (etags-select . [(20130824 500) nil "Select from multiple tags" single ((:keywords "etags" "tags" "tag" "select"))]) (etable . [(20150327 1016) ((dash (2 9 0)) (interval-list (0 1)) (emacs (24 4))) "Implementation of javax.swing.JTable for Emacs." tar nil]) (esxml . [(20151013 1128) ((kv (0 0 5))) "Library for working with xml via esxml and sxml" single ((:keywords "tools" "lisp" "comm"))]) (esup . [(20151005 1952) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar ((:url . "http://github.com/jschaf/esup") (:keywords "convenience" "processes"))]) (ess-smart-underscore . [(20131229 1851) ((ess (0))) "Ess Smart Underscore" tar ((:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore"))]) (ess-smart-equals . [(20150201 2201) ((emacs (24)) (ess (5 0))) "better smart-assignment with =-key in R and S" single ((:url . "https://github.com/genovese/ess-smart-equals") (:keywords "r" "s" "ess" "convenience"))]) (ess-R-object-popup . [(20130302 336) ((popup (20130117 1954)) (ess (20130225 1754))) "popup description of R object" single ((:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess"))]) (ess-R-data-view . [(20130509 458) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience"))]) (ess . [(20151028 138) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar ((:url . "http://ess.r-project.org"))]) (esqlite-helm . [(20140121 623) ((esqlite (0 2 0)) (helm (20131207 845))) "Define helm source for sqlite database" single ((:url . "https://github.com/mhayashi1120/Emacs-esqlite/raw/master/esqlite-helm.el") (:keywords "data"))]) (esqlite . [(20140310 308) ((pcsv (1 3 3))) "Manipulate sqlite file from Emacs" single ((:url . "https://github.com/mhayashi1120/Emacs-esqlite/raw/master/esqlite.el") (:keywords "data"))]) (espuds . [(20150717 834) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single ((:url . "http://github.com/ecukes/espuds") (:keywords "test"))]) (espresso-theme . [(20130228 2348) nil "Espresso Tutti Colori port for Emacs" single ((:url . "https://github.com/dgutov/espresso-theme"))]) (eshell-z . [(20150920 258) ((cl-lib (0 5))) "cd to frequent directory in eshell" single ((:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience"))]) (eshell-prompt-extras . [(20150725 2359) nil "Display extra information for your eshell prompt." single ((:keywords "eshell" "prompt"))]) (eshell-git-prompt . [(20150928 2247) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 9 0))) "Some Eshell prompt for Git users" single ((:url . "https://github.com/xuchunyang/eshell-git-prompt") (:keywords "eshell" "git"))]) (eshell-did-you-mean . [(20150915 1252) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single ((:url . "https://github.com/xuchunyang/eshell-did-you-mean") (:keywords "eshell"))]) (eshell-autojump . [(20150927 24) nil "autojump command for Eshell" single ((:url . "http://github.com/coldnew/eshell-autojump"))]) (esh-help . [(20140107 222) ((dash (1 4 0))) "Add some help functions and support for Eshell" single ((:url . "https://github.com/tom-tan/esh-help/") (:keywords "eshell" "extensions"))]) (esh-buf-stack . [(20140107 218) nil "Add a buffer stack feature to Eshell" single ((:keywords "eshell" "extensions"))]) (escreen . [(20091203 1013) nil "emacs window session manager" single ((:keywords "extensions"))]) (es-windows . [(20140211 104) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:url . "https://github.com/sabof/es-windows"))]) (es-mode . [(20150916 2033) ((dash (2 11 0))) "A major mode for editing Elasticsearch queries" tar ((:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch"))]) (es-lib . [(20141111 1030) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:url . "https://github.com/sabof/es-lib"))]) (ert-runner . [(20151023 113) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test"))]) (ert-modeline . [(20140115 215) ((s (1 3 1)) (dash (1 2 0)) (emacs (24 1)) (projectile (0 9 1))) "displays ert test results in the modeline." single ((:keywords "tools" "tests" "convenience"))]) (ert-junit . [(20140830 1521) ((ert (0))) "JUnit XML reports from ert results" single ((:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert"))]) (ert-expectations . [(20130824 500) nil "The simplest unit test framework in the world" single ((:url . "http://www.emacswiki.org/emacs/download/ert-expectations.el") (:keywords "test" "unittest" "ert" "expectations"))]) (ert-async . [(20151011 659) nil "Async support for ERT" single ((:url . "http://github.com/rejeep/ert-async.el") (:keywords "test"))]) (erlang . [(20151013 157) nil "Erlang major mode" tar nil]) (ergoemacs-mode . [(20151008 757) ((emacs (24 1)) (undo-tree (0 6 5))) "Emacs mode based on common modern interface and ergonomics." tar ((:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience"))]) (erefactor . [(20150620 1743) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single ((:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint"))]) (eredis . [(20120808 2007) nil "eredis, a Redis client in emacs lisp" single ((:url . "http://code.google.com/p/eredis/"))]) (ercn . [(20150523 803) nil "Flexible ERC notifications" single ((:url . "http://www.github.com/leathekd/ercn"))]) (erc-yt . [(20150426 549) ((dash (2 10 0))) "An erc module to display youtube links nicely" single ((:keywords "multimedia"))]) (erc-youtube . [(20150603 1436) nil "Show info about a YouTube URL in an ERC buffer." single ((:keywords "multimedia"))]) (erc-view-log . [(20140227 1239) nil "Major mode for viewing ERC logs" single ((:url . "http://github.com/Niluge-KiWi/erc-view-log/raw/master/erc-view-log.el") (:keywords "erc" "viewer" "logs" "colors"))]) (erc-tweet . [(20150920 558) nil "shows text of a tweet when an url is posted in erc buffers" single ((:keywords "extensions"))]) (erc-track-score . [(20130328 515) nil "Add score support to tracked channel buffers" single ((:url . "http://julien.danjou.info/erc-track-score.html"))]) (erc-terminal-notifier . [(20140115 224) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single ((:url . "http://github.com/julienXX/") (:keywords "erc" "terminal-notifier" "nick"))]) (erc-social-graph . [(20150508 504) nil "A social network graph module for ERC." single ((:url . "https://github.com/vibhavp/erc-social-graph") (:keywords "erc" "graph"))]) (erc-image . [(20150914 314) nil "Show received image urls in the ERC buffer" single ((:keywords "multimedia"))]) (erc-hl-nicks . [(20140619 522) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:url . "http://www.github.com/leathekd/erc-hl-nicks"))]) (erc-crypt . [(20140316 651) nil "Symmetric Encryption for ERC" single ((:keywords "application"))]) (erc-colorize . [(20150725 709) nil "Per user colorization of whole message" single ((:url . "https://github.com/thisirs/erc-colorize.git") (:keywords "erc" "convenience"))]) (eproject . [(20141019 746) ((helm (1 6 4))) "assign files to projects, programatically" tar ((:keywords "programming" "projects"))]) (eprime-mode . [(20140513 1116) nil "An E-prime checking mode for Emacs" single ((:url . "https://github.com/AndrewHynes/eprime-mode") (:keywords "e-prime" "english" "grammar"))]) (epresent . [(20150324 610) nil "Simple presentation mode for Emacs Org-mode" single ((:keywords "gui"))]) (epl . [(20150517 433) ((cl-lib (0 3))) "Emacs Package Library" single ((:url . "http://github.com/cask/epl") (:keywords "convenience"))]) (epic . [(20150503 37) ((htmlize (1 47))) "Evernote Picker for Cocoa Emacs" single ((:url . "https://github.com/yoshinari-nomura/epic") (:keywords "evernote" "applescript"))]) (epc . [(20140609 2234) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar ((:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc"))]) (eopengrok . [(20150804 250) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single ((:keywords "tools"))]) (envdir . [(20150519 755) ((emacs (24)) (dash (2 10 0)) (f (0 17 2))) "Modify environment according to files in a specified directory" single ((:url . "https://github.com/proofit404/envdir-mode"))]) (ensime . [(20151025 2356) ((scala-mode2 (0 22)) (sbt-mode (0 1)) (yasnippet (0 9 0 1)) (company (0 8 12)) (dash (2 11 0)) (s (1 10 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar ((:url . "https://github.com/ensime/ensime-emacs") (:keywords "languages"))]) (enotify . [(20130407 648) nil "A networked notification system for emacs" tar nil]) (eno . [(20150722 526) ((dash (2 9 0)) (edit-at-point (1 0))) "Goto/copy/cut any word/symbol/line in view, similar to ace-jump/easymotion" single ((:url . "http://github.com/enoson/eno.el"))]) (enlive . [(20150824 549) nil "query html document with css selectors" single ((:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query"))]) (enh-ruby-mode . [(20150711 1530) nil "Major mode for editing Ruby files" tar ((:url . "http://github.com/zenspider/Enhanced-Ruby-Mode") (:keywords "languages elisp" "ruby"))]) (engine-mode . [(20150902 1035) nil "Define and query search engines from within Emacs." single ((:url . "https://github.com/hrs/engine-mode/engine-mode.el"))]) (enclose . [(20121008 914) nil "Enclose cursor within punctuation pairs." tar nil]) (emr . [(20140817 1604) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) "Emacs refactoring system." tar ((:keywords "tools" "convenience" "refactoring"))]) (empos . [(20151011 1216) nil "Locate bibtex citations from within emacs" single ((:url . "http://github.com/dimalik/empos/") (:keywords "citations" "reference" "bibtex" "reftex"))]) (emoji-display . [(20140117 213) nil "emoji displaying module" single ((:url . "https://github.com/ikazuhiro/emoji-display") (:keywords "emoji"))]) (emoji-cheat-sheet-plus . [(20150617 631) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar ((:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji"))]) (emms-soundcloud . [(20131221 345) ((emms (20131016)) (json (1 2))) "EMMS source for Soundcloud audio sharing platform" single ((:url . "http://github.com/osener/emms-soundcloud") (:keywords "emms" "soundcloud"))]) (emms-player-simple-mpv . [(20151020 601) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar ((:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv"))]) (emms-player-mpv-jp-radios . [(20151027 621) ((emacs (24)) (cl-lib (0 5)) (emms (4 0)) (emms-player-simple-mpv (0 1 7))) "EMMS players and stream lists of Japan radio stations" tar ((:url . "https://github.com/momomo5717/emms-player-mpv-jp-radios") (:keywords "emms" "mpv" "radio"))]) (emms-player-mpv . [(20150803 109) ((emms (0))) "mpv support for EMMS" single ((:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "emms" "mpv"))]) (emms-mode-line-cycle . [(20151009 746) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single ((:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line"))]) (emms-mark-ext . [(20130528 2027) ((emms (3 0))) "Extra functions for emms-mark-mode and emms-tag-edit-mode" single ((:url . "https://github.com/vapniks/emms-mark-ext") (:keywords "convenience" "multimedia"))]) (emms-info-mediainfo . [(20131223 500) ((emms (0))) "Info-method for EMMS using medianfo" single ((:keywords "multimedia" "processes"))]) (emms . [(20150810 832) nil "The Emacs Multimedia System" tar ((:keywords "emms" "mp3" "mpeg" "multimedia"))]) (emmet-mode . [(20151005 1850) nil "Unofficial Emmet's support for emacs" single ((:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience"))]) (ember-yasnippets . [(20150501 926) ((yasnippet (0 8 0))) "Snippets for Ember.js development" tar ((:keywords "tools" "abbrev" "languages"))]) (ember-mode . [(20150925 1623) ((cl-lib (0 5))) "Ember navigation mode for emacs" single ((:keywords "ember" "ember.js" "emberjs"))]) (emamux-ruby-test . [(20130812 939) ((emamux (0 1)) (projectile (0 9 1))) "Ruby test with emamux" single ((:url . "https://github.com/syohex/emamux-ruby-test"))]) (emamux . [(20151021 2102) ((emacs (24)) (cl-lib (0 5))) "Interact with tmux" single ((:url . "https://github.com/syohex/emacs-emamux"))]) (emagician-fix-spell-memory . [(20141229 1434) nil "Simple hack into ispell to fix (muscle) memory problems" single ((:keywords "erc" "bitlbee" "bot"))]) (emacsshot . [(20150516 1433) nil "Snapshot a frame or window from within Emacs" single ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience"))]) (emacsql-sqlite . [(20151004 715) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql-psql . [(20151004 715) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) "EmacSQL back-end for PostgreSQL via psql and pg" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql-mysql . [(20151004 715) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single ((:url . "https://github.com/skeeto/emacsql"))]) (emacsql . [(20151003 1931) ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) "high-level SQL database front-end" tar ((:url . "https://github.com/skeeto/emacsql"))]) (emacsc . [(20150807 257) nil "helper for emacsc(1)" tar ((:url . "https://github.com/knu/emacsc") (:keywords "tools"))]) (emacsagist . [(20140331 1130) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools"))]) (emacs-setup . [(20120727 726) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar nil]) (emacs-eclim . [(20150816 220) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0))) "An interface to the Eclipse IDE." tar nil]) (elx . [(20150101 705) ((emacs (24 4))) "extract information from Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages"))]) (elwm . [(20150817 307) ((dash (1 1 0))) "Minimalistic window manager for emacs" single ((:url . "https://github.com/Fuco1/elwm") (:keywords "docs"))]) (elscreen-separate-buffer-list . [(20150521 2345) ((emacs (24 4)) (elscreen (1 4 6))) "Separate buffer list manager for elscreen" single ((:keywords "elscreen"))]) (elscreen-persist . [(20141220 38) ((elscreen (1 4 6)) (revive (2 19))) "persist the elscreen across sessions" single ((:keywords "elscreen" "frames"))]) (elscreen-multi-term . [(20151021 1933) ((emacs (24 4)) (elscreen (1 4 6)) (multi-term (1 3))) "Multi term for elscreen" single ((:keywords "elscreen" "multi term"))]) (elscreen-mew . [(20140629 816) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:url . "https://github.com/masutaka/elscreen-mew"))]) (elscreen . [(20151025 1800) nil "Emacs window session manager" tar nil]) (elpy . [(20150830 510) ((company (0 8 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0))) "Emacs Python Development Environment" tar nil]) (elpa-mirror . [(20150923 525) nil "ELPA mirror from locally installed packages is easy" tar nil]) (elpa-audit . [(20141023 631) nil "Handy functions for inspecting and comparing package archives" single ((:url . "https://github.com/purcell/elpa-audit") (:keywords "maint"))]) (elnode . [(20140203 1506) ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) "The Emacs webserver." tar nil]) (elmine . [(20130330 1300) nil "Redmine API access via elisp." single ((:url . "http://github.com/leoc/elmine") (:keywords "tools"))]) (elmacro . [(20141109 806) ((s (1 9 0)) (dash (1 5 0))) "Convert keyboard macros to elisp" single ((:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience"))]) (elm-mode . [(20151018 745) ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) "Major mode for Elm" tar ((:url . "https://github.com/jcollard/elm-mode"))]) (elixir-yasnippets . [(20150417 539) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar nil]) (elixir-mode . [(20151028 10) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar ((:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir"))]) (elisp-slime-nav . [(20150805 1248) nil "Make M-. and M-, work in elisp like they do in slime" single ((:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp"))]) (elisp-sandbox . [(20131116 1042) nil "Evaluate EmacsLisp expressions in a sandbox" single ((:url . "https://github.com/joelmccracken/elisp-sandbox") (:keywords "lisp"))]) (elisp-depend . [(20120426 1823) nil "Parse depend libraries of elisp file." single ((:url . "http://www.emacswiki.org/emacs/download/elisp-depend.el") (:keywords "elisp-depend"))]) (elhome . [(20131202 1108) ((initsplit (20120630))) "A framework for a \"home\" Emacs configuration" tar ((:url . "http://github.com/demyanrogozhin/elhome") (:keywords "lisp"))]) (elfeed-web . [(20140702 1626) ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) "web interface to Elfeed" tar nil]) (elfeed-org . [(20151003 331) ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0))) "Configure elfeed with one or more org-mode files" single ((:url . "https://github.com/remyhonig/elfeed-org") (:keywords "news"))]) (elfeed . [(20151026 945) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar nil]) (elein . [(20120120 316) nil "running leiningen commands from emacs" single ((:url . "https://github.com/remvee/elein") (:keywords "tools" "processes"))]) (electric-spacing . [(20150822 1038) nil "Insert operators with surrounding spaces smartly" single nil]) (electric-operator . [(20151018 159) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" single ((:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric"))]) (electric-case . [(20150417 412) nil "insert camelCase, snake_case words without \"Shift\"ing" single ((:url . "http://hins11.yu-yake.com/"))]) (eldoc-extension . [(20140306 645) nil "Some extension for eldoc" single ((:keywords "eldoc"))]) (eldoc-eval . [(20150512 506) nil "Enable eldoc support when minibuffer is in use." single nil]) (el2markdown . [(20150516 1338) nil "Convert commentary section of elisp files to markdown." single ((:url . "https://github.com/Lindydancer/el2markdown"))]) (el-x . [(20140111 1401) nil "main entry point for el-x package" tar ((:keywords "lisp"))]) (el-swank-fuzzy . [(20130824 457) nil "fuzzy symbol completion." single ((:keywords "matching" "completion" "string"))]) (el-spy . [(20131226 1208) nil "Mocking framework for Emacs lisp. It also support spy, proxy." single ((:url . "https://github.com/uk-ar/el-spy") (:keywords "test"))]) (el-sprunge . [(20140106 1739) ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) "Command line paste server with Emacs highlighting" tar nil]) (el-spice . [(20140805 1138) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ((:url . "https://github.com/vedang/el-spice") (:keywords "languages" "extensions"))]) (el-spec . [(20121018 4) nil "ruby's rspec like syntax test frame work" single ((:url . "https://github.com/uk-ar/el-spec") (:keywords "test"))]) (el-pocket . [(20150202 1528) ((web (0 5 2)) (emacs (24))) "Read and write to Pocket (getpocket.com) ;;" single ((:url . "http://github.com/pterygota/el-pocket") (:keywords "emacs" "pocket" "bookmarks"))]) (el-mock . [(20150906 321) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest"))]) (el-init-viewer . [(20150303 28) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single ((:url . "https://github.com/HKey/el-init-viewer"))]) (el-init . [(20150728 220) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single ((:url . "https://github.com/HKey/el-init"))]) (el-get . [(20151027 1712) nil "Manage the external elisp bits and pieces you depend upon" tar ((:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki"))]) (el-autoyas . [(20120918 617) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet"))]) (ein-mumamo . [(20150301 1628) ((ein (0 4))) "Multiple major mode support for Emacs IPython Notebook" single nil]) (ein . [(20150914 1116) ((websocket (1 5)) (request (0 2))) "Emacs IPython Notebook" tar nil]) (eimp . [(20140630 747) nil "Emacs Image Manipulation Package" single nil]) (eide . [(20151023 1251) nil "IDE interface" tar nil]) (egison-mode . [(20150827 2129) nil "Egison editing mode" single ((:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el"))]) (egg . [(20150208 1815) nil "Emacs Got Git - Emacs interface to Git" tar ((:keywords "git" "version control" "release management"))]) (efire . [(20151009 1331) ((circe (1 2))) "Use campfire from Emacs" single ((:url . "https://github.com/capitaomorte/efire") (:keywords "convenience" "tools"))]) (edts . [(20150830 510) ((auto-complete (1 3 1)) (auto-highlight-symbol (1 53)) (dash (1 5 0)) (eproject (1 5)) (erlang (2 4 1)) (f (0 16 0)) (popup (0 4)) (s (1 9 0))) "Erlang Development Tool Suite" tar nil]) (edn . [(20150929 146) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" single ((:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure"))]) (editorconfig-fnmatch . [(20151027 822) ((cl-lib (0 5))) "Glob pattern matching in Emacs lisp" single ((:url . "https://github.com/10sr/editorconfig-fnmatch-el") (:keywords "utility" "shell" "fnmatch" "glob" "wildcard"))]) (editorconfig-core . [(20151025 13) ((editorconfig-fnmatch (20151023 1021)) (cl-lib (0 5))) "EditorConfig Core library written purely in Emacs Lisp" tar ((:url . "https://github.com/10sr/editorconfig-core-emacslisp") (:keywords "utility" "editorconfig"))]) (editorconfig . [(20151027 2216) nil "EditorConfig Emacs Plugin" single ((:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (edit-server-htmlize . [(20130329 1548) ((edit-server (1 9))) "(de)HTMLization hooks for edit-server.el" single ((:url . "https://github.com/frobtech/edit-server-htmlize"))]) (edit-server . [(20141231 1358) nil "server that responds to edit requests from Chrome" single ((:url . "https://github.com/stsquad/emacs_chrome"))]) (edit-list . [(20100930 743) nil "edit a single list" single ((:url . "http://mwolson.org/static/dist/elisp/edit-list.el"))]) (edit-indirect . [(20141213 1005) ((emacs (24 3))) "Edit regions in separate buffers" single ((:url . "https://github.com/Fanael/edit-indirect"))]) (edit-color-stamp . [(20130529 1033) ((es-lib (0 2)) (cl-lib (1 0))) "Edit a hex color stamp, using a QT or the internal color picker" tar ((:url . "https://github.com/sabof/edit-color-stamp"))]) (edit-at-point . [(20150716 624) nil "edit(copy,cut..) current things(word,symbol..) under cursor" single ((:url . "http://github.com/enoson/edit-at-point.el"))]) (edebug-x . [(20130615 2325) nil "Extensions for Edebug" single ((:url . "https://github.com/ScottyB/edebug-x") (:keywords "extensions"))]) (ede-compdb . [(20150920 1333) ((ede (1 2)) (semantic (2 2)) (cl-lib (0 4))) "Support for compilation database projects in EDE" single ((:keywords "development" "ninja" "build" "cedet" "ede"))]) (edbi-sqlite . [(20150115 1101) ((emacs (24)) (edbi (0 1 3))) "Open sqlite files with edbi" single ((:url . "https://github.com/proofit404/edbi-sqlite"))]) (edbi-minor-mode . [(20150421 503) ((edbi (0 1 3))) "Use edbi with regular SQL files." single ((:url . "https://github.com/proofit404/edbi-minor-mode"))]) (edbi-django . [(20150115 1101) ((emacs (24)) (edbi (0 1 3)) (f (0 17 1))) "Run edbi with django settings" tar ((:url . "https://github.com/proofit404/edbi-django"))]) (edbi-database-url . [(20150126 403) ((emacs (24)) (edbi (0 1 3))) "Run edbi with database url" single ((:url . "https://github.com/proofit404/edbi-database-url"))]) (edbi . [(20140920 35) ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) "Emacs Database Interface" tar nil]) (ecukes . [(20150717 648) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar nil]) (eclipse-theme . [(20150929 601) nil "Theme based on Eclipse circa 2010" single ((:url . "https://github.com/abo-abo/eclipse-theme") (:keywords "themes"))]) (echo-bell . [(20151007 1825) nil "Show visual bell at right in the echo area." single ((:url . "http://www.emacswiki.org/echo-bell.el") (:keywords "echo area" "bell" "ding"))]) (ecb . [(20140215 114) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools"))]) (ebib . [(20151009 613) ((dash (2 5 0)) (parsebib (1 0)) (emacs (24 3))) "a BibTeX database manager" tar ((:keywords "text" "bibtex"))]) (ebal . [(20151020 735) ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) "Emacs interface to Cabal and Stack" single ((:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell"))]) (easy-repeat . [(20150516 148) ((emacs (24 4))) "Repeat easily" single ((:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience"))]) (easy-kill-extras . [(20150708 2318) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar ((:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience"))]) (easy-kill . [(20150713 2316) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single ((:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience"))]) (easy-escape . [(20150718 1933) nil "Improve readability of escape characters in regular expressions" single ((:url . "https://github.com/cpitclaudel/easy-escape") (:keywords "convenience" "lisp" "tools"))]) (easy-after-load . [(20121224 1849) nil "eval-after-load for all files in a directory" single ((:url . "https://github.com/pd/easy-after-load"))]) (e2wm-term . [(20141009 608) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager"))]) (e2wm-sww . [(20140524 158) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager"))]) (e2wm-svg-clock . [(20150106 506) ((e2wm (20130225 1602)) (svg-clock (0 4))) "e2wm plugin for svg-clock" single ((:url . "https://github.com/myuhe/e2wm-svg-clock.el") (:keywords "convenience" "e2wm"))]) (e2wm-pkgex4pl . [(20140525 347) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl"))]) (e2wm-direx . [(20140815 1613) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience"))]) (e2wm-bookmark . [(20120811 2350) ((e2wm (1 2))) "Bookmark plugin for e2wm.el" single ((:keywords "convenience"))]) (e2wm-R . [(20130505 2208) ((e2wm (20130225 1602)) (inlineR (20120520 2332)) (ess (20130225 1754))) "some e2wm plugin and perspective for GNU R" single ((:url . "https://github.com/myuhe/e2wm-R.el") (:keywords "convenience" "e2wm"))]) (e2wm . [(20150608 1723) ((window-layout (1 2))) "simple window manager for emacs" tar ((:keywords "tools" "window manager"))]) (e2ansi . [(20150220 1513) nil "Syntax highlighting support for `less', powered by Emacs." tar ((:url . "https://github.com/Lindydancer/e2ansi") (:keywords "faces" "languages"))]) (dynamic-ruler . [(20150826 1409) nil "Displays a dynamic ruler at point." single ((:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience"))]) (dynamic-fonts . [(20140731 526) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ((:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames"))]) (dylan-mode . [(20140610 2237) nil "Major mode for editing Dylan programs." tar nil]) (dyalog-mode . [(20151021 703) ((cl-lib (0 2))) "Major mode for editing Dyalog APL source code" tar ((:url . "https://bitbucket.org/harsman/dyalog-mode/") (:keywords "languages"))]) (duplicate-thing . [(20120515 948) nil "Duplicate current line & selection" single ((:keywords "command" "duplicate" "line" "selection"))]) (dummyparens . [(20141009 324) nil "parenthesis auto-pairing and wrapping" single ((:url . "https://github.com/snosov1/dummyparens") (:keywords "dummyparens" "auto-pair" "wrapping"))]) (dummy-h-mode . [(20140816 533) nil "switch major mode to c-/c++-/objc-mode on .h file" single ((:keywords "c-mode" "c++-mode" "objc-mode"))]) (ducpel . [(20140418 2216) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:url . "https://github.com/alezost/ducpel") (:keywords "games"))]) (dts-mode . [(20150403 1604) nil "Major mode for Devicetree source code" single ((:keywords "languages"))]) (dtrt-indent . [(20151013 214) nil "Adapt to foreign indentation offsets" tar ((:keywords "convenience" "files" "languages" "c"))]) (dtrace-script-mode . [(20150213 2223) nil "DTrace code editing commands for Emacs" single nil]) (dsvn . [(20130120 1257) nil "Subversion interface" single ((:keywords "docs"))]) (drupal-spell . [(20130520 955) nil "Aspell extra dictionary for Drupal" tar ((:url . "https://github.com/arnested/drupal-spell") (:keywords "wp"))]) (drupal-mode . [(20150830 1227) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal"))]) (dropdown-list . [(20120329 936) nil "Drop-down menu interface" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/dropdown-list.el") (:keywords "menu" "convenience" "dropdown"))]) (dropbox . [(20130513 1537) ((json (1 2)) (oauth (1 0 3))) "Emacs backend for dropbox" single ((:keywords "dropbox"))]) (drill-instructor-AZIK-force . [(20120907 1817) ((popup (0 5))) "Support AZIK input" tar nil]) (drag-stuff . [(20150717 532) nil "Drag stuff (lines, words, region, etc...) around" tar nil]) (draft-mode . [(20140609 756) nil "Rough drafting for Emacs." single ((:url . "https://github.com/gaudecker/draft-mode") (:keywords "draft" "drafting"))]) (dpaste_de . [(20131015 525) ((web (0 3 7))) "Emacs mode to paste to dpaste.de" single ((:keywords "pastebin"))]) (dpaste . [(20150528 600) nil "Emacs integration for dpaste.com" single ((:keywords "paste" "pastie" "pastebin" "dpaste" "python"))]) (downplay-mode . [(20140110 2058) nil "focus attention on a region of the buffer" single ((:url . "https://github.com/tobias/downplay-mode/"))]) (download-region . [(20150807 32) ((cl-lib (0 3))) "Simple in-buffer download manager" single ((:url . "http://hins11.yu-yake.com/"))]) (dot-mode . [(20140128 916) nil "No description available." single nil]) (dos . [(20140808 1435) nil "Major mode for editing Dos scripts" single ((:keywords "languages"))]) (doremi-mac . [(20150104 1353) nil "A macro for defining Do Re Mi commands." single ((:url . "http://www.emacswiki.org/doremi-mac.el") (:keywords "extensions" "convenience" "keys" "repeat" "cycle"))]) (doremi-frm . [(20150727 1354) ((doremi (0)) (faces+ (0)) (frame-fns (0)) (hexrgb (0))) "Incrementally adjust face attributes and frame parameters." single ((:url . "http://www.emacswiki.org/doremi-frm.el") (:keywords "frames" "extensions" "convenience" "keys" "repeat" "cycle"))]) (doremi-cmd . [(20150104 1352) ((doremi (0))) "Miscellaneous Do Re Mi commands" single ((:url . "http://www.emacswiki.org/doremi-cmd.el") (:keywords "keys" "cycle" "repeat"))]) (doremi . [(20150815 738) nil "Do Re Mi: Incremental change using arrow keys or mouse wheel." single ((:url . "http://www.emacswiki.org/doremi.el") (:keywords "keys" "cycle" "repeat" "higher-order"))]) (dom . [(20150414 1610) ((cl-lib (0 5))) "DOM implementation and manipulation library" single ((:url . "http://www.github.com/toroidal-code/dom.el/") (:keywords "xml" "dom"))]) (dollaro . [(20130620 1325) ((s (1 6 0))) "simple text templates" single ((:keywords "tools" "convenience"))]) (dokuwiki-mode . [(20140130 936) nil "Major mode for DokuWiki document" single ((:url . "https://github.com/kbkbkbkb1/emacs-dokuwiki") (:keywords "dokuwiki"))]) (dockerfile-mode . [(20151003 501) nil "Major mode for editing Docker's Dockerfiles" single nil]) (docker-tramp . [(20150908 1955) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" single ((:url . "https://github.com/emacs-pe/docker-tramp.el") (:keywords "docker" "convenience"))]) (docker . [(20151001 131) ((emacs (24 4)) (dash (1 5 0)) (magit-popup (2 0 50)) (s (1 9 0))) "Emacs interface to Docker" tar nil]) (docean . [(20150927 1118) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "Interact with DigitalOcean from Emacs." single ((:url . "https://github.com/emacs-pe/docean.el") (:keywords "convenience"))]) (docbook-snippets . [(20150714 925) ((yasnippet (0 8 0))) "Yasnippets for DocBook" tar ((:url . "https://github.com/jhradilek/emacs-docbook-snippets") (:keywords "snippets" "docbook"))]) (dna-mode . [(20130821 1105) nil "a major mode for editing dna sequences" tar ((:url . "http://www.mahalito.net/~harley/elisp/dna-mode.el") (:keywords "dna" "emacs" "editing"))]) (dkmisc . [(20131110 315) ((emacs (24 1))) "Miscellaneous functions required by dk* packages." tar nil]) (dklrt . [(20131110 541) ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) "Ledger Recurring Transactions." tar nil]) (dkdo . [(20131110 319) ((dkmisc (0 50)) (emacs (24 1))) "Do List major mode based on org-mode." tar nil]) (django-theme . [(20131022 202) nil "Custom face theme for Emacs" single ((:url . "http://github/anrzejsliwa/django-theme"))]) (django-snippets . [(20131229 811) ((yasnippet (0 8 0))) "Yasnippets for django" tar ((:url . "https://github.com/myfreeweb/django-mode"))]) (django-mode . [(20150207 517) nil "Major mode for Django web framework." tar ((:keywords "languages"))]) (django-manage . [(20151024 2330) ((hydra (0 13 2))) "Django minor mode for commanding manage.py" single ((:keywords "languages"))]) (dizzee . [(20111009 616) nil "A more pleasant way to manage your project's subprocesses in Emacs." tar nil]) (distinguished-theme . [(20151007 248) nil "A dark and elegant theme for emacs." single ((:url . "https://github.com/Lokaltog/distinguished-theme"))]) (display-theme . [(20140115 756) ((emacs (24))) "display current theme(s) at mode-line" single ((:url . "https://github.com/kawabata/emacs-display-theme/") (:keywords "tools"))]) (dispass . [(20140202 731) ((dash (1 0 0))) "Emacs wrapper for DisPass" single ((:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes"))]) (disk . [(20081128 706) nil "simplified find-file, revert-file, save-buffer interface" single ((:url . "http://www.emacswiki.org/emacs/DiskKey") (:keywords "convenience"))]) (discover-my-major . [(20151008 12) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single ((:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys"))]) (discover-js2-refactor . [(20140129 752) ((js2-refactor (20131221 501)) (discover (20140103 1339))) "Adds discover context menu for js2-refactor" single ((:keywords "js2-refactor" "discover"))]) (discover-clj-refactor . [(20150328 759) ((clj-refactor (0 14 0)) (discover (0 3))) "Adds discover context menu for clj-refactor" single ((:keywords "clj-refactor" "discover" "convenience"))]) (discover . [(20140103 1339) ((makey (0 3))) "discover more of Emacs" single nil]) (disaster . [(20130509 1055) nil "Disassemble C/C++ code under cursor in Emacs" single ((:url . "https://github.com/jart/disaster") (:keywords "tools"))]) (dirtree-prosjekt . [(20140129 104) ((prosjekt (0 3)) (dirtree (0 1))) "dirtree integration for prosjekt." single ((:url . "https://github.com/abingham/prosjekt"))]) (dirtree . [(20140129 32) ((tree-mode (1 1 1 1)) (windata (0))) "Directory tree views" single nil]) (direx-grep . [(20140515 806) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience"))]) (direx . [(20151023 1606) nil "Simple Directory Explorer" tar ((:keywords "convenience"))]) (dired-toggle-sudo . [(20131022 626) nil "Browse directory with sudo privileges." single ((:keywords "emacs" "dired"))]) (dired-toggle . [(20140907 1349) nil "provide a simple way to toggle dired buffer for current directory" single ((:url . "https://github.com/fasheng/dired-toggle") (:keywords "dired" "toggle"))]) (dired-subtree . [(20150908 1033) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" single ((:keywords "files"))]) (dired-sort-menu . [(20130824 507) nil "provide menu/dialogue for dired sort options" single ((:url . "http://centaur.maths.qmw.ac.uk/Emacs/") (:keywords "dired" "sort" "menu" "dialogue"))]) (dired-sort-menu+ . [(20150104 1351) ((dired-sort-menu (0))) "Extensions to `dired-sort-menu.el'" single ((:url . "http://www.emacswiki.org/dired-sort-menu+.el") (:keywords "directories" "diredp" "dired"))]) (dired-sort . [(20090208 2038) nil "Sort files in dired." single ((:url . "http://www.emacswiki.org/emacs/download/dired-sort.el") (:keywords "dired" "sort"))]) (dired-single . [(20130824 500) nil "Reuse the current dired buffer to visit another directory" single ((:keywords "dired" "reuse" "buffer"))]) (dired-ranger . [(20150819 948) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Implementation of useful ranger features for dired" single ((:keywords "files"))]) (dired-rainbow . [(20141214 543) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" single ((:keywords "files"))]) (dired-open . [(20150819 948) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Open files from dired using using custom actions" single ((:keywords "files"))]) (dired-narrow . [(20150908 1353) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Live-narrowing of search results for dired" single ((:keywords "files"))]) (dired-k . [(20151015 2315) ((cl-lib (0 5)) (emacs (24))) "highlight dired buffer by file size, modified time, git status" tar ((:url . "https://github.com/syohex/emacs-dired-k"))]) (dired-imenu . [(20140109 810) nil "imenu binding for dired mode" single ((:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu"))]) (dired-hacks-utils . [(20150819 948) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" single ((:keywords "files"))]) (dired-filter . [(20150909 1136) ((dash (2 10 0)) (dired-hacks-utils (0 0 1))) "Ibuffer-like filtering for dired" single ((:keywords "files"))]) (dired-fdclone . [(20150417 132) nil "dired functions and settings to mimic FDclone" single ((:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired"))]) (dired-efap . [(20140122 856) nil "Edit Filename At Point in a dired buffer" single ((:url . "https://github.com/juan-leon/dired-efap") (:keywords "dired" "environment" "files" "renaming"))]) (dired-dups . [(20130527 1425) nil "Find duplicate files and display them in a dired buffer" single ((:url . "https://github.com/vapniks/dired-dups") (:keywords "unix"))]) (dired-details . [(20130824 458) nil "make file details hide-able in dired" single ((:keywords "dired" "hide"))]) (dired-details+ . [(20150104 1350) ((dired-details (0))) "Enhancements to library `dired-details+.el'." single ((:url . "http://www.emacswiki.org/dired-details+.el") (:keywords "dired" "frames"))]) (dired-avfs . [(20141203 732) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "AVFS support for dired" single ((:keywords "files"))]) (dired+ . [(20151002 1015) nil "Extensions to Dired." single ((:url . "http://www.emacswiki.org/dired+.el") (:keywords "unix" "mouse" "directories" "diredp" "dired"))]) (dircmp . [(20141204 956) nil "Compare and sync directories." tar ((:url . "https://github.com/matthewlmcclure/dircmp-mode") (:keywords "unix" "tools"))]) (dionysos . [(20151013 103) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar ((:url . "https://github.com/nlamirault/dionysos") (:keywords "music"))]) (diminish . [(20091203 1012) nil "Diminished modes are minor modes with no modeline display" single ((:url . "http://www.eskimo.com/~seldon") (:keywords "extensions" "diminish" "minor" "codeprose"))]) (dim-autoload . [(20150815 832) nil "dim complete autoload cookie lines" single ((:url . "http://github.com/tarsius/dim-autoload") (:keywords "convenience"))]) (digistar-mode . [(20150402 1722) nil "major mode for Digistar scripts" single ((:keywords "languages"))]) (diffview . [(20150928 2211) nil "View diffs in side-by-side format" single ((:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff"))]) (diffscuss-mode . [(20141014 1657) nil "Major mode for diffscuss files." single ((:keywords "tools"))]) (diff-hl . [(20150929 1146) ((cl-lib (0 2))) "Highlight uncommitted changes" tar ((:url . "https://github.com/dgutov/diff-hl") (:keywords "vc" "diff"))]) (dictionary . [(20140717 2029) ((connection (1 10)) (link (1 10))) "Client for rfc2229 dictionary servers" single ((:keywords "interface" "dictionary"))]) (dictcc . [(20150731 255) ((emacs (24)) (cl-lib (0 5)) (s (1 0)) (dash (2 0)) (helm (1 0))) "Look up translations on dict.cc" single ((:keywords "convenience"))]) (dic-lookup-w3m . [(20150706 417) ((w3m (20120723 324)) (stem (20120826))) "look up dictionaries on the Internet" tar ((:keywords "emacs-w3m" "w3m" "dictionary"))]) (desktop-registry . [(20140119 1343) nil "Keep a central registry of desktop files" single ((:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience"))]) (desktop+ . [(20151004 1240) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single ((:url . "https://github.com/ffevotte/desktop-plus"))]) (describe-number . [(20151026 1421) nil "Describe number at point." single ((:url . "https://github.com/netromdk/describe-number") (:keywords "describe" "value" "help"))]) (demo-it . [(20151020 1229) nil "Utility functions for creating demonstrations" single ((:keywords "demonstration" "presentation"))]) (demangle-mode . [(20150926 1250) ((emacs (24)) (cl-lib (0 1))) "Automatically demangle C++ symbols" single ((:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools"))]) (delim-kill . [(20100516 2320) nil "Kill text between delimiters." single ((:url . "http://github.com/thomas11/delim-kill/tree/master") (:keywords "convenience" "languages"))]) (delight . [(20141128 637) nil "A dimmer switch for your lighter text." single ((:url . "http://www.emacswiki.org/emacs/DelightedModes"))]) (deft . [(20151008 822) nil "quickly browse, filter, and edit plain text notes" single ((:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity"))]) (defproject . [(20151006 549) ((emacs (24))) "Manager dir-locals and project specific variables" single ((:url . "https://github.com/kotfic/defproject") (:keywords "convenience"))]) (define-word . [(20150709 1223) ((emacs (24 1))) "display the definition of word at point." single ((:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience"))]) (deferred . [(20151007 1657) nil "Simple asynchronous functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async"))]) (default-text-scale . [(20150227 956) nil "Easily adjust the font size in all frames" single ((:keywords "frames" "faces"))]) (dedukti-mode . [(20150820 708) nil "Major mode for Dedukti files" single nil]) (dedicated . [(20090428 1231) nil "A very simple minor mode for dedicated buffers" single ((:keywords "dedicated" "buffer"))]) (decl . [(20150814 307) ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3))) "Library for organizing code declaratively" single ((:url . "https://github.com/preetpalS/decl.el"))]) (debug-print . [(20140125 1619) ((emacs (24))) "A nice printf debugging environment by the way Gauche do" single ((:url . "https://github.com/kenoss/debug-print") (:keywords "extensions" "lisp" "tools" "maint"))]) (debpaste . [(20140617 2258) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single ((:url . "http://github.com/alezost/debpaste.el") (:keywords "paste"))]) (ddskk . [(20150912 1820) ((ccc (1 43)) (cdb (20141201 754))) "Simple Kana to Kanji conversion program." tar nil]) (db-pg . [(20130131 1102) ((pg (0 12)) (db (0 0 6))) "A PostgreSQL adapter for emacs-db" single ((:keywords "data" "comm" "database" "postgresql"))]) (db . [(20140421 1411) ((kv (0 0 11))) "A database for EmacsLisp" single ((:keywords "data" "lisp"))]) (dayone . [(20131117 255) ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) "Utility script for Day One" tar ((:url . "https://github.com/mori-dev/emacs-dayone") (:keywords "day one" "tools" "convenience"))]) (datomic-snippets . [(20130707 1315) ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) "Yasnippets for Datomic" tar nil]) (date-field . [(20141128 1705) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single ((:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets"))]) (date-at-point . [(20150108 418) nil "Add `date' to `thing-at-point' function" single ((:url . "https://gitorious.org/alezost-emacs/date-at-point") (:keywords "convenience"))]) (dash-functional . [(20150828 413) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:keywords "lisp" "functions" "combinators"))]) (dash-at-point . [(20140626 35) nil "Search the word at point with Dash" single ((:url . "https://github.com/stanaka/dash-at-point"))]) (dash . [(20151021 113) nil "A modern list library for Emacs" single ((:keywords "lists"))]) (dart-mode . [(20150721 1654) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) "Major mode for editing Dart files" single ((:url . "http://code.google.com/p/dart-mode") (:keywords "language"))]) (darktooth-theme . [(20151028 33) nil "Color theme for Emacs, when soothe and gruvbox collide" single ((:url . "http://github.com/emacsfodder/emacs-theme-darktooth"))]) (darkmine-theme . [(20151005 115) nil "Yet another emacs dark color theme." single ((:url . "https://github.com/pierre-lecocq/darkmine-theme"))]) (darkburn-theme . [(20151003 100) nil "A not-so-low contrast color theme for Emacs." single ((:url . "http://github.com/gorauskas/darkburn-theme"))]) (dark-souls . [(20140314 428) nil "Prepare to die" single ((:url . "http://github.com/tomjakubowski/dark-souls.el") (:keywords "games"))]) (dark-krystal-theme . [(20141115 2301) ((emacs (24 0))) "an Emacs 24 theme based on Dark Krystal (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (darcula-theme . [(20150629 235) nil "Inspired by IntelliJ's Darcula theme" single ((:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces"))]) (darcsum . [(20140315 2110) nil "a pcl-cvs like interface for managing darcs patches" tar ((:keywords "completion" "convenience" "tools" "vc"))]) (dakrone-theme . [(20140211 2045) nil "dakrone's custom dark theme" single ((:url . "https://github.com/dakrone/dakrone-theme") (:keywords "color" "themes" "this" "file" "is" "not" "part" "of" "gnu" "emacs."))]) (dactyl-mode . [(20140906 1025) nil "Major mode for editing Pentadactyl config files" single ((:url . "https://github.com/luxbock/dactyl-mode") (:keywords "languages" "vim"))]) (d-mode . [(20150621 614) nil "D Programming Language major mode for (X)Emacs" single ((:keywords "d" "programming" "language" "emacs" "cc-mode"))]) (cython-mode . [(20140705 1229) nil "Major mode for editing Cython files" single nil]) (cypher-mode . [(20140807 950) nil "major mode for editing cypher scripts" single ((:url . "http://github.com/fxbois/cypher-mode") (:keywords "cypher" "graph"))]) (cyphejor . [(20150914 427) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single ((:url . "https://github.com/cyphejor") (:keywords "mode-line" "major-mode"))]) (cygwin-mount . [(20131111 1346) nil "Teach EMACS about cygwin styles and mount points." single ((:keywords "files" "mount" "cygwin"))]) (cycle-themes . [(20150402 2009) ((cl-lib (0 5))) "A global minor mode to make switching themes easier" single ((:url . "http://github.com/toroidal-code/cycle-themes.el") (:keywords "themes" "utility" "global minor mode"))]) (cycle-resize . [(20150602 1223) nil "Cycle resize the current window horizontally or vertically" single ((:url . "https://github.com/pierre-lecocq/cycle-resize"))]) (cycbuf . [(20131203 1237) nil "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" single ((:url . "https://github.com/martinp26/cycbuf") (:keywords "files" "convenience" "buffer switching"))]) (cyberpunk-theme . [(20150828 508) nil "Cyberpunk Color Theme" single ((:keywords "color" "theme" "cyberpunk"))]) (cus-edit+ . [(20150814 749) nil "Enhancements to `cus-edit.el'." single ((:url . "http://www.emacswiki.org/cus-edit+.el") (:keywords "help" "customize" "help" "faces"))]) (cursor-test . [(20131207 932) ((emacs (24))) "testing library for cursor position in emacs." single ((:url . "https://github.com/ainame/cursor-test.el"))]) (cursor-chg . [(20150104 1339) nil "Change cursor dynamically, depending on the context." single ((:url . "http://www.emacswiki.org/cursor-chg.el") (:keywords "cursor" "accessibility"))]) (cuda-mode . [(20150416 900) nil "NVIDIA CUDA Major Mode" single ((:keywords "c" "languages"))]) (cucumber-goto-step . [(20131209 2119) ((pcre2el (1 5))) "Jump to cucumber step definition" single ((:url . "http://orthogonal.me"))]) (ctxmenu . [(20140303 1342) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup"))]) (ctl-mode . [(20131229 2316) nil "Major mode for editing GrADS script files" single ((:keywords "grads" "script" "major-mode"))]) (ctags-update . [(20150427 2014) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "exuberant-ctags" "etags"))]) (ctags . [(20110911 304) nil "Exuberant Ctags utilities for Emacs" single ((:url . "https://bitbucket.org/semente/ctags.el") (:keywords "tags" "ctags" "etags"))]) (ctable . [(20140304 1659) nil "Table component for Emacs Lisp" single ((:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table"))]) (csv-nav . [(20130407 1120) nil "navigate and edit CSV files" single nil]) (cssh . [(20150810 1009) nil "clusterssh implementation for emacs" single ((:url . "http://tapoueh.org/emacs/cssh.html") (:keywords "clusterssh" "ssh" "cssh"))]) (cssfmt . [(20150818 2128) nil "Cssfmt interface" single ((:url . "https://github.com/KeenS/cssfmt.el") (:keywords "css" "code" "formatter"))]) (css-eldoc . [(20150124 1923) nil "an eldoc-mode plugin for CSS source code" tar nil]) (css-comb . [(20150502 1328) nil "Sort CSS properties in a particular order using CSS Comb" single ((:url . "https://github.com/channikhabra/css-comb.el"))]) (csharp-mode . [(20150925 1354) nil "C# mode derived mode" single ((:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode"))]) (cryptsy-public-api . [(20141008 528) ((json (1 2))) "Library for working with the Cryptsy public API" single ((:keywords "cryptsy" "bitcoin" "litecoin" "dogecoin"))]) (cryptol-mode . [(20140426 1004) nil "Cryptol major mode for Emacs" single ((:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography"))]) (crosshairs . [(20150104 1339) ((hl-line+ (0)) (col-highlight (0)) (vline (0))) "Highlight the current line and column." single ((:url . "http://www.emacswiki.org/crosshairs.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility"))]) (crontab-mode . [(20090510 1355) nil "Mode for editing crontab files" single ((:url . "http://www.mahalito.net/~harley/elisp/crontab-mode.el") (:keywords "cron" "crontab" "emacs"))]) (crm-custom . [(20140816 948) nil "Alternate `completing-read-multiple' that uses `completing-read'" single ((:url . "https://github.com/DarwinAwardWinner") (:keywords "completion" "minibuffer" "multiple elements"))]) (creole-mode . [(20130721 1750) nil "a markup mode for creole" single ((:url . "https://github.com/nicferrier/creole-mode") (:keywords "hypermedia" "wp"))]) (creole . [(20140924 800) ((noflet (0 0 3)) (kv (0 0 17))) "A parser for the Creole Wiki language" single ((:keywords "lisp" "creole" "wiki"))]) (creds . [(20140510 1006) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar nil]) (crappy-jsp-mode . [(20140311 231) nil "A pretty crappy major-mode for jsp." single ((:keywords "jsp" "major" "mode"))]) (crab . [(20150126 2137) ((websocket (1 0)) (json (1 2))) "WebSocket server to remotely control a browser" single ((:url . "https://github.com/puffnfresh/crab-emacs"))]) (cpputils-cmake . [(20151008 1706) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar nil]) (cperl-mode . [(20140309 122) nil "Perl code editing commands for Emacs" single ((:keywords "languages" "perl"))]) (cp5022x . [(20120323 1635) nil "cp50220, cp50221, cp50222 coding system" single ((:keywords "languages" "cp50220" "cp50221" "cp50222" "cp51932" "cp932"))]) (counsel . [(20151024 1010) ((emacs (24 1)) (swiper (0 4 0))) "Various completion functions using Ivy" single ((:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching"))]) (corral . [(20150924 805) nil "Quickly surround text with delimiters" single ((:url . "http://github.com/nivekuil/corral"))]) (control-mode . [(20140218 607) nil "A \"control\" mode, similar to vim's \"normal\" mode" single ((:url . "https://github.com/stephendavidmarsh/control-mode") (:keywords "convenience" "emulations"))]) (connection . [(20140717 2029) nil "TCP-based client connection" single ((:keywords "network"))]) (conkeror-minor-mode . [(20150114 804) nil "Mode for editing conkeror javascript files." single ((:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools"))]) (confluence . [(20140410 1723) ((xml-rpc (1 6 4))) "Emacs mode for interacting with confluence wikis" tar ((:url . "http://code.google.com/p/confluence-el/") (:keywords "confluence" "wiki" "xmlrpc"))]) (concurrent . [(20150309 2052) ((deferred (0 3 1))) "Concurrent utility functions for emacs lisp" single ((:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent"))]) (company-ycmd . [(20151022 1010) ((ycmd (0 1)) (company (0 8 3)) (deferred (0 2 0)) (s (1 9 0)) (dash (1 2 0))) "company-mode backend for ycmd" single ((:url . "https://github.com/abingham/emacs-ycmd"))]) (company-ycm . [(20140904 1117) ((ycm (0 1))) "company-ycm" single ((:keywords "abbrev"))]) (company-web . [(20151023 1346) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar ((:url . "https://github.com/osv/company-web") (:keywords "html" "company"))]) (company-try-hard . [(20150902 1506) ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) "get all completions from company backends" single ((:keywords "matching"))]) (company-tern . [(20150525 216) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:url . "https://github.com/proofit404/company-tern"))]) (company-restclient . [(20150127 647) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single ((:url . "https://github.com/iquiw/company-restclient"))]) (company-racer . [(20150628 1933) ((emacs (24)) (cl-lib (0 5)) (company (0 8 0)) (deferred (0 3 1))) "Company integration for racer" single ((:url . "https://github.com/emacs-pe/company-racer") (:keywords "convenience"))]) (company-quickhelp . [(20150804 319) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single ((:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp"))]) (company-qml . [(20151027 835) ((qml-mode (0 1)) (company (0 8 12))) "Company backend for QML files" tar ((:keywords "extensions"))]) (company-nixos-options . [(20151013 1609) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single ((:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (company-math . [(20150830 1637) ((company (0 8 0)) (math-symbol-lists (1 0))) "Completion backends for unicode math symbols and latex tags" single ((:url . "https://github.com/vspinu/company-math") (:keywords "unicode" "symbols" "completion"))]) (company-jedi . [(20151021 1441) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 5))) "company-mode completion back-end for Python JEDI" single nil]) (company-irony-c-headers . [(20151018 209) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single ((:url . "https://github.com/hotpxl/company-irony-c-headers") (:keywords "c" "company"))]) (company-irony . [(20150810 239) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single ((:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience"))]) (company-inf-ruby . [(20140805 1354) ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) "company-mode completion back-end for inf-ruby" single ((:url . "https://github.com/company-mode/company-inf-ruby"))]) (company-go . [(20150903 1944) ((company (0 8 0)) (go-mode (1 0 0))) "company-mode backend for Go (using gocode)" single ((:keywords "languages"))]) (company-ghci . [(20150912 1309) ((company (0 8 11)) (haskell-mode (13))) "company backend which uses the current ghci process." single nil]) (company-ghc . [(20151008 508) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 4 0 0)) (emacs (24))) "company-mode ghc-mod backend" single ((:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion"))]) (company-flx . [(20151020 1101) ((emacs (24)) (company (0 8 12)) (flx (0 5))) "flx based fuzzy matching for company" single ((:url . "https://github.com/PythonNut/company-flx") (:keywords "convenience" "company" "fuzzy" "flx"))]) (company-emoji . [(20151027 2019) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" single ((:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company" "honk"))]) (company-edbi . [(20150525 214) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single ((:url . "https://github.com/proofit404/company-edbi"))]) (company-dcd . [(20150901 404) ((company (0 9)) (flycheck-dmd-dub (0 7)) (yasnippet (0 8)) (popwin (0 7)) (cl-lib (0 5)) (helm (1 5 6))) "Company backend for Dlang using DCD." tar ((:url . "http://github.com/tsukimizake/company-dcd") (:keywords "languages"))]) (company-coq . [(20150718 1931) ((company-math (0)) (company (0 8 12)) (yasnippet (0 9 0 1)) (dash (2 10 0)) (cl-lib (0 5))) "Company-mode backend for Proof General's coq-mode" tar nil]) (company-cabal . [(20151002 429) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar ((:url . "https://github.com/iquiw/company-cabal"))]) (company-c-headers . [(20150801 901) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" single ((:keywords "development" "company"))]) (company-auctex . [(20150620 1421) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Company-mode auto-completion for AUCTeX" single ((:url . "https://github.com/alexeyr/company-auctex/"))]) (company-arduino . [(20150614 126) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5)) (company-irony (0 1 0)) (company-c-headers (20140930)) (arduino-mode (1 0))) "company-mode for Arduino" single ((:url . "https://github.com/yuutayamada/company-arduino") (:keywords "convenience" "development" "company"))]) (company-ansible . [(20150901 250) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar ((:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible"))]) (company-anaconda . [(20151004 158) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single ((:url . "https://github.com/proofit404/anaconda-mode"))]) (company . [(20151023 1754) ((emacs (24 1)) (cl-lib (0 5))) "Modular text completion framework" tar ((:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching"))]) (common-lisp-snippets . [(20150910 347) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar ((:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets"))]) (comment-dwim-2 . [(20150825 1549) nil "An all-in-one comment command to rule them all" single ((:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience"))]) (commander . [(20140120 1052) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv"))]) (command-log-mode . [(20150615 716) nil "log keyboard commands to buffer" single ((:url . "https://github.com/lewang/command-log-mode") (:keywords "help"))]) (column-marker . [(20121128 43) nil "Highlight certain character columns" single ((:keywords "tools" "convenience" "highlight"))]) (column-enforce-mode . [(20140902 949) nil "Highlight text that extends beyond a  column" single ((:url . "www.github.com/jordonbiondo/column-enforce-mode"))]) (colorsarenice-theme . [(20150421 1336) ((emacs (24))) "A colorful color theme." tar nil]) (color-theme-solarized . [(20150619 1734) ((color-theme (6 5 5))) "Solarized themes for Emacs" tar nil]) (color-theme-sanityinc-tomorrow . [(20150803 1419) nil "A version of Chris Kempson's various Tomorrow themes" tar nil]) (color-theme-sanityinc-solarized . [(20150803 1420) nil "A version of Ethan Schoonover's Solarized themes" tar nil]) (color-theme-buffer-local . [(20151012 1628) nil "No description available." single nil]) (color-theme-approximate . [(20140227 2036) nil "Makes Emacs theme works on terminal transparently" single nil]) (color-theme . [(20080305 34) nil "install color themes" tar ((:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?ColorTheme") (:keywords "faces"))]) (color-moccur . [(20141222 1635) nil "multi-buffer occur (grep) mode" single ((:url . "http://www.bookshelf.jp/elc/color-moccur.el") (:keywords "convenience"))]) (color-identifiers-mode . [(20150602 1804) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single ((:url . "https://github.com/ankurdave/color-identifiers-mode") (:keywords "faces" "languages"))]) (colonoscopy-theme . [(20141115 2301) ((emacs (24 0))) "an Emacs 24 theme based on Colonoscopy (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (colemak-evil . [(20140508 1612) ((evil (1 0 8))) "Colemak-friendly keybindings for Evil." single ((:url . "https://github.com/patbl/colemak-evil"))]) (col-highlight . [(20150104 1334) ((vline (0))) "Highlight the current column." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/col-highlight.el") (:keywords "faces" "frames" "emulation" "highlight" "cursor" "accessibility"))]) (coffee-mode . [(20151019 2009) ((emacs (24 1)) (cl-lib (0 5))) "Major mode to edit CoffeeScript files in Emacs" single ((:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode"))]) (coffee-fof . [(20131012 530) ((coffee-mode (0 4 1))) "A coffee-mode configuration for `ff-find-other-file'." single ((:url . "http://github.com/yasuyk/coffee-fof") (:keywords "coffee-mode"))]) (codic . [(20150926 427) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:url . "https://github.com/syohex/emacs-codic"))]) (codesearch . [(20141019 625) ((dash (2 8 0))) "Easy access to the codesearch tools" single ((:url . "https://github.com/abingham/codesearch.el") (:keywords "tools" "development" "search"))]) (codebug . [(20140929 1437) nil "Interact with codebug" single ((:url . "http://www.shanedowling.com/"))]) (cobra-mode . [(20140116 1316) nil "Major mode for .NET-based Cobra language" single ((:url . "http://github.com/Nekroze/cobra-mode") (:keywords "languages"))]) (cn-outline . [(20100321 914) nil "No description available." single nil]) (cmm-mode . [(20150224 2346) nil "Major mode for C-- source code" single nil]) (cmds-menu . [(20150104 1334) nil "`Recent Commands' submenu for the menu-bar `Tools' menu." single ((:url . "http://www.emacswiki.org/cmds-menu.el") (:keywords "convenience" "command" "menu"))]) (cmake-project . [(20150720 1359) nil "Integrates CMake build process with Emacs" single ((:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools"))]) (cmake-mode . [(20151012 726) nil "No description available." single nil]) (cmake-ide . [(20151026 1311) ((emacs (24 1))) "Calls CMake to find out include paths and other compiler flags" single ((:url . "http://github.com/atilaneves/cmake-ide") (:keywords "languages"))]) (cmake-font-lock . [(20150828 1327) ((cmake-mode (0 0))) "Advanced, type aware, highlight support for CMake" single ((:url . "https://github.com/Lindydancer/cmake-font-lock") (:keywords "faces" "languages"))]) (cm-mode . [(20141112 1715) nil "Minor mode for CriticMarkup" single ((:keywords "text" "markdown"))]) (clues-theme . [(20140922 2056) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single ((:url . "https://github.com/jasonm23/emacs-clues-theme"))]) (cloud-to-butt-erc . [(20130627 1608) nil "Replace 'the cloud' with 'my butt'" single ((:url . "http://www.github.com/leathekd/cloud-to-butt-erc"))]) (closure-lint-mode . [(20101118 1324) nil "minor mode for the Closure Linter" single ((:url . "https://github.com/r0man/closure-lint-mode") (:keywords "tools" "closure" "javascript" "lint" "flymake"))]) (clojure-snippets . [(20150504 144) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar nil]) (clojure-quick-repls . [(20150814 36) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single ((:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript"))]) (clojure-mode-extra-font-locking . [(20150110 505) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp"))]) (clojure-mode . [(20151026 1453) ((emacs (24 3))) "Major mode for Clojure code" single ((:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp"))]) (clojure-cheatsheet . [(20150826 210) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single ((:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm"))]) (clocker . [(20150505 843) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single ((:keywords "org"))]) (cloc . [(20151007 201) ((cl-lib (0 5))) "count lines of code over emacs buffers" single ((:url . "https://github.com/cosmicexplorer/cloc-emacs") (:keywords "cloc" "count" "source" "code" "lines"))]) (clmemo . [(20150220 547) nil "Change Log MEMO" tar ((:url . "https://github.com/ataka/clmemo") (:keywords "convenience"))]) (cljsbuild-mode . [(20140619 126) nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single ((:url . "http://github.com/kototama/cljsbuild-mode") (:keywords "clojure" "clojurescript" "leiningen" "compilation"))]) (cljr-helm . [(20150425 1307) ((clj-refactor (0 13 0)) (helm (1 5 6))) "Wraps clojure refactor commands with helm" single ((:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor"))]) (clj-refactor . [(20151021 1408) ((emacs (24 4)) (s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (cider (0 10 0 -3)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar ((:keywords "convenience" "clojure" "cider"))]) (clips-mode . [(20131012 1401) nil "Major mode for editing CLIPS code and REPL" tar nil]) (clippy . [(20140417 414) ((pos-tip (1 0))) "Show tooltip with function documentation at point" single ((:url . "https://github.com/Fuco1/clippy.el") (:keywords "docs"))]) (clipmon . [(20150306 1223) nil "Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert" tar ((:url . "https://github.com/bburns/clipmon") (:keywords "convenience"))]) (cliphist . [(20151012 529) ((popup (0 5 0))) "Read clipboard history from Parcellite on Linux and Flycut on OS X" tar ((:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipboard" "manager" "history"))]) (clevercss . [(20131228 1755) nil "A major mode for editing CleverCSS files" single ((:keywords "languages" "css"))]) (clean-aindent-mode . [(20150816 2029) nil "Simple indent and unindent, trims indent white-space" single ((:url . "https://github.com/pmarinov/clean-aindent-mode") (:keywords "indentation" "whitespace" "backspace"))]) (clang-format . [(20151007 1000) ((cl-lib (0 3))) "Format code using clang-format" single ((:keywords "tools" "c"))]) (cl-lib-highlight . [(20140127 1312) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:url . "https://github.com/skeeto/cl-lib-highlight"))]) (circe . [(20151015 224) ((cl-lib (0 5))) "Client for IRC in Emacs" tar ((:url . "https://github.com/jorgenschaefer/circe"))]) (cinspect . [(20150715 1933) ((emacs (24)) (cl-lib (0 5)) (deferred (0 3 1)) (python-environment (0 0 2))) "Use cinspect to look at the CPython source of builtins and other C objects!" single ((:url . "https://github.com/inlinestyle/cinspect-mode") (:keywords "python"))]) (cil-mode . [(20150223 250) nil "Common Intermediate Language mode" single ((:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages"))]) (cider-spy . [(20150625 758) ((cider (0 5 0)) (dash (2 5 0)) (cl-lib (0 5))) "Spy on CIDER to get info" single ((:url . "http://www.github.com/jonpither/cider-spy") (:keywords "languages" "clojure" "cider" "nrepl"))]) (cider-profile . [(20141120 625) ((cider (0 8 0))) "CIDER profiling support" single ((:url . "http://github.com/thunknyc/nrepl-profile") (:keywords "cider" "clojure" "profiling"))]) (cider-eval-sexp-fu . [(20150320 2015) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexps." single ((:keywords "languages" "clojure" "cider"))]) (cider-decompile . [(20131116 1002) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" single ((:url . "http://www.github.com/clojure-emacs/cider-decompile") (:keywords "languages" "clojure" "cider"))]) (cider . [(20151028 152) ((clojure-mode (5 0 0)) (pkg-info (0 4)) (emacs (24 3)) (queue (0 1 1)) (spinner (1 4)) (seq (1 9))) "Clojure Interactive Development Environment that Rocks" tar ((:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider"))]) (chruby . [(20141126 57) nil "Emacs integration for chruby" single ((:url . "http://www.emacswiki.org/emacs/ChrubyEl") (:keywords "ruby" "chruby"))]) (chronos . [(20150602 829) nil "multiple simultaneous countdown / countup timers" tar ((:url . "http://github.com/dxknight/chronos") (:keywords "calendar"))]) (chm-view . [(20110616 1019) nil "View CHM file." single ((:url . "http://www.emacswiki.org/emacs/download/chm-view.el") (:keywords "chm" "chm-view"))]) (chinese-yasdcv . [(20150702 616) ((cl-lib (0 5)) (chinese-pyim (0 0 1))) "Yet another frontend for the StarDict command-line program" single ((:url . "https://github.com/tumashu/chinese-yasdcv") (:keywords "convenience" "chinese" "dictionary"))]) (chinese-word-at-point . [(20150618 1838) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single ((:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese"))]) (chinese-wbim . [(20150623 2050) nil "Enable Wubi Input Method in Emacs." tar nil]) (chinese-remote-input . [(20150110 2103) nil "Input Chinese with a remote input method (e.g. Android Voice Input Method)" single ((:url . "https://github.com/tumashu/chinese-remote-input") (:keywords "convenience" "chinese"))]) (chinese-pyim . [(20151018 1815) ((cl-lib (0 5)) (pos-tip (0 4))) "Chinese pinyin input method" tar ((:url . "https://github.com/tumashu/chinese-pyim") (:keywords "convenience" "chinese" "pinyin" "input-method"))]) (chinese-fonts-setup . [(20151024 2035) ((cl-lib (0 5))) "A fonts config tool enforcing double-width Chinese character display" single ((:url . "https://github.com/tumashu/chinese-fonts-setup") (:keywords "convenience" "chinese" "font"))]) (chicken-scheme . [(20141116 1139) nil "Scheme-mode extensions for Chicken Scheme" single ((:url . "http://github.com/dleslie/chicken-scheme"))]) (cherry-blossom-theme . [(20150621 2042) ((emacs (24 0))) "a soothing color theme for Emacs24." single ((:url . "https://github.com/inlinestyle/emacs-cherry-blossom-theme"))]) (chef-mode . [(20111121 700) nil "minor mode for editing an opscode chef repository" single ((:keywords "chef" "knife"))]) (checkbox . [(20141116 1658) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single ((:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience"))]) (chatwork . [(20150807 1948) nil "ChatWork client for Emacs" single ((:url . "https://github.com/ataka/chatwork") (:keywords "web"))]) (charmap . [(20131019 2158) nil "Unicode table for Emacs" single ((:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs"))]) (change-inner . [(20150707 844) ((expand-region (0 7))) "Change contents based on semantic units" single ((:keywords "convenience" "extensions"))]) (cg . [(20150819 404) nil "major mode for editing Constraint Grammar files" single ((:url . "http://beta.visl.sdu.dk/constraint_grammar.html") (:keywords "languages"))]) (cfengine-code-style . [(20131209 411) nil "C code style for CFEngine project." single ((:url . "https://github.com/cfengine/core"))]) (cerbere . [(20140418 715) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd"))]) (centimacro . [(20140306 627) nil "Assign multiple macros as global key bindings" single ((:url . "https://github.com/abo-abo/centimacro") (:keywords "macros"))]) (centered-window-mode . [(20140730 247) nil "Center the text when there's only one window" single ((:url . "https://github.com/ikame/centered-window-mode") (:keywords "faces" "windows"))]) (centered-cursor-mode . [(20151001 634) nil "cursor stays vertically centered" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/centered-cursor-mode.el") (:keywords "convenience"))]) (celery . [(20150812 147) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single ((:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience"))]) (cedit . [(20141231 814) nil "paredit-like commands for c-like languages" single ((:url . "http://hins11.yu-yake.com/"))]) (cdnjs . [(20140217 1312) ((cl-lib (0 3)) (dash (2 5 0)) (deferred (0 3 2)) (f (0 16 0)) (pkg-info (0 4))) "A front end for http://cdnjs.com" single ((:url . "https://github.com/yasuyk/cdnjs.el") (:keywords "tools"))]) (cdlatex . [(20140707 426) nil "Fast input methods for LaTeX environments and math" single ((:keywords "tex"))]) (cdb . [(20141201 754) nil "constant database (cdb) reader for Emacs Lisp" single ((:keywords "cdb"))]) (cd-compile . [(20141108 1157) nil "run compile in a specific directory" single nil]) (ccc . [(20150112 533) nil "buffer local cursor color control library" single ((:url . "https://github.com/skk-dev/ddskk/blob/master/READMEs/README.ccc.org") (:keywords "cursor" "last" "modified:" "$date:" "2015/01/12" "09:41:07" "$"))]) (cbm . [(20150715 1204) nil "Cycle through buffers with the same `major-mode'." single ((:url . "http://github.com/akermu/cbm.el") (:keywords "buffers" "cycling"))]) (caskxy . [(20140513 839) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:url . "https://github.com/aki2o/caskxy") (:keywords "convenience"))]) (cask-package-toolset . [(20150708 616) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar ((:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools"))]) (cask . [(20151009 202) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) "Cask: Project management for Emacs package development" tar ((:url . "http://github.com/cask/cask") (:keywords "speed" "convenience"))]) (cargo . [(20151017 1420) ((emacs (24 3))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar ((:keywords "tools"))]) (capture . [(20130828 944) nil "screencasting with \"avconv\" or \"ffmpeg\"" tar nil]) (caml . [(20151009 845) nil "OCaml code editing commands for Emacs" tar nil]) (camcorder . [(20150919 1812) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single ((:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast"))]) (calmer-forest-theme . [(20130925 2210) nil "Darkish theme with green/orange tint" single ((:url . "https://github.com/caldwell/calmer-forest-theme"))]) (calfw-gcal . [(20120111 200) nil "edit Google calendar for calfw.el." tar ((:url . "https://github.com/myuhe/calfw-gcal.el") (:keywords "convenience" "calendar" "calfw.el"))]) (calfw . [(20150923 1949) ((google-maps (20130412 230))) "Calendar view framework on Emacs" tar ((:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar"))]) (cal-china-x . [(20140907 155) nil "Chinese calendar extras" single ((:url . "http://xwl.appspot.com/ref/cal-china-x.el"))]) (cake2 . [(20140626 542) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP2 Minor Mode" tar ((:url . "http://code.101000lab.org"))]) (cake-inflector . [(20140415 158) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:url . "https://github.com/k1LoW/emacs-cake-inflector"))]) (cake . [(20140603 2131) ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP Minor Mode" tar ((:url . "https://github.com/k1LoW/emacs-cake"))]) (cacoo . [(20120319 1659) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar nil]) (cache . [(20111019 1600) nil "implementation of a hash table whose key-value pairs expire" single nil]) (c0-mode . [(20151022 1631) nil "Major mode for editing C0 files" single ((:url . "http://c0.typesafety.net/") (:keywords "c0" "languages"))]) (c-eldoc . [(20150904 132) nil "helpful description of the arguments to C functions" single ((:url . "http://github.com/nflath/c-eldoc"))]) (button-lock . [(20150223 554) nil "Clickable text defined by regular expression" single ((:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions"))]) (buttercup . [(20150927 306) nil "Behavior-Driven Emacs Lisp Testing" tar nil]) (butler . [(20150811 1708) ((deferred (0 3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar nil]) (busybee-theme . [(20130920 942) nil "port of vim's mustang theme" single ((:url . "http://github.com/mswift42/busybee-theme"))]) (buster-snippets . [(20141208 238) nil "Yasnippets for the Buster javascript testing framework" tar ((:keywords "snippets"))]) (buster-mode . [(20140928 513) nil "Minor mode to speed up development when writing tests with Buster.js" single ((:keywords "buster" "testing" "javascript"))]) (bury-successful-compilation . [(20150328 1728) nil "Bury the *compilation* buffer after successful compilation" single ((:keywords "compilation"))]) (bundler . [(20150824 440) nil "No description available." single nil]) (bug-reference-github . [(20131202 1303) nil "Automatically set `bug-reference-url-format' in Github repositories." tar ((:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools"))]) (bufshow . [(20130711 1039) ((emacs (24 1))) "A simple presentation tool for Emacs." single ((:url . "https://github.com/pjones/bufshow"))]) (buffer-utils . [(20140512 700) nil "Buffer-manipulation utility functions" single ((:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions"))]) (buffer-stack . [(20101223 220) nil "Enhanced intelligent switch-to-other-buffer replacement." single ((:url . "http://www.sixfingeredman.net/proj/xemacs") (:keywords "buffer" "buffers" "switching buffers"))]) (buffer-move . [(20150523 513) nil "" single ((:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience"))]) (buffer-buttons . [(20150106 639) nil "Define, save, and load code-safe buttons in files for emacs" single ((:url . "https://github.com/rpav/buffer-buttons"))]) (bubbleberry-theme . [(20141017 244) ((emacs (24 1))) "A theme based on LightTable for Emacs24" single ((:url . "https://github.com/jasonm23/emacs-bubbleberry-theme"))]) (bts-github . [(20150108 27) ((bts (0 0 1)) (gh (0 8 2))) "A plugin of bts.el for GitHub" single ((:url . "https://github.com/aki2o/emacs-bts-github") (:keywords "convenience"))]) (bts . [(20150107 544) ((widget-mvc (0 0 2)) (log4e (0 3 0)) (yaxception (0 3 3)) (dash (2 9 0)) (s (1 9 0)) (pos-tip (0 4 5))) "A unified UI for various bug tracking systems" single ((:url . "https://github.com/aki2o/emacs-bts") (:keywords "convenience"))]) (btc-ticker . [(20140313 641) ((json (1 2)) (request (0 2 0))) "Shows latest bitcoin price" single ((:keywords "news"))]) (bs-ext . [(20130824 459) nil "Extensions to emacs buffer-selection library (bs.el)" single ((:url . "http://www.emacswiki.org/emacs/download/bs-ext.el") (:keywords "convenience" "files"))]) (browse-url-dwim . [(20140731 1222) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ((:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia"))]) (browse-kill-ring . [(20150829 632) nil "interactively insert items from kill-ring" single ((:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience"))]) (browse-kill-ring+ . [(20150104 1332) ((browse-kill-ring (0))) "Extensions to `browse-kill-ring.el'." single ((:url . "http://www.emacswiki.org/browse-kill-ring+.el") (:keywords "convenience"))]) (browse-at-remote . [(20151008 1017) ((f (0 17 2)) (s (1 9 0))) "Open page at github/bitbucket from emacs buffers" single ((:keywords "github" "bitbucket" "convenience"))]) (broadcast . [(20150313 1659) ((emacs (24 4))) "Links buffers together for simultaneous editing." single ((:url . "https://github.com/killdash9/broadcast.el") (:keywords "convenience" "frames" "link" "cursors"))]) (brainfuck-mode . [(20150113 42) ((langdoc (20130601 1450))) "Brainfuck mode for Emacs" single ((:url . "https://github.com/tom-tan/brainfuck-mode/") (:keywords "brainfuck" "langdoc"))]) (bracketed-paste . [(20140222 1801) ((emacs (24 3))) "bracketed paste mode support within emacs -nw" single ((:keywords "terminals"))]) (bpe . [(20141228 1405) ((emacs (24 1))) "Blog from Org mode to Blogger" single ((:url . "https://github.com/yuutayamada/bpe") (:keywords "blogger" "blog"))]) (boxquote . [(20081011 1326) nil "Quote text with a semi-box." single nil]) (boron-theme . [(20150117 952) ((emacs (24 0))) "an Emacs 24 theme based on Boron (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (boon . [(20151024 1345) ((emacs (24 5)) (expand-region (0 10 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar nil]) (bookmark+ . [(20150908 1239) nil "Bookmark+: extensions to standard library `bookmark.el'." tar ((:url . "http://www.emacswiki.org/bookmark+.el") (:keywords "bookmarks" "bookmark+" "projects" "placeholders" "annotations" "search" "info" "url" "w3m" "gnus"))]) (boogie-friends . [(20150828 2349) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (yasnippet (0 9 0 1)) (company (0 8 12))) "Collection of programming modes for Boogie and one related language (Dafny)." tar nil]) (bonjourmadame . [(20150914 308) nil "Say \"Hello ma'am!\"" single nil]) (bongo . [(20150906 233) nil "play music with Emacs" tar nil]) (bog . [(20150918 1530) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single ((:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines"))]) (bm . [(20141212 1535) nil "Visible bookmarks in buffer." single ((:url . "https://github.com/joodland/bm") (:keywords "bookmark" "highlight" "faces" "persistent"))]) (bliss-theme . [(20141115 2301) ((emacs (24 0))) "an Emacs 24 theme based on Bliss (tmTheme)" single ((:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (blgrep . [(20150401 716) ((clmemo (20140321 715))) "Block grep" tar ((:keywords "tools" "convenience"))]) (blank-mode . [(20130824 459) nil "minor mode to visualize TAB, (HARD) SPACE, NEWLINE" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "wp"))]) (bitly . [(20130503 149) nil "Shorten URLs using the bitly.com shortener service" single ((:url . "https://github.com/jorgenschaefer/bitly-el"))]) (bitlbee . [(20130328 1018) nil "Help get Bitlbee (http://www.bitlbee.org) up and running." single nil]) (bison-mode . [(20141119 43) nil "Major mode for editing bison, yacc and lex files." single ((:keywords "bison-mode" "yacc-mode"))]) (birds-of-paradise-plus-theme . [(20130419 1429) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes"))]) (bing-dict . [(20150621 1111) nil "Minimalists' English-Chinese Bing dictionary" single ((:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions"))]) (bind-key . [(20150321 213) nil "A simple way to manage personal keybindings" single ((:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs"))]) (bind-chord . [(20151001 801) ((bind-key (1 0)) (key-chord (0 6))) "key-chord binding helper for use-package-chords" single ((:url . "https://github.com/waymondo/use-package-chords") (:keywords "convenience" "tools" "extensions"))]) (bibtex-utils . [(20150924 647) nil "Provides utilities for extending BibTeX mode" single ((:url . "https://github.com/plantarum/bibtex-utils") (:keywords "bibtex"))]) (bibslurp . [(20130904 1053) ((s (1 6 0)) (dash (1 5 0))) "retrieve BibTeX entries from NASA ADS" single ((:url . "https://github.com/mkmcc/bibslurp") (:keywords "bibliography" "nasa ads"))]) (bibretrieve . [(20131013 1132) ((auctex (11 87)) (emacs (24 3))) "Retrieving BibTeX entries from the web" tar ((:keywords "bibtex" "latex" "mathscinet" "arxiv" "zbmath"))]) (bfbuilder . [(20150924 950) ((cl-lib (0 3))) "A brainfuck development environment with interactive debugger" single ((:url . "http://hins11.yu-yake.com/"))]) (bf-mode . [(20130403 742) nil "Browse file persistently on dired" single ((:url . "https://github.com/emacs-jp/bf-mode") (:keywords "convenience"))]) (better-registers . [(20140813 119) nil "facilities for more powerful registers" single ((:keywords "register" "macro"))]) (better-defaults . [(20150404 223) nil "Fixing weird quirks and poor defaults" single ((:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience"))]) (bert . [(20131117 214) nil "BERT serialization library for Emacs" single ((:keywords "comm" "data"))]) (benchmark-init . [(20150905 238) nil "Benchmarks Emacs require and load calls" tar ((:keywords "benchmark"))]) (beginend . [(20150607 1001) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single ((:keywords "dired" "message" "mu4e" "begin" "end" "beginning" "buffer"))]) (beeminder . [(20150104 1434) ((org (7))) "Emacs interface for Beeminder" single ((:url . "http://www.philnewton.net/code/beeminder-el/") (:keywords "beeminder"))]) (beacon . [(20151028 512) ((seq (1 9)) (cl-lib (0 5))) "Highlight the cursor whenever the window scrolls" single ((:url . "https://github.com/Malabarba/beacon") (:keywords "convenience"))]) (bdo . [(20140126 101) nil "Do things to a browser page from Emacs. BETA!" tar ((:keywords "development"))]) (bbyac . [(20150316 301) ((browse-kill-ring (1 3)) (cl-lib (0 5))) "Type a little Bit, and Bang! You Are Completed." single ((:url . "https://github.com/baohaojun/bbyac") (:keywords "abbrev"))]) (bbdb2erc . [(20130606 2329) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:keywords "irc" "contacts" "chat" "client" "internet"))]) (bbdb-vcard . [(20150713 1350) ((bbdb (3 0))) "vCard import/export for BBDB" tar ((:url . "http://github.com/vgeddes/bbdb-vcard") (:keywords "data" "calendar" "mail" "news"))]) (bbdb-handy . [(20150707 1752) ((bbdb (3 1))) "BBDB window as email-address chooser when write an email" single ((:url . "https://github.com/tumashu/bbdb-handy"))]) (bbdb-ext . [(20130513 1152) ((bbdb (2 36))) "Extra commands for BBDB" single ((:url . "https://github.com/vapniks/bbdb-ext") (:keywords "extensions"))]) (bbdb-csv-import . [(20140802 442) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" single ((:url . "https://gitlab.com/iankelling/bbdb-csv-import") (:keywords "csv" "util" "bbdb"))]) (bbdb-china . [(20150615 1856) ((bbdb-vcard (0 4 1)) (chinese-pyim (0 0 1))) "BBDB utils, which let Chinese BBDB users feel easy" single ((:url . "https://github.com/tumashu/bbdb-china"))]) (bbdb-android . [(20150705 2224) ((bbdb-vcard (20150705 341))) "Android phone contacts import/export for BBDB" single ((:url . "https://github.com/tumashu/bbdb-android"))]) (bbdb . [(20150910 2107) nil "The Insidious Big Brother Database for GNU Emacs" tar nil]) (bbdb- . [(20140221 1554) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail"))]) (bbcode-mode . [(20141103 1341) nil "Major mode for writing BBCode markup" single ((:url . "https://github.com/ejmr/bbcode-mode"))]) (bats-mode . [(20141115 701) nil "Emacs mode for editing and running Bats tests" single ((:url . "https://github.com/dougm/bats-mode") (:keywords "bats" "tests"))]) (batch-mode . [(20140807 1350) nil "major mode for editing ESRI batch scrips" single nil]) (basic-theme . [(20151010 107) ((emacs (24))) "Minimalistic light color theme" single ((:url . "http://github.com/fgeller/basic-theme.el") (:keywords "theme" "basic" "minimal" "colors"))]) (bash-completion . [(20150514 728) nil "BASH completion for the shell buffer" tar nil]) (base16-theme . [(20151019 711) nil "Collection of themes built on combinations of 16 base colors" tar ((:url . "https://github.com/mkaito/base16-emacs"))]) (badger-theme . [(20140716 1932) nil "A dark theme for Emacs 24." single ((:url . "https://github.com/ccann/badger-theme"))]) (backup-walker . [(20130720 816) nil "quickly traverse all backups of a file" single ((:url . "https://github.com/lewang/backup-walker") (:keywords "backup"))]) (backup-each-save . [(20130704 732) nil "backup each savepoint of a file" single nil]) (back-button . [(20150804 1304) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ((:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface"))]) (babel-repl . [(20150712 800) ((emacs (24))) "Run babel REPL" single ((:url . "https://github.com/hung-phan/babel-repl/") (:keywords "babel" "javascript" "es6"))]) (babel . [(20131231 725) nil "interface to web translation services such as Babelfish" single ((:url . "http://github.com/juergenhoetzel/babel.el") (:keywords "translation" "web"))]) (axiom-environment . [(20150815 203) ((emacs (24 2))) "An environment for using Axiom/OpenAxiom/FriCAS" tar ((:keywords "axiom" "openaxiom" "fricas"))]) (awk-it . [(20130917 1148) nil "Run AWK interactively on region!" single ((:keywords "awk"))]) (avy-zap . [(20150913 1903) ((avy (0 2 0))) "Zap to char using `avy'" single ((:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions"))]) (avy-migemo . [(20151026 454) ((emacs (24 4)) (avy (0 3)) (migemo (1 9))) "avy with migemo" tar ((:url . "https://github.com/momomo5717/avy-migemo") (:keywords "avy" "migemo"))]) (avy . [(20151026 59) ((emacs (24 1)) (cl-lib (0 5))) "set-based completion" single ((:url . "https://github.com/abo-abo/avy") (:keywords "point" "location"))]) (autumn-light-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single ((:url . "http://github.com/aalpern/emacs-color-theme-autumn-light") (:keywords "color" "theme"))]) (autotetris-mode . [(20141114 846) ((cl-lib (0 5))) "automatically play tetris" single ((:url . "https://github.com/skeeto/autotetris-mode"))]) (autotest . [(20150130 225) nil "ZenTest's autotest integration with emacs." single ((:url . "https://github.com/zenspider/elisp/blob/master/autotest.el") (:keywords "testing" "ruby" "convenience"))]) (autopair . [(20140825 427) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations"))]) (automargin . [(20131112 14) nil "add margins to windows not-splitted, and center them" single ((:url . "http://hins11.yu-yake.com/"))]) (autofit-frame . [(20150104 1308) ((fit-frame (0))) "Automatically resize one-window frames to fit" single ((:url . "http://www.emacswiki.org/autofit-frame.el") (:keywords "internal" "extensions" "convenience" "local"))]) (autodisass-llvm-bitcode . [(20150410 1825) nil "Automatically disassemble LLVM bitcode" tar nil]) (autodisass-java-bytecode . [(20151005 912) nil "Automatically disassemble Java bytecode" tar nil]) (autobookmarks . [(20150814 1304) ((dash (2 10 0))) "Save recently visited files and buffers" single ((:keywords "files"))]) (auto-yasnippet . [(20150925 1557) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ((:url . "https://github.com/abo-abo/auto-yasnippet"))]) (auto-shell-command . [(20150416 1057) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:keywords "shell" "save" "async" "deferred" "auto"))]) (auto-save-buffers-enhanced . [(20130607 1949) nil "Automatically save buffers in a decent way" single nil]) (auto-package-update . [(20151025 2311) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single ((:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update"))]) (auto-install . [(20150418 1702) nil "Auto install elisp file" single ((:url . "http://www.emacswiki.org/emacs/download/auto-install.el") (:keywords "auto-install"))]) (auto-indent-mode . [(20140505 655) nil "Auto indent Minor mode" tar ((:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation"))]) (auto-highlight-symbol . [(20130313 243) nil "Automatic highlighting current symbol minor mode" single ((:url . "http://github.com/gennad/auto-highlight-symbol/raw/master/auto-highlight-symbol.el") (:keywords "highlight" "face" "match" "convenience"))]) (auto-dim-other-buffers . [(20140619 902) nil "Makes non-current buffers less prominent" single ((:url . "https://github.com/mina86/auto-dim-other-buffers.el"))]) (auto-dictionary . [(20150410 910) nil "automatic dictionary switcher for flyspell" single ((:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp"))]) (auto-complete-sage . [(20150419 804) ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) "An auto-complete source for sage-shell-mode." single ((:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete"))]) (auto-complete-rst . [(20140225 144) ((auto-complete (1 4))) "Auto-complete extension for ReST and Sphinx" tar ((:url . "https://github.com/tkf/auto-complete-rst"))]) (auto-complete-pcmp . [(20140226 2251) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion"))]) (auto-complete-nxml . [(20140220 2058) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml"))]) (auto-complete-exuberant-ctags . [(20140320 24) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags"))]) (auto-complete-clang-async . [(20130526 814) nil "Auto Completion source for clang for GNU Emacs" single ((:keywords "completion" "convenience"))]) (auto-complete-clang . [(20140409 52) ((auto-complete (1 3 1))) "Auto Completion source for clang for GNU Emacs" single ((:url . "https://github.com/brianjcj/auto-complete-clang") (:keywords "completion" "convenience"))]) (auto-complete-chunk . [(20140225 146) ((auto-complete (1 4))) "Auto-completion for dot.separated.words." single ((:url . "https://github.com/tkf/auto-complete-chunk"))]) (auto-complete-c-headers . [(20150911 2023) ((auto-complete (1 4))) "An auto-complete source for C/C++ header files" single ((:keywords "c"))]) (auto-complete-auctex . [(20140223 958) ((yasnippet (0 6 1)) (auto-complete (1 4))) "auto-completion for auctex" single nil]) (auto-complete . [(20150618 1949) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar nil]) (auto-compile . [(20150731 545) ((emacs (24 3)) (dash (2 1)) (packed (0 3 5))) "automatically compile Emacs Lisp libraries" single ((:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp"))]) (auto-capitalize . [(20131013 2205) nil "Automatically capitalize (or upcase) words" single ((:keywords "text" "wp" "convenience rcs $id: auto-capitalize.el" "v 2.20 2005/05/25 18:47:22 kevinr exp $"))]) (auto-auto-indent . [(20131106 1103) ((es-lib (0 1)) (cl-lib (1 0))) "Indents code as you type" single ((:url . "https://github.com/sabof/auto-auto-indent"))]) (auto-async-byte-compile . [(20140212 1412) nil "No description available." single nil]) (auth-password-store . [(20151008 544) ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) "Integrate auth-source with password-store" single ((:keywords "pass" "password-store" "auth-source" "username" "password" "login"))]) (aurora-theme . [(20151015 1102) nil "A theme inspired by SublimeText's Material theme" single ((:url . "http://github.com/xzerocode/aurora-theme"))]) (aurora-config-mode . [(20140520 203) nil "Major mode for Apache Aurora configuration files" single ((:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration"))]) (aurel . [(20151006 1315) nil "Search, get info, vote and download AUR packages" single ((:url . "https://github.com/alezost/aurel") (:keywords "tools"))]) (audio-notes-mode . [(20140204 1154) nil "Play audio notes synced from somewhere else." single ((:url . "http://github.com/Bruce-Connor/audio-notes-mode") (:keywords "hypermedia" "convenience"))]) (auctex-lua . [(20130818 1120) nil "Lua editing support for AUCTeX" single ((:url . "http://github.com/vermiculus/auctex-lua") (:keywords "latex" "lua"))]) (auctex-latexmk . [(20150812 650) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single ((:url . "https://github.com/tom-tan/auctex-latexmk/") (:keywords "tex"))]) (atom-one-dark-theme . [(20151009 1032) nil "Atom One Dark color theme" single ((:url . "https://github.com/jonathanchu/atom-one-dark-theme"))]) (atom-dark-theme . [(20150825 1105) nil "An Emacs port of the Atom Dark theme from Atom.io." single ((:url . "https://github.com/whitlockjc/atom-dark-theme-emacs") (:keywords "themes" "atom" "dark"))]) (async . [(20150909 2257) ((emacs (24)) (cl-lib (0 5))) "Asynchronous processing in Emacs" tar ((:url . "https://github.com/jwiegley/emacs-async"))]) (asn1-mode . [(20131218 420) ((emacs (24 3))) "ASN.1/GDMO mode for GNU Emacs" single ((:url . "https://github.com/kawabata/asn1-mode/") (:keywords "languages" "processes" "tools"))]) (asilea . [(20150105 725) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single ((:url . "https://github.com/Fanael/asilea"))]) (ascii . [(20130824 500) nil "ASCII code display." single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/ViniciusJoseLatorre") (:keywords "data" "ascii"))]) (artbollocks-mode . [(20141212 1332) nil "Improve your writing (especially about art)" single ((:url . "https://github.com/sachac/artbollocks-mode"))]) (arjen-grey-theme . [(20150731 645) nil "A soothing dark grey theme" single ((:url . "https://github.com/credmp/arjen-grey") (:keywords "faces"))]) (ariadne . [(20131117 911) ((bert (0 1))) "Ariadne plugin for Emacs" single ((:keywords "comm" "convenience" "processes"))]) (aria2 . [(20141107 1517) ((emacs (24 4))) "Control aria2c commandline tool from Emacs" single ((:url . "https://bitbucket.org/ukaszg/aria2-mode") (:keywords "download" "bittorrent" "aria2"))]) (arduino-mode . [(20151017 2335) nil "Major mode for the Arduino language" single ((:keywords "languages" "arduino"))]) (archive-region . [(20140201 1545) nil "Move region to archive file instead of killing" single ((:url . "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el") (:keywords "languages"))]) (apu . [(20150710 1951) nil "Apropos Unicode characters." single ((:url . "http://www.emacswiki.org/apu.el") (:keywords "unicode" "characters" "encoding" "commands" "ucs-names"))]) (apropospriate-theme . [(20151026 928) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar nil]) (apropos-fn+var . [(20150425 1101) nil "Apropos for functions and variables" single ((:url . "http://www.emacswiki.org/apropos-fn+var.el") (:keywords "apropos"))]) (aproject . [(20150605 206) nil "Basic project framework for Emacs" tar ((:url . "https://github.com/vietor/aproject") (:keywords "environment" "project"))]) (applescript-mode . [(20090320 2332) nil "major mode for editing AppleScript source" single ((:keywords "languages" "tools"))]) (apples-mode . [(20110120 2018) nil "Major mode for editing and executing AppleScript code" tar ((:keywords "applescript" "languages"))]) (apel . [(20141024 1642) nil "APEL (A Portable Emacs Library) provides support for portable Emacs Lisp programs" tar nil]) (apache-mode . [(20150828 714) nil "major mode for editing Apache configuration files" single ((:keywords "languages" "faces"))]) (aozora-view . [(20140310 617) nil "Aozora Bunko text Emacs viewer." tar ((:url . "https://github.com/kawabata/aozora-view") (:keywords "text"))]) (aok . [(20130824 427) nil "various useful ways to do `multi-occur'" single nil]) (anzu . [(20151015 405) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single ((:url . "https://github.com/syohex/emacs-anzu"))]) (anything-sage . [(20141005 413) ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) "An anything extension for sage-shell-mode." single ((:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything"))]) (anything-replace-string . [(20140317 336) ((anything (1 3 9))) "`replace-string' and `query-replace' `anything.el' interface" single ((:url . "http://code.101000lab.org"))]) (anything-prosjekt . [(20140129 4) ((prosjekt (0 3)) (anything (0))) "Anything integration for prosjekt." single ((:url . "https://github.com/abingham/prosjekt"))]) (anything-project . [(20141024 227) ((imakado (0 12)) (anything (1 3 9))) "finding any resource of a project" single ((:url . "https://github.com/imakado/anything-project") (:keywords "convenience"))]) (anything-milkode . [(20140518 743) ((milkode (0 3)) (anything (1 3 9))) "Command line search with Milkode" single ((:keywords "milkode" "anything" "search" "grep" "jump" "keyword"))]) (anything-git-grep . [(20130608 1940) ((anything (1 3 9))) "anything for git grep" tar ((:url . "https://github.com/mechairoi/anything-git-grep") (:keywords "anything" "git"))]) (anything-git-files . [(20130609 243) ((anything (1 3 9))) "anything for git files" single ((:keywords "anything" "git"))]) (anything-exuberant-ctags . [(20140316 1637) ((anything (1 3 9))) "Exuberant ctags anything.el interface" single ((:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags"))]) (anything . [(20151018 1903) nil "open anything / QuickSilver-like candidate-selection framework" tar ((:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines"))]) (anyins . [(20131229 241) nil "Insert content at multiple places from shell command or kill-ring" single ((:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular"))]) (anx-api . [(20140208 714) nil "Interact with the AppNexus API from Emacs." single ((:keywords "convenience" "json" "rest" "api" "appnexus"))]) (anti-zenburn-theme . [(20151004 1435) nil "Low-contrast Zenburn-inverted theme" single ((:url . "https://github.com/m00natic/anti-zenburn-theme"))]) (ant . [(20131227 2307) nil "helpers for compiling with ant" single ((:keywords "compilation" "ant" "java"))]) (ansible-doc . [(20150524 1005) ((emacs (24 1))) "Ansible documentation Minor Mode" single ((:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help"))]) (ansible . [(20150319 133) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:url . "http://101000lab.org"))]) (ansi . [(20150703 126) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single ((:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi"))]) (annoying-arrows-mode . [(20130515 1000) nil "Ring the bell if using arrows too much" single ((:keywords "learning"))]) (annotate . [(20151006 933) nil "annotate files without changing them" single ((:url . "https://github.com/bastibe/annotate.el"))]) (angularjs-mode . [(20150909 602) nil "No description available." tar nil]) (angular-snippets . [(20140513 2223) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar nil]) (angry-police-captain . [(20120829 552) nil "Show quote from http://theangrypolicecaptain.com in the minibuffer" single ((:keywords "games" "web" "fun"))]) (android-mode . [(20150106 544) nil "Minor mode for Android application development" single ((:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes"))]) (anchored-transpose . [(20080904 2254) nil "Transposes a phrase around an anchor phrase" single ((:keywords "tools" "convenience"))]) (anaphora . [(20140728 1536) nil "anaphoric macros providing implicit temp variables" single ((:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions"))]) (anaconda-mode . [(20150922 537) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single ((:url . "https://github.com/proofit404/anaconda-mode"))]) (ample-zen-theme . [(20150119 1354) nil "AmpleZen Theme for Emacs 24" single ((:url . "https://github.com/mjwall/ample-zen") (:keywords "theme" "dark" "emacs 24"))]) (ample-theme . [(20150814 1101) nil "Calm Dark Theme for Emacs" tar ((:url . "https://github.com/jordonbiondo/ample-theme") (:keywords "theme" "dark"))]) (ample-regexps . [(20151023 300) nil "ample regular expressions for Emacs" tar ((:keywords "regexps" "extensions" "tools"))]) (amd-mode . [(20151028 549) ((projectile (0 10 0)) (s (1 9 0)) (f (0 16 2)) (dash (2 5 0)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single ((:keywords "javascript" "amd" "projectile"))]) (all-ext . [(20130824 506) ((all (1 0))) "Extension of M-x all" single ((:url . "http://www.emacswiki.org/emacs/download/all-ext.el") (:keywords "all" "search" "replace" "anything" "helm" "occur"))]) (align-cljlet . [(20150913 145) ((clojure-mode (1 11 5))) "Space align various Clojure forms" single ((:url . "https://github.com/gstamp/align-cljlet"))]) (alert . [(20151018 912) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single ((:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message"))]) (alect-themes . [(20150920 1124) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar ((:url . "https://github.com/alezost/alect-themes") (:keywords "color" "theme"))]) (alchemist . [(20151027 2251) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) "Elixir tooling integration into Emacs" tar ((:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist"))]) (airplay . [(20130212 426) ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) "Airplay bindings to Emacs" tar ((:url . "https://github.com/gongo/airplay-el") (:keywords "appletv" "airplay"))]) (airline-themes . [(20150920 745) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar ((:url . "http://github.com/AnthonyDiGirolamo/airline-themes") (:keywords "evil" "mode-line" "powerline" "airline" "themes"))]) (ahungry-theme . [(20151014 1938) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single ((:url . "https://github.com/ahungry/color-theme-ahungry") (:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme"))]) (ahk-mode . [(20151013 1901) ((emacs (24 3)) (cl-lib (0 5))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single ((:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation"))]) (ahg . [(20151027 908) nil "Alberto's Emacs interface for Mercurial (Hg)" single ((:url . "https://bitbucket.org/agriggio/ahg"))]) (aggressive-indent . [(20151025 743) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:url . "https://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools"))]) (aggressive-fill-paragraph . [(20151025 821) ((dash (2 10 0))) "A mode to automatically keep paragraphs filled" single ((:url . "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode") (:keywords "fill-paragraph" "automatic" "comments"))]) (ag . [(20150814 1655) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single nil]) (afternoon-theme . [(20140104 1059) ((emacs (24 1))) "Dark color theme with a deep blue background" single ((:url . "http://github.com/osener/emacs-afternoon-theme") (:keywords "themes"))]) (aes . [(20150529 237) nil "Implementation of AES" single ((:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools"))]) (adoc-mode . [(20150524 909) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc"))]) (addressbook-bookmark . [(20141205 2108) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single ((:url . "https://github.com/thierryvolpiatto/addressbook-bookmark"))]) (actionscript-mode . [(20140605 1128) nil "A simple mode for editing Actionscript 3 files" single ((:keywords "language" "modes"))]) (ack-menu . [(20150504 1322) ((mag-menu (0 1 0))) "A menu-based front-end for ack" single ((:url . "https://github.com/chumpage/ack-menu") (:keywords "tools" "matching" "convenience"))]) (achievements . [(20150530 1126) ((keyfreq (0 0 3))) "Achievements for emacs usage." tar nil]) (ace-window . [(20150803 837) ((avy (0 2 0))) "Quickly switch windows." single ((:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location"))]) (ace-popup-menu . [(20150910 527) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Replace GUI popup menu in Emacs with something more efficient" single ((:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu"))]) (ace-pinyin . [(20150808 2311) ((ace-jump-mode (2 0)) (avy (0 2 0))) "Jump to Chinese characters using ace-jump-char-mode or avy-goto-char" single ((:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions"))]) (ace-link . [(20151019 835) ((avy (0 2 0))) "Quickly follow links" single ((:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links"))]) (ace-jump-zap . [(20150330 1342) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single ((:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions"))]) (ace-jump-mode . [(20140616 115) nil "a quick cursor location minor mode for emacs" single ((:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor"))]) (ace-jump-helm-line . [(20151012 1223) ((avy (0 2 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single ((:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions"))]) (ace-jump-buffer . [(20150214 2234) ((ace-jump-mode (1 0)) (dash (2 4 0))) "fast buffer switching extension to `ace-jump-mode'" single ((:url . "https://github.com/waymondo/ace-jump-buffer"))]) (ace-isearch . [(20150808 556) ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" single ((:url . "https://github.com/tam17aki/ace-isearch"))]) (ace-flyspell . [(20150523 1115) ((ace-jump-mode (2 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single ((:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions"))]) (ac-sly . [(20150421 1322) ((sly (1 0 0 -3)) (auto-complete (1 4)) (cl-lib (0 5))) "An auto-complete source using sly completions" single ((:url . "https://github.com/qoocku/ac-sly"))]) (ac-slime . [(20150729 2035) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:url . "https://github.com/purcell/ac-slime"))]) (ac-skk . [(20141229 1719) ((auto-complete (1 3 1)) (ddskk (16 0 50)) (tinysegmenter (0)) (cl-lib (0 5))) "auto-complete-mode source for DDSKK a.k.a Japanese input method" single ((:url . "https://github.com/myuhe/ac-skk.el") (:keywords "convenience" "auto-complete"))]) (ac-racer . [(20150831 141) ((auto-complete (1 5 0)) (racer (0 0 2)) (cl-lib (0 5))) "auto-complete source of racer" single ((:url . "https://github.com/syohex/emacs-ac-racer"))]) (ac-php . [(20151027 2337) ((emacs (24)) (php-mode (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0)) (xcscope (1)) (s (1)) (f (1))) "Auto Completion source for php for GNU Emacs" tar ((:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (ac-octave . [(20150111 1708) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion"))]) (ac-mozc . [(20150227 819) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single ((:url . "https://github.com/igjit/ac-mozc"))]) (ac-math . [(20141116 1327) ((auto-complete (1 4)) (math-symbol-lists (1 0))) "Auto-complete sources for input of mathematical symbols and latex tags" single ((:url . "https://github.com/vitoshka/ac-math") (:keywords "latex" "auto-complete" "unicode" "symbols"))]) (ac-js2 . [(20140906 442) ((js2-mode (20090723)) (skewer-mode (1 4))) "Auto-complete source for Js2-mode, with navigation" tar ((:url . "https://github.com/ScottyB/ac-js2"))]) (ac-ispell . [(20150313 1728) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-ispell"))]) (ac-inf-ruby . [(20131115 350) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:keywords "languages" "tools"))]) (ac-html-csswatcher . [(20150930 37) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single ((:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete"))]) (ac-html-bootstrap . [(20150930 41) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar ((:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx"))]) (ac-html . [(20151005 31) ((auto-complete (1 4)) (s (1 9)) (f (0 17)) (dash (2 10))) "auto complete source for html tags and attributes" tar ((:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "slim" "haml" "jade"))]) (ac-helm . [(20140919 917) ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) "Helm interface for auto-complete" single ((:keywords "completion" "convenience" "helm"))]) (ac-haskell-process . [(20150423 702) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:keywords "languages"))]) (ac-geiser . [(20130928 2347) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar nil]) (ac-etags . [(20131127 311) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:url . "https://github.com/syohex/emacs-ac-etags"))]) (ac-emoji . [(20150823 11) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar ((:url . "https://github.com/syohex/emacs-ac-emoji"))]) (ac-emmet . [(20131015 858) ((emmet-mode (1 0 2)) (auto-complete (1 4))) "auto-complete sources for emmet-mode's snippets" single ((:url . "https://github.com/yasuyk/ac-emmet") (:keywords "completion" "convenience" "emmet"))]) (ac-dcd . [(20150702 724) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages"))]) (ac-dabbrev . [(20130905 2218) nil "auto-complete.el source for dabbrev" single nil]) (ac-clang . [(20150906 1008) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar ((:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense"))]) (ac-cider . [(20151012 308) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment"))]) (ac-capf . [(20140720 1817) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single ((:url . "https://github.com/syohex/emacs-ac-capf"))]) (ac-cake2 . [(20140320 8) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-cake . [(20140315 929) ((cake (1 4 2)) (auto-complete (1 4 0))) "CakePHP Minor Mode auto-complete.el source" single ((:url . "http://code.101000lab.org"))]) (ac-c-headers . [(20151021 134) ((auto-complete (1 3 1))) "auto-complete source for C headers" single ((:url . "http://hins11.yu-yake.com/"))]) (ac-anaconda . [(20150912 108) ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) "Anaconda sources for auto-complete-mode" single ((:url . "https://github.com/proofit404/ac-anaconda"))]) (ac-alchemist . [(20150907 2356) ((auto-complete (1 5 0)) (alchemist (1 5 0)) (cl-lib (0 5))) "auto-complete source for alchemist" single ((:url . "https://github.com/syohex/emacs-ac-alchemist"))]) (abyss-theme . [(20151007 408) ((emacs (24))) "A dark theme with contrasting colours." single ((:url . "https://github.com/mgrbyte/emacs-abyss-theme") (:keywords "theme" "dark" "contrasting colours"))]) (abl-mode . [(20140724 635) nil "Python TDD minor mode" single ((:url . "http://github.com/afroisalreadyinu/abl-mode"))]) (abc-mode . [(20140225 944) nil "Major mode for editing abc music files" single ((:keywords "local" "docs"))]) (@ . [(20140707 520) ((queue (0 1)) (emacs (24))) "multiple-inheritance prototype-based objects DSL" tar ((:url . "https://github.com/skeeto/at-el"))]) (4clojure . [(20131014 1507) ((json (1 2)) (request (0 2 0))) "Open and evaluate 4clojure.com questions" single ((:keywords "languages" "data"))]) (2048-game . [(20151026 1233) nil "play 2048 in Emacs" single ((:url . "https://bitbucket.org/zck/2048.el"))]) (0blayout . [(20151021 349) nil "Layout grouping with ease" single ((:url . "https://github.com/etu/0blayout") (:keywords "convenience" "window-management"))]))
